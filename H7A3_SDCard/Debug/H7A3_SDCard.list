
H7A3_SDCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c30c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800c5bc  0800c5bc  0001c5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ca68  0800ca68  0001ca68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ca70  0800ca70  0001ca70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ca74  0800ca74  0001ca74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800ca78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000350  24000074  0800caec  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  240003c4  0800caec  000203c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018f0f  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003380  00000000  00000000  00038fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001210  00000000  00000000  0003c338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010c8  00000000  00000000  0003d548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032a02  00000000  00000000  0003e610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a3bf  00000000  00000000  00071012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013eed6  00000000  00000000  0008b3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ca2a7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ea4  00000000  00000000  001ca2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c5a4 	.word	0x0800c5a4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800c5a4 	.word	0x0800c5a4

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <UART_Printf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UART_Printf(const char* fmt, ...) {
 80006a4:	b40f      	push	{r0, r1, r2, r3}
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b0c2      	sub	sp, #264	; 0x108
 80006aa:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 80006ac:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80006b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80006b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80006b8:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 80006ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80006be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80006c2:	f107 0008 	add.w	r0, r7, #8
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80006cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d0:	f00b fb1a 	bl	800bd08 <vsniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fe09 	bl	80002f0 <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	f107 0108 	add.w	r1, r7, #8
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <UART_Printf+0x5c>)
 80006ec:	f009 f851 	bl	8009792 <HAL_UART_Transmit>
    va_end(args);
}
 80006f0:	bf00      	nop
 80006f2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80006f6:	46bd      	mov	sp, r7
 80006f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006fc:	b004      	add	sp, #16
 80006fe:	4770      	bx	lr
 8000700:	24000194 	.word	0x24000194

08000704 <SDCard_init>:

void SDCard_init() {
 8000704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000708:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800070c:	af08      	add	r7, sp, #32
    int code;
    UART_Printf("Ready!\r\n");
 800070e:	48a5      	ldr	r0, [pc, #660]	; (80009a4 <SDCard_init+0x2a0>)
 8000710:	f7ff ffc8 	bl	80006a4 <UART_Printf>

    code = SDCARD_Init();
 8000714:	f000 fd82 	bl	800121c <SDCARD_Init>
 8000718:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 800071c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000720:	2b00      	cmp	r3, #0
 8000722:	da05      	bge.n	8000730 <SDCard_init+0x2c>
        UART_Printf("SDCARD_Init() failed: code = %d\r\n", code);
 8000724:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8000728:	489f      	ldr	r0, [pc, #636]	; (80009a8 <SDCard_init+0x2a4>)
 800072a:	f7ff ffbb 	bl	80006a4 <UART_Printf>
        return;
 800072e:	e1c4      	b.n	8000aba <SDCard_init+0x3b6>
    }

    UART_Printf("SDCARD_Init() done!\r\n");
 8000730:	489e      	ldr	r0, [pc, #632]	; (80009ac <SDCard_init+0x2a8>)
 8000732:	f7ff ffb7 	bl	80006a4 <UART_Printf>

    uint32_t blocksNum;
    code = SDCARD_GetBlocksNumber(&blocksNum);
 8000736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fe5a 	bl	80013f4 <SDCARD_GetBlocksNumber>
 8000740:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 8000744:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000748:	2b00      	cmp	r3, #0
 800074a:	da05      	bge.n	8000758 <SDCard_init+0x54>
        UART_Printf("SDCARD_GetBlocksNumber() failed: code = %d\r\n", code);
 800074c:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8000750:	4897      	ldr	r0, [pc, #604]	; (80009b0 <SDCard_init+0x2ac>)
 8000752:	f7ff ffa7 	bl	80006a4 <UART_Printf>
        return;
 8000756:	e1b0      	b.n	8000aba <SDCard_init+0x3b6>
    }

    UART_Printf("SDCARD_GetBlocksNumber() done! blocksNum = %u (or %u Mb)\r\n",
 8000758:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 800075c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000760:	4a94      	ldr	r2, [pc, #592]	; (80009b4 <SDCard_init+0x2b0>)
 8000762:	fba2 2303 	umull	r2, r3, r2, r3
 8000766:	09db      	lsrs	r3, r3, #7
 8000768:	461a      	mov	r2, r3
 800076a:	4893      	ldr	r0, [pc, #588]	; (80009b8 <SDCard_init+0x2b4>)
 800076c:	f7ff ff9a 	bl	80006a4 <UART_Printf>
        blocksNum, blocksNum/2000 /* same as * 512 / 1000 / 1000 */);

    uint32_t startBlockAddr = 0x00ABCD;
 8000770:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8000774:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    uint32_t blockAddr = startBlockAddr;
 8000778:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800077c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    uint8_t block[512];

    snprintf((char*)block, sizeof(block), "0x%08X", (int)blockAddr);
 8000780:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000784:	f107 0008 	add.w	r0, r7, #8
 8000788:	4a8c      	ldr	r2, [pc, #560]	; (80009bc <SDCard_init+0x2b8>)
 800078a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078e:	f00b fa5b 	bl	800bc48 <sniprintf>

    code = SDCARD_WriteSingleBlock(blockAddr, block);
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	4619      	mov	r1, r3
 8000798:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 800079c:	f000 ff00 	bl	80015a0 <SDCARD_WriteSingleBlock>
 80007a0:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 80007a4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	da05      	bge.n	80007b8 <SDCard_init+0xb4>
        UART_Printf("SDCARD_WriteSingleBlock() failed: code = %d\r\n", code);
 80007ac:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80007b0:	4883      	ldr	r0, [pc, #524]	; (80009c0 <SDCard_init+0x2bc>)
 80007b2:	f7ff ff77 	bl	80006a4 <UART_Printf>
        return;
 80007b6:	e180      	b.n	8000aba <SDCard_init+0x3b6>
    }
    UART_Printf("SDCARD_WriteSingleBlock(0x%08X, ...) done!\r\n", blockAddr);
 80007b8:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80007bc:	4881      	ldr	r0, [pc, #516]	; (80009c4 <SDCard_init+0x2c0>)
 80007be:	f7ff ff71 	bl	80006a4 <UART_Printf>

    memset(block, 0, sizeof(block));
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f00b fa33 	bl	800bc38 <memset>

    code = SDCARD_ReadSingleBlock(blockAddr, block);
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	4619      	mov	r1, r3
 80007d8:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80007dc:	f000 fe7a 	bl	80014d4 <SDCARD_ReadSingleBlock>
 80007e0:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 80007e4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	da05      	bge.n	80007f8 <SDCard_init+0xf4>
        UART_Printf("SDCARD_ReadSingleBlock() failed: code = %d\r\n", code);
 80007ec:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80007f0:	4875      	ldr	r0, [pc, #468]	; (80009c8 <SDCard_init+0x2c4>)
 80007f2:	f7ff ff57 	bl	80006a4 <UART_Printf>
        return;
 80007f6:	e160      	b.n	8000aba <SDCard_init+0x3b6>
    }

    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80007f8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80007fc:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000800:	781b      	ldrb	r3, [r3, #0]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000802:	469c      	mov	ip, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000804:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000808:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800080c:	785b      	ldrb	r3, [r3, #1]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800080e:	469e      	mov	lr, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000810:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000814:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000818:	789b      	ldrb	r3, [r3, #2]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800081a:	461a      	mov	r2, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800081c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000820:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000824:	78db      	ldrb	r3, [r3, #3]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000826:	4619      	mov	r1, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000828:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800082c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000830:	791b      	ldrb	r3, [r3, #4]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000832:	4618      	mov	r0, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000834:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000838:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800083c:	795b      	ldrb	r3, [r3, #5]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800083e:	461c      	mov	r4, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000840:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000844:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000848:	799b      	ldrb	r3, [r3, #6]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800084a:	461d      	mov	r5, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800084c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000850:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000854:	79db      	ldrb	r3, [r3, #7]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000856:	461e      	mov	r6, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000858:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800085c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000860:	7a1b      	ldrb	r3, [r3, #8]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000862:	607b      	str	r3, [r7, #4]
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000864:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000868:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800086c:	7a5b      	ldrb	r3, [r3, #9]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800086e:	9307      	str	r3, [sp, #28]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	9306      	str	r3, [sp, #24]
 8000874:	9605      	str	r6, [sp, #20]
 8000876:	9504      	str	r5, [sp, #16]
 8000878:	9403      	str	r4, [sp, #12]
 800087a:	9002      	str	r0, [sp, #8]
 800087c:	9101      	str	r1, [sp, #4]
 800087e:	9200      	str	r2, [sp, #0]
 8000880:	4673      	mov	r3, lr
 8000882:	4662      	mov	r2, ip
 8000884:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8000888:	4850      	ldr	r0, [pc, #320]	; (80009cc <SDCard_init+0x2c8>)
 800088a:	f7ff ff0b 	bl	80006a4 <UART_Printf>

    blockAddr = startBlockAddr + 1;
 800088e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000892:	3301      	adds	r3, #1
 8000894:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    code = SDCARD_WriteBegin(blockAddr);
 8000898:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 800089c:	f000 ff96 	bl	80017cc <SDCARD_WriteBegin>
 80008a0:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 80008a4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	da05      	bge.n	80008b8 <SDCard_init+0x1b4>
        UART_Printf("SDCARD_WriteBegin() failed: code = %d\r\n", code);
 80008ac:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80008b0:	4847      	ldr	r0, [pc, #284]	; (80009d0 <SDCard_init+0x2cc>)
 80008b2:	f7ff fef7 	bl	80006a4 <UART_Printf>
        return;
 80008b6:	e100      	b.n	8000aba <SDCard_init+0x3b6>
    }
    UART_Printf("SDCARD_WriteBegin(0x%08X, ...) done!\r\n", blockAddr);
 80008b8:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80008bc:	4845      	ldr	r0, [pc, #276]	; (80009d4 <SDCard_init+0x2d0>)
 80008be:	f7ff fef1 	bl	80006a4 <UART_Printf>

    for(int i = 0; i < 3; i++) {
 80008c2:	2300      	movs	r3, #0
 80008c4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80008c8:	e028      	b.n	800091c <SDCard_init+0x218>
        snprintf((char*)block, sizeof(block), "0x%08X", (int)blockAddr);
 80008ca:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80008ce:	f107 0008 	add.w	r0, r7, #8
 80008d2:	4a3a      	ldr	r2, [pc, #232]	; (80009bc <SDCard_init+0x2b8>)
 80008d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d8:	f00b f9b6 	bl	800bc48 <sniprintf>

        code = SDCARD_WriteData(block);
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 ffb1 	bl	8001848 <SDCARD_WriteData>
 80008e6:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
        if(code < 0) {
 80008ea:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da05      	bge.n	80008fe <SDCard_init+0x1fa>
            UART_Printf("SDCARD_WriteData() failed: code = %d\r\n", code);
 80008f2:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80008f6:	4838      	ldr	r0, [pc, #224]	; (80009d8 <SDCard_init+0x2d4>)
 80008f8:	f7ff fed4 	bl	80006a4 <UART_Printf>
            return;
 80008fc:	e0dd      	b.n	8000aba <SDCard_init+0x3b6>
        }

        UART_Printf("SDCARD_WriteData() done! blockAddr = %08X\r\n", blockAddr);
 80008fe:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8000902:	4836      	ldr	r0, [pc, #216]	; (80009dc <SDCard_init+0x2d8>)
 8000904:	f7ff fece 	bl	80006a4 <UART_Printf>
        blockAddr++;
 8000908:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800090c:	3301      	adds	r3, #1
 800090e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    for(int i = 0; i < 3; i++) {
 8000912:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000916:	3301      	adds	r3, #1
 8000918:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800091c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000920:	2b02      	cmp	r3, #2
 8000922:	ddd2      	ble.n	80008ca <SDCard_init+0x1c6>
    }

    code = SDCARD_WriteEnd();
 8000924:	f000 ffd6 	bl	80018d4 <SDCARD_WriteEnd>
 8000928:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 800092c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000930:	2b00      	cmp	r3, #0
 8000932:	da05      	bge.n	8000940 <SDCard_init+0x23c>
        UART_Printf("SDCARD_WriteEnd() failed: code = %d\r\n", code);
 8000934:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8000938:	4829      	ldr	r0, [pc, #164]	; (80009e0 <SDCard_init+0x2dc>)
 800093a:	f7ff feb3 	bl	80006a4 <UART_Printf>
        return;
 800093e:	e0bc      	b.n	8000aba <SDCard_init+0x3b6>
    }
    UART_Printf("SDCARD_WriteEnd() done!\r\n");
 8000940:	4828      	ldr	r0, [pc, #160]	; (80009e4 <SDCard_init+0x2e0>)
 8000942:	f7ff feaf 	bl	80006a4 <UART_Printf>

    blockAddr = startBlockAddr + 1;
 8000946:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800094a:	3301      	adds	r3, #1
 800094c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    code = SDCARD_ReadBegin(blockAddr);
 8000950:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8000954:	f000 fe9a 	bl	800168c <SDCARD_ReadBegin>
 8000958:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 800095c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000960:	2b00      	cmp	r3, #0
 8000962:	da05      	bge.n	8000970 <SDCard_init+0x26c>
        UART_Printf("SDCARD_ReadBegin() failed: code = %d\r\n", code);
 8000964:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8000968:	481f      	ldr	r0, [pc, #124]	; (80009e8 <SDCard_init+0x2e4>)
 800096a:	f7ff fe9b 	bl	80006a4 <UART_Printf>
        return;
 800096e:	e0a4      	b.n	8000aba <SDCard_init+0x3b6>
    }
    UART_Printf("SDCARD_ReadBegin(0x%08X, ...) done!\r\n", blockAddr);
 8000970:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8000974:	481d      	ldr	r0, [pc, #116]	; (80009ec <SDCard_init+0x2e8>)
 8000976:	f7ff fe95 	bl	80006a4 <UART_Printf>

    for(int i = 0; i < 3; i++) {
 800097a:	2300      	movs	r3, #0
 800097c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000980:	e085      	b.n	8000a8e <SDCard_init+0x38a>
        code = SDCARD_ReadData(block);
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	4618      	mov	r0, r3
 8000988:	f000 febe 	bl	8001708 <SDCARD_ReadData>
 800098c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
        if(code < 0) {
 8000990:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000994:	2b00      	cmp	r3, #0
 8000996:	da2d      	bge.n	80009f4 <SDCard_init+0x2f0>
            UART_Printf("SDCARD_ReadData() failed: code = %d\r\n", code);
 8000998:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800099c:	4814      	ldr	r0, [pc, #80]	; (80009f0 <SDCard_init+0x2ec>)
 800099e:	f7ff fe81 	bl	80006a4 <UART_Printf>
            return;
 80009a2:	e08a      	b.n	8000aba <SDCard_init+0x3b6>
 80009a4:	0800c5bc 	.word	0x0800c5bc
 80009a8:	0800c5c8 	.word	0x0800c5c8
 80009ac:	0800c5ec 	.word	0x0800c5ec
 80009b0:	0800c604 	.word	0x0800c604
 80009b4:	10624dd3 	.word	0x10624dd3
 80009b8:	0800c634 	.word	0x0800c634
 80009bc:	0800c670 	.word	0x0800c670
 80009c0:	0800c678 	.word	0x0800c678
 80009c4:	0800c6a8 	.word	0x0800c6a8
 80009c8:	0800c6d8 	.word	0x0800c6d8
 80009cc:	0800c708 	.word	0x0800c708
 80009d0:	0800c758 	.word	0x0800c758
 80009d4:	0800c780 	.word	0x0800c780
 80009d8:	0800c7a8 	.word	0x0800c7a8
 80009dc:	0800c7d0 	.word	0x0800c7d0
 80009e0:	0800c7fc 	.word	0x0800c7fc
 80009e4:	0800c824 	.word	0x0800c824
 80009e8:	0800c840 	.word	0x0800c840
 80009ec:	0800c868 	.word	0x0800c868
 80009f0:	0800c890 	.word	0x0800c890
        }

        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80009f4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80009f8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80009fc:	781b      	ldrb	r3, [r3, #0]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80009fe:	469c      	mov	ip, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000a00:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a04:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000a08:	785b      	ldrb	r3, [r3, #1]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000a0a:	469e      	mov	lr, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000a0c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a10:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000a14:	789b      	ldrb	r3, [r3, #2]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000a16:	4698      	mov	r8, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000a18:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a1c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000a20:	78db      	ldrb	r3, [r3, #3]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000a22:	461a      	mov	r2, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000a24:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a28:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000a2c:	791b      	ldrb	r3, [r3, #4]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000a2e:	4619      	mov	r1, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000a30:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a34:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000a38:	795b      	ldrb	r3, [r3, #5]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000a3a:	4618      	mov	r0, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000a3c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a40:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000a44:	799b      	ldrb	r3, [r3, #6]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000a46:	461c      	mov	r4, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000a48:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a4c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000a50:	79db      	ldrb	r3, [r3, #7]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000a52:	461d      	mov	r5, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000a54:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a58:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000a5c:	7a1b      	ldrb	r3, [r3, #8]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000a5e:	461e      	mov	r6, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000a60:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a64:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000a68:	7a5b      	ldrb	r3, [r3, #9]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000a6a:	9306      	str	r3, [sp, #24]
 8000a6c:	9605      	str	r6, [sp, #20]
 8000a6e:	9504      	str	r5, [sp, #16]
 8000a70:	9403      	str	r4, [sp, #12]
 8000a72:	9002      	str	r0, [sp, #8]
 8000a74:	9101      	str	r1, [sp, #4]
 8000a76:	9200      	str	r2, [sp, #0]
 8000a78:	4643      	mov	r3, r8
 8000a7a:	4672      	mov	r2, lr
 8000a7c:	4661      	mov	r1, ip
 8000a7e:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <SDCard_init+0x3c0>)
 8000a80:	f7ff fe10 	bl	80006a4 <UART_Printf>
    for(int i = 0; i < 3; i++) {
 8000a84:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000a8e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	f77f af75 	ble.w	8000982 <SDCard_init+0x27e>
    }

    code = SDCARD_ReadEnd();
 8000a98:	f000 fe6a 	bl	8001770 <SDCARD_ReadEnd>
 8000a9c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 8000aa0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	da05      	bge.n	8000ab4 <SDCard_init+0x3b0>
        UART_Printf("SDCARD_ReadEnd() failed: code = %d\r\n", code);
 8000aa8:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8000aac:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <SDCard_init+0x3c4>)
 8000aae:	f7ff fdf9 	bl	80006a4 <UART_Printf>
        return;
 8000ab2:	e002      	b.n	8000aba <SDCard_init+0x3b6>
    }
    UART_Printf("SDCARD_ReadEnd() done!\r\n");
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <SDCard_init+0x3c8>)
 8000ab6:	f7ff fdf5 	bl	80006a4 <UART_Printf>
}
 8000aba:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ac4:	0800c8b8 	.word	0x0800c8b8
 8000ac8:	0800c8f4 	.word	0x0800c8f4
 8000acc:	0800c91c 	.word	0x0800c91c

08000ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09c      	sub	sp, #112	; 0x70
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad6:	f001 fa1d 	bl	8001f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ada:	f000 f83d 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ade:	f000 f9d7 	bl	8000e90 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ae2:	f000 f923 	bl	8000d2c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000ae6:	f000 f96d 	bl	8000dc4 <MX_USB_OTG_HS_USB_Init>
  MX_DMA_Init();
 8000aea:	f000 f973 	bl	8000dd4 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000aee:	f000 f8a9 	bl	8000c44 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000af2:	f00a fdd3 	bl	800b69c <MX_FATFS_Init>
  MX_SPI1_Init();
 8000af6:	f000 f8c3 	bl	8000c80 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  //SDMMC_Ex1();
  char temp[]="--------------------HELLIOS TERRA----------------------"
 8000afa:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <main+0x78>)
 8000afc:	463b      	mov	r3, r7
 8000afe:	4611      	mov	r1, r2
 8000b00:	2270      	movs	r2, #112	; 0x70
 8000b02:	4618      	mov	r0, r3
 8000b04:	f00b f88a 	bl	800bc1c <memcpy>
		  "\r\n Welcome to UART Port 115200 8 bit/stop1 none parity\r\n";
  HAL_UART_Transmit(&huart3, (uint8_t*)temp, strlen(temp),30); // strlen = length of str -> config length of data
 8000b08:	463b      	mov	r3, r7
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fbf0 	bl	80002f0 <strlen>
 8000b10:	4603      	mov	r3, r0
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4639      	mov	r1, r7
 8000b16:	231e      	movs	r3, #30
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <main+0x7c>)
 8000b1a:	f008 fe3a 	bl	8009792 <HAL_UART_Transmit>
  SDCard_init();
 8000b1e:	f7ff fdf1 	bl	8000704 <SDCard_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() - timestamp_one >= 1000){
 8000b22:	f001 fa7d 	bl	8002020 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <main+0x80>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b32:	d3f6      	bcc.n	8000b22 <main+0x52>
		  timestamp_one = HAL_GetTick();
 8000b34:	f001 fa74 	bl	8002020 <HAL_GetTick>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <main+0x80>)
 8000b3c:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <main+0x84>)
 8000b42:	f003 fabc 	bl	80040be <HAL_GPIO_TogglePin>
	  if(HAL_GetTick() - timestamp_one >= 1000){
 8000b46:	e7ec      	b.n	8000b22 <main+0x52>
 8000b48:	0800c938 	.word	0x0800c938
 8000b4c:	24000194 	.word	0x24000194
 8000b50:	2400038c 	.word	0x2400038c
 8000b54:	58021000 	.word	0x58021000

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09c      	sub	sp, #112	; 0x70
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	224c      	movs	r2, #76	; 0x4c
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f00b f866 	bl	800bc38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2220      	movs	r2, #32
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f00b f860 	bl	800bc38 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <SystemClock_Config+0xe4>)
 8000b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b82:	2004      	movs	r0, #4
 8000b84:	f003 fab6 	bl	80040f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b88:	2300      	movs	r3, #0
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <SystemClock_Config+0xe8>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a2b      	ldr	r2, [pc, #172]	; (8000c40 <SystemClock_Config+0xe8>)
 8000b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <SystemClock_Config+0xe8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba4:	bf00      	nop
 8000ba6:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <SystemClock_Config+0xe8>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb2:	d1f8      	bne.n	8000ba6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bb4:	2321      	movs	r3, #33	; 0x21
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000bce:	2318      	movs	r3, #24
 8000bd0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bde:	230c      	movs	r3, #12
 8000be0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 fada 	bl	80041a8 <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bfa:	f000 fa79 	bl	80010f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	233f      	movs	r3, #63	; 0x3f
 8000c00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2303      	movs	r3, #3
 8000c04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2102      	movs	r1, #2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 fec4 	bl	80049b0 <HAL_RCC_ClockConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000c2e:	f000 fa5f 	bl	80010f0 <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3770      	adds	r7, #112	; 0x70
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58024800 	.word	0x58024800

08000c44 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_SDMMC1_SD_Init+0x34>)
 8000c4a:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <MX_SDMMC1_SD_Init+0x38>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <MX_SDMMC1_SD_Init+0x34>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_SDMMC1_SD_Init+0x34>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <MX_SDMMC1_SD_Init+0x34>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <MX_SDMMC1_SD_Init+0x34>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c66:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <MX_SDMMC1_SD_Init+0x34>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	24000090 	.word	0x24000090
 8000c7c:	52007000 	.word	0x52007000

08000c80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c84:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000c86:	4a28      	ldr	r2, [pc, #160]	; (8000d28 <MX_SPI1_Init+0xa8>)
 8000c88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c8a:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000c8c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000c9a:	2207      	movs	r2, #7
 8000c9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000caa:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000cac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000cb4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000cb8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000cd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cd8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_SPI1_Init+0xa4>)
 8000d12:	f007 fee5 	bl	8008ae0 <HAL_SPI_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000d1c:	f000 f9e8 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2400010c 	.word	0x2400010c
 8000d28:	40013000 	.word	0x40013000

08000d2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d32:	4a23      	ldr	r2, [pc, #140]	; (8000dc0 <MX_USART3_UART_Init+0x94>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d74:	4811      	ldr	r0, [pc, #68]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d76:	f008 fcbc 	bl	80096f2 <HAL_UART_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d80:	f000 f9b6 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d84:	2100      	movs	r1, #0
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d88:	f009 fdf4 	bl	800a974 <HAL_UARTEx_SetTxFifoThreshold>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d92:	f000 f9ad 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d96:	2100      	movs	r1, #0
 8000d98:	4808      	ldr	r0, [pc, #32]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d9a:	f009 fe29 	bl	800a9f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000da4:	f000 f9a4 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000daa:	f009 fdaa 	bl	800a902 <HAL_UARTEx_DisableFifoMode>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000db4:	f000 f99c 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	24000194 	.word	0x24000194
 8000dc0:	40004800 	.word	0x40004800

08000dc4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <MX_DMA_Init+0xb0>)
 8000ddc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000de0:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <MX_DMA_Init+0xb0>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <MX_DMA_Init+0xb0>)
 8000dec:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <MX_DMA_Init+0xb4>)
 8000dfa:	4a24      	ldr	r2, [pc, #144]	; (8000e8c <MX_DMA_Init+0xb8>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8000dfe:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_DMA_Init+0xb4>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e04:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <MX_DMA_Init+0xb4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_DMA_Init+0xb4>)
 8000e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e10:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_DMA_Init+0xb4>)
 8000e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e18:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <MX_DMA_Init+0xb4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_DMA_Init+0xb4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MX_DMA_Init+0xb4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <MX_DMA_Init+0xb4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_DMA_Init+0xb4>)
 8000e34:	2204      	movs	r2, #4
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_dma_generator0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_DMA_Init+0xb4>)
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_dma_generator0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_DMA_Init+0xb4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_dma_generator0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e44:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <MX_DMA_Init+0xb4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8000e4a:	480f      	ldr	r0, [pc, #60]	; (8000e88 <MX_DMA_Init+0xb4>)
 8000e4c:	f001 fa28 	bl	80022a0 <HAL_DMA_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_DMA_Init+0x86>
  {
    Error_Handler( );
 8000e56:	f000 f94b 	bl	80010f0 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	200c      	movs	r0, #12
 8000e60:	f001 f9e9 	bl	8002236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e64:	200c      	movs	r0, #12
 8000e66:	f001 fa00 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	200d      	movs	r0, #13
 8000e70:	f001 f9e1 	bl	8002236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e74:	200d      	movs	r0, #13
 8000e76:	f001 f9f8 	bl	800226a <HAL_NVIC_EnableIRQ>

}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	58024400 	.word	0x58024400
 8000e88:	24000314 	.word	0x24000314
 8000e8c:	40020010 	.word	0x40020010

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	; 0x38
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b8a      	ldr	r3, [pc, #552]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000ea8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eac:	4a88      	ldr	r2, [pc, #544]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eb6:	4b86      	ldr	r3, [pc, #536]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000eb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	623b      	str	r3, [r7, #32]
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec4:	4b82      	ldr	r3, [pc, #520]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000ec6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eca:	4a81      	ldr	r2, [pc, #516]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000ecc:	f043 0320 	orr.w	r3, r3, #32
 8000ed0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ed4:	4b7e      	ldr	r3, [pc, #504]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000ed6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eda:	f003 0320 	and.w	r3, r3, #32
 8000ede:	61fb      	str	r3, [r7, #28]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee2:	4b7b      	ldr	r3, [pc, #492]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000ee4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee8:	4a79      	ldr	r2, [pc, #484]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ef2:	4b77      	ldr	r3, [pc, #476]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000ef4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b73      	ldr	r3, [pc, #460]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f06:	4a72      	ldr	r2, [pc, #456]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f10:	4b6f      	ldr	r3, [pc, #444]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b6c      	ldr	r3, [pc, #432]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f24:	4a6a      	ldr	r2, [pc, #424]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f26:	f043 0302 	orr.w	r3, r3, #2
 8000f2a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f2e:	4b68      	ldr	r3, [pc, #416]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3c:	4b64      	ldr	r3, [pc, #400]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f42:	4a63      	ldr	r2, [pc, #396]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f4c:	4b60      	ldr	r3, [pc, #384]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f5a:	4b5d      	ldr	r3, [pc, #372]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f60:	4a5b      	ldr	r2, [pc, #364]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f66:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f6a:	4b59      	ldr	r3, [pc, #356]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f78:	4b55      	ldr	r3, [pc, #340]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f7e:	4a54      	ldr	r2, [pc, #336]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f80:	f043 0310 	orr.w	r3, r3, #16
 8000f84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f88:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <MX_GPIO_Init+0x240>)
 8000f8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9c:	484d      	ldr	r0, [pc, #308]	; (80010d4 <MX_GPIO_Init+0x244>)
 8000f9e:	f003 f875 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f244 0101 	movw	r1, #16385	; 0x4001
 8000fa8:	484b      	ldr	r0, [pc, #300]	; (80010d8 <MX_GPIO_Init+0x248>)
 8000faa:	f003 f86f 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SDCard_CS_GPIO_Port, SPI1_SDCard_CS_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fb4:	4849      	ldr	r0, [pc, #292]	; (80010dc <MX_GPIO_Init+0x24c>)
 8000fb6:	f003 f869 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	4848      	ldr	r0, [pc, #288]	; (80010e0 <MX_GPIO_Init+0x250>)
 8000fc0:	f003 f864 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4842      	ldr	r0, [pc, #264]	; (80010e4 <MX_GPIO_Init+0x254>)
 8000fda:	f002 fe8f 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4837      	ldr	r0, [pc, #220]	; (80010d4 <MX_GPIO_Init+0x244>)
 8000ff8:	f002 fe80 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ffc:	f244 0301 	movw	r3, #16385	; 0x4001
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4830      	ldr	r0, [pc, #192]	; (80010d8 <MX_GPIO_Init+0x248>)
 8001016:	f002 fe71 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SDCard_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_SDCard_CS_Pin;
 800101a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_SDCard_CS_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	482a      	ldr	r0, [pc, #168]	; (80010dc <MX_GPIO_Init+0x24c>)
 8001034:	f002 fe62 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800103c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	4619      	mov	r1, r3
 800104c:	4826      	ldr	r0, [pc, #152]	; (80010e8 <MX_GPIO_Init+0x258>)
 800104e:	f002 fe55 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001064:	4619      	mov	r1, r3
 8001066:	4821      	ldr	r0, [pc, #132]	; (80010ec <MX_GPIO_Init+0x25c>)
 8001068:	f002 fe48 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800106c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800107e:	230a      	movs	r3, #10
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	4818      	ldr	r0, [pc, #96]	; (80010ec <MX_GPIO_Init+0x25c>)
 800108a:	f002 fe37 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800108e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	4619      	mov	r1, r3
 80010a6:	4811      	ldr	r0, [pc, #68]	; (80010ec <MX_GPIO_Init+0x25c>)
 80010a8:	f002 fe28 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010ac:	2302      	movs	r3, #2
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4807      	ldr	r0, [pc, #28]	; (80010e0 <MX_GPIO_Init+0x250>)
 80010c4:	f002 fe1a 	bl	8003cfc <HAL_GPIO_Init>

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	58024400 	.word	0x58024400
 80010d4:	58021400 	.word	0x58021400
 80010d8:	58020400 	.word	0x58020400
 80010dc:	58020c00 	.word	0x58020c00
 80010e0:	58021000 	.word	0x58021000
 80010e4:	58020800 	.word	0x58020800
 80010e8:	58021800 	.word	0x58021800
 80010ec:	58020000 	.word	0x58020000

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>
	...

080010fc <SDCARD_Select>:
/* vim: set ai et ts=4 sw=4: */

#include "sdcard.h"

static void SDCARD_Select() {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001106:	4802      	ldr	r0, [pc, #8]	; (8001110 <SDCARD_Select+0x14>)
 8001108:	f002 ffc0 	bl	800408c <HAL_GPIO_WritePin>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	58020c00 	.word	0x58020c00

08001114 <SDCARD_Unselect>:

void SDCARD_Unselect() {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111e:	4802      	ldr	r0, [pc, #8]	; (8001128 <SDCARD_Unselect+0x14>)
 8001120:	f002 ffb4 	bl	800408c <HAL_GPIO_WritePin>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	58020c00 	.word	0x58020c00

0800112c <SDCARD_ReadR1>:
     ||`----- 5th bit (c): error in the sequence of erase commands
     |`------ 6th bit (b): misaligned addres used in command
     `------- 7th bit (a): command argument outside allowed range
             (8th bit is always zero)
*/
static uint8_t SDCARD_ReadR1() {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af02      	add	r7, sp, #8
    uint8_t r1;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8001132:	23ff      	movs	r3, #255	; 0xff
 8001134:	71bb      	strb	r3, [r7, #6]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 8001136:	1dfa      	adds	r2, r7, #7
 8001138:	1db9      	adds	r1, r7, #6
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	4807      	ldr	r0, [pc, #28]	; (8001160 <SDCARD_ReadR1+0x34>)
 8001144:	f007 ffc4 	bl	80090d0 <HAL_SPI_TransmitReceive>
        if((r1 & 0x80) == 0) // 8th bit alwyas zero, r1 recevied
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	b25b      	sxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	da00      	bge.n	8001152 <SDCARD_ReadR1+0x26>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 8001150:	e7f1      	b.n	8001136 <SDCARD_ReadR1+0xa>
            break;
 8001152:	bf00      	nop
    }
    return r1;
 8001154:	79fb      	ldrb	r3, [r7, #7]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2400010c 	.word	0x2400010c

08001164 <SDCARD_WaitDataToken>:
#define DATA_TOKEN_CMD17 0xFE
#define DATA_TOKEN_CMD18 0xFE
#define DATA_TOKEN_CMD24 0xFE
#define DATA_TOKEN_CMD25 0xFC

static int SDCARD_WaitDataToken(uint8_t token) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
    uint8_t fb;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 800116e:	23ff      	movs	r3, #255	; 0xff
 8001170:	73bb      	strb	r3, [r7, #14]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &fb, sizeof(fb), HAL_MAX_DELAY);
 8001172:	f107 020f 	add.w	r2, r7, #15
 8001176:	f107 010e 	add.w	r1, r7, #14
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	4809      	ldr	r0, [pc, #36]	; (80011a8 <SDCARD_WaitDataToken+0x44>)
 8001184:	f007 ffa4 	bl	80090d0 <HAL_SPI_TransmitReceive>
        if(fb == token)
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	429a      	cmp	r2, r3
 800118e:	d005      	beq.n	800119c <SDCARD_WaitDataToken+0x38>
            break;

        if(fb != 0xFF)
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2bff      	cmp	r3, #255	; 0xff
 8001194:	d0ed      	beq.n	8001172 <SDCARD_WaitDataToken+0xe>
            return -1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e001      	b.n	80011a0 <SDCARD_WaitDataToken+0x3c>
            break;
 800119c:	bf00      	nop
    }
    return 0;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2400010c 	.word	0x2400010c

080011ac <SDCARD_ReadBytes>:

static int SDCARD_ReadBytes(uint8_t* buff, size_t buff_size) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 80011b6:	23ff      	movs	r3, #255	; 0xff
 80011b8:	73fb      	strb	r3, [r7, #15]
    while(buff_size > 0) {
 80011ba:	e00f      	b.n	80011dc <SDCARD_ReadBytes+0x30>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, buff, 1, HAL_MAX_DELAY);
 80011bc:	f107 010f 	add.w	r1, r7, #15
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	4808      	ldr	r0, [pc, #32]	; (80011ec <SDCARD_ReadBytes+0x40>)
 80011cc:	f007 ff80 	bl	80090d0 <HAL_SPI_TransmitReceive>
        buff++;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3301      	adds	r3, #1
 80011d4:	607b      	str	r3, [r7, #4]
        buff_size--;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	3b01      	subs	r3, #1
 80011da:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1ec      	bne.n	80011bc <SDCARD_ReadBytes+0x10>
    }

    return 0;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2400010c 	.word	0x2400010c

080011f0 <SDCARD_WaitNotBusy>:

static int SDCARD_WaitNotBusy() {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
    uint8_t busy;
    do {
        if(SDCARD_ReadBytes(&busy, sizeof(busy)) < 0) {
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	2101      	movs	r1, #1
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ffd6 	bl	80011ac <SDCARD_ReadBytes>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	da02      	bge.n	800120c <SDCARD_WaitNotBusy+0x1c>
            return -1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	e003      	b.n	8001214 <SDCARD_WaitNotBusy+0x24>
        }
    } while(busy != 0xFF);
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2bff      	cmp	r3, #255	; 0xff
 8001210:	d1f1      	bne.n	80011f6 <SDCARD_WaitNotBusy+0x6>

    return 0;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <SDCARD_Init>:
 
int SDCARD_Init() {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0

    Set DI and CS high and apply 74 or more clock pulses to SCLK. Without this
    step under certain circumstances SD-card will not work. For instance, when
    multiple SPI devices are sharing the same bus (i.e. MISO, MOSI, CS).
    */
    SDCARD_Unselect();
 8001222:	f7ff ff77 	bl	8001114 <SDCARD_Unselect>

    uint8_t high = 0xFF;
 8001226:	23ff      	movs	r3, #255	; 0xff
 8001228:	72bb      	strb	r3, [r7, #10]
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	e00a      	b.n	8001246 <SDCARD_Init+0x2a>
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, &high, sizeof(high), HAL_MAX_DELAY);
 8001230:	f107 010a 	add.w	r1, r7, #10
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	2201      	movs	r2, #1
 800123a:	4868      	ldr	r0, [pc, #416]	; (80013dc <SDCARD_Init+0x1c0>)
 800123c:	f007 fd56 	bl	8008cec <HAL_SPI_Transmit>
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3301      	adds	r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b09      	cmp	r3, #9
 800124a:	ddf1      	ble.n	8001230 <SDCARD_Init+0x14>
    }

    SDCARD_Select();
 800124c:	f7ff ff56 	bl	80010fc <SDCARD_Select>
    /*
    Step 2.
    
    Send CMD0 (GO_IDLE_STATE): Reset the SD card.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001250:	f7ff ffce 	bl	80011f0 <SDCARD_WaitNotBusy>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	da04      	bge.n	8001264 <SDCARD_Init+0x48>
        SDCARD_Unselect();
 800125a:	f7ff ff5b 	bl	8001114 <SDCARD_Unselect>
        return -1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	e0b6      	b.n	80013d2 <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x00 /* CMD0 */, 0x00, 0x00, 0x00, 0x00 /* ARG = 0 */, (0x4A << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	2206      	movs	r2, #6
 800126a:	495d      	ldr	r1, [pc, #372]	; (80013e0 <SDCARD_Init+0x1c4>)
 800126c:	485b      	ldr	r0, [pc, #364]	; (80013dc <SDCARD_Init+0x1c0>)
 800126e:	f007 fd3d 	bl	8008cec <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 8001272:	f7ff ff5b 	bl	800112c <SDCARD_ReadR1>
 8001276:	4603      	mov	r3, r0
 8001278:	2b01      	cmp	r3, #1
 800127a:	d004      	beq.n	8001286 <SDCARD_Init+0x6a>
        SDCARD_Unselect();
 800127c:	f7ff ff4a 	bl	8001114 <SDCARD_Unselect>
        return -1;
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	e0a5      	b.n	80013d2 <SDCARD_Init+0x1b6>
    MMC version 3. If accepted, R7 response (R1(0x01) + 32-bit return value)
    will be returned. The lower 12 bits in the return value 0x1AA means that
    the card is SDC version 2 and it can work at voltage range of 2.7 to 3.6
    volts. If not the case, the card should be rejected.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001286:	f7ff ffb3 	bl	80011f0 <SDCARD_WaitNotBusy>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	da04      	bge.n	800129a <SDCARD_Init+0x7e>
        SDCARD_Unselect();
 8001290:	f7ff ff40 	bl	8001114 <SDCARD_Unselect>
        return -1;
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	e09b      	b.n	80013d2 <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x08 /* CMD8 */, 0x00, 0x00, 0x01, 0xAA /* ARG */, (0x43 << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	2206      	movs	r2, #6
 80012a0:	4950      	ldr	r1, [pc, #320]	; (80013e4 <SDCARD_Init+0x1c8>)
 80012a2:	484e      	ldr	r0, [pc, #312]	; (80013dc <SDCARD_Init+0x1c0>)
 80012a4:	f007 fd22 	bl	8008cec <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 80012a8:	f7ff ff40 	bl	800112c <SDCARD_ReadR1>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d004      	beq.n	80012bc <SDCARD_Init+0xa0>
        SDCARD_Unselect();
 80012b2:	f7ff ff2f 	bl	8001114 <SDCARD_Unselect>
        return -2; // not an SDHC/SDXC card (i.e. SDSC, not supported)
 80012b6:	f06f 0301 	mvn.w	r3, #1
 80012ba:	e08a      	b.n	80013d2 <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2104      	movs	r1, #4
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff73 	bl	80011ac <SDCARD_ReadBytes>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da04      	bge.n	80012d6 <SDCARD_Init+0xba>
            SDCARD_Unselect();
 80012cc:	f7ff ff22 	bl	8001114 <SDCARD_Unselect>
            return -3;
 80012d0:	f06f 0302 	mvn.w	r3, #2
 80012d4:	e07d      	b.n	80013d2 <SDCARD_Init+0x1b6>
        }

        if(((resp[2] & 0x01) != 1) || (resp[3] != 0xAA)) {
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <SDCARD_Init+0xca>
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2baa      	cmp	r3, #170	; 0xaa
 80012e4:	d004      	beq.n	80012f0 <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 80012e6:	f7ff ff15 	bl	8001114 <SDCARD_Unselect>
            return -4;
 80012ea:	f06f 0303 	mvn.w	r3, #3
 80012ee:	e070      	b.n	80013d2 <SDCARD_Init+0x1b6>
    Step 4.

    And then initiate initialization with ACMD41 with HCS flag (bit 30).
    */
    for(;;) {
        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80012f0:	f7ff ff7e 	bl	80011f0 <SDCARD_WaitNotBusy>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	da04      	bge.n	8001304 <SDCARD_Init+0xe8>
            SDCARD_Unselect();
 80012fa:	f7ff ff0b 	bl	8001114 <SDCARD_Unselect>
            return -1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	e066      	b.n	80013d2 <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x37 /* CMD55 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
 8001308:	2206      	movs	r2, #6
 800130a:	4937      	ldr	r1, [pc, #220]	; (80013e8 <SDCARD_Init+0x1cc>)
 800130c:	4833      	ldr	r0, [pc, #204]	; (80013dc <SDCARD_Init+0x1c0>)
 800130e:	f007 fced 	bl	8008cec <HAL_SPI_Transmit>
        }

        if(SDCARD_ReadR1() != 0x01) {
 8001312:	f7ff ff0b 	bl	800112c <SDCARD_ReadR1>
 8001316:	4603      	mov	r3, r0
 8001318:	2b01      	cmp	r3, #1
 800131a:	d004      	beq.n	8001326 <SDCARD_Init+0x10a>
            SDCARD_Unselect();
 800131c:	f7ff fefa 	bl	8001114 <SDCARD_Unselect>
            return -5;
 8001320:	f06f 0304 	mvn.w	r3, #4
 8001324:	e055      	b.n	80013d2 <SDCARD_Init+0x1b6>
        }

        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001326:	f7ff ff63 	bl	80011f0 <SDCARD_WaitNotBusy>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	da04      	bge.n	800133a <SDCARD_Init+0x11e>
            SDCARD_Unselect();
 8001330:	f7ff fef0 	bl	8001114 <SDCARD_Unselect>
            return -1;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	e04b      	b.n	80013d2 <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x29 /* ACMD41 */, 0x40, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	2206      	movs	r2, #6
 8001340:	492a      	ldr	r1, [pc, #168]	; (80013ec <SDCARD_Init+0x1d0>)
 8001342:	4826      	ldr	r0, [pc, #152]	; (80013dc <SDCARD_Init+0x1c0>)
 8001344:	f007 fcd2 	bl	8008cec <HAL_SPI_Transmit>
        }

        uint8_t r1 = SDCARD_ReadR1();
 8001348:	f7ff fef0 	bl	800112c <SDCARD_ReadR1>
 800134c:	4603      	mov	r3, r0
 800134e:	72fb      	strb	r3, [r7, #11]
        if(r1 == 0x00) {
 8001350:	7afb      	ldrb	r3, [r7, #11]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d007      	beq.n	8001366 <SDCARD_Init+0x14a>
            break;
        }

        if(r1 != 0x01) {
 8001356:	7afb      	ldrb	r3, [r7, #11]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d0c9      	beq.n	80012f0 <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 800135c:	f7ff feda 	bl	8001114 <SDCARD_Unselect>
            return -6;
 8001360:	f06f 0305 	mvn.w	r3, #5
 8001364:	e035      	b.n	80013d2 <SDCARD_Init+0x1b6>
            break;
 8001366:	bf00      	nop

    After the initialization completed, read OCR register with CMD58 and check
    CCS flag (bit 30). When it is set, the card is a high-capacity card known
    as SDHC/SDXC.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001368:	f7ff ff42 	bl	80011f0 <SDCARD_WaitNotBusy>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	da04      	bge.n	800137c <SDCARD_Init+0x160>
        SDCARD_Unselect();
 8001372:	f7ff fecf 	bl	8001114 <SDCARD_Unselect>
        return -1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e02a      	b.n	80013d2 <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x3A /* CMD58 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	2206      	movs	r2, #6
 8001382:	491b      	ldr	r1, [pc, #108]	; (80013f0 <SDCARD_Init+0x1d4>)
 8001384:	4815      	ldr	r0, [pc, #84]	; (80013dc <SDCARD_Init+0x1c0>)
 8001386:	f007 fcb1 	bl	8008cec <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 800138a:	f7ff fecf 	bl	800112c <SDCARD_ReadR1>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <SDCARD_Init+0x182>
        SDCARD_Unselect();
 8001394:	f7ff febe 	bl	8001114 <SDCARD_Unselect>
        return -7;
 8001398:	f06f 0306 	mvn.w	r3, #6
 800139c:	e019      	b.n	80013d2 <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 800139e:	463b      	mov	r3, r7
 80013a0:	2104      	movs	r1, #4
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff02 	bl	80011ac <SDCARD_ReadBytes>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	da04      	bge.n	80013b8 <SDCARD_Init+0x19c>
            SDCARD_Unselect();
 80013ae:	f7ff feb1 	bl	8001114 <SDCARD_Unselect>
            return -8;
 80013b2:	f06f 0307 	mvn.w	r3, #7
 80013b6:	e00c      	b.n	80013d2 <SDCARD_Init+0x1b6>
        }

        if((resp[0] & 0xC0) != 0xC0) {
 80013b8:	783b      	ldrb	r3, [r7, #0]
 80013ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80013be:	2bc0      	cmp	r3, #192	; 0xc0
 80013c0:	d004      	beq.n	80013cc <SDCARD_Init+0x1b0>
            SDCARD_Unselect();
 80013c2:	f7ff fea7 	bl	8001114 <SDCARD_Unselect>
            return -9;
 80013c6:	f06f 0308 	mvn.w	r3, #8
 80013ca:	e002      	b.n	80013d2 <SDCARD_Init+0x1b6>
        }
    }

    SDCARD_Unselect();
 80013cc:	f7ff fea2 	bl	8001114 <SDCARD_Unselect>
    return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2400010c 	.word	0x2400010c
 80013e0:	0800c9a8 	.word	0x0800c9a8
 80013e4:	0800c9b0 	.word	0x0800c9b0
 80013e8:	0800c9b8 	.word	0x0800c9b8
 80013ec:	0800c9c0 	.word	0x0800c9c0
 80013f0:	0800c9c8 	.word	0x0800c9c8

080013f4 <SDCARD_GetBlocksNumber>:


int SDCARD_GetBlocksNumber(uint32_t* num) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    uint8_t csd[16];
    uint8_t crc[2];

    SDCARD_Select();
 80013fc:	f7ff fe7e 	bl	80010fc <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001400:	f7ff fef6 	bl	80011f0 <SDCARD_WaitNotBusy>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	da04      	bge.n	8001414 <SDCARD_GetBlocksNumber+0x20>
        SDCARD_Unselect();
 800140a:	f7ff fe83 	bl	8001114 <SDCARD_Unselect>
        return -1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	e057      	b.n	80014c4 <SDCARD_GetBlocksNumber+0xd0>

    /* CMD9 (SEND_CSD) command */
    {
        static const uint8_t cmd[] =
            { 0x40 | 0x09 /* CMD9 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	2206      	movs	r2, #6
 800141a:	492c      	ldr	r1, [pc, #176]	; (80014cc <SDCARD_GetBlocksNumber+0xd8>)
 800141c:	482c      	ldr	r0, [pc, #176]	; (80014d0 <SDCARD_GetBlocksNumber+0xdc>)
 800141e:	f007 fc65 	bl	8008cec <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 8001422:	f7ff fe83 	bl	800112c <SDCARD_ReadR1>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <SDCARD_GetBlocksNumber+0x42>
        SDCARD_Unselect();
 800142c:	f7ff fe72 	bl	8001114 <SDCARD_Unselect>
        return -2;
 8001430:	f06f 0301 	mvn.w	r3, #1
 8001434:	e046      	b.n	80014c4 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD9) < 0) {
 8001436:	20fe      	movs	r0, #254	; 0xfe
 8001438:	f7ff fe94 	bl	8001164 <SDCARD_WaitDataToken>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	da04      	bge.n	800144c <SDCARD_GetBlocksNumber+0x58>
        SDCARD_Unselect();
 8001442:	f7ff fe67 	bl	8001114 <SDCARD_Unselect>
        return -3;
 8001446:	f06f 0302 	mvn.w	r3, #2
 800144a:	e03b      	b.n	80014c4 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_ReadBytes(csd, sizeof(csd)) < 0) {
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	2110      	movs	r1, #16
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff feaa 	bl	80011ac <SDCARD_ReadBytes>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	da04      	bge.n	8001468 <SDCARD_GetBlocksNumber+0x74>
        SDCARD_Unselect();
 800145e:	f7ff fe59 	bl	8001114 <SDCARD_Unselect>
        return -4;
 8001462:	f06f 0303 	mvn.w	r3, #3
 8001466:	e02d      	b.n	80014c4 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_ReadBytes(crc, sizeof(crc)) < 0) {
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	2102      	movs	r1, #2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fe9c 	bl	80011ac <SDCARD_ReadBytes>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	da04      	bge.n	8001484 <SDCARD_GetBlocksNumber+0x90>
        SDCARD_Unselect();
 800147a:	f7ff fe4b 	bl	8001114 <SDCARD_Unselect>
        return -5;
 800147e:	f06f 0304 	mvn.w	r3, #4
 8001482:	e01f      	b.n	80014c4 <SDCARD_GetBlocksNumber+0xd0>
    }

    SDCARD_Unselect();
 8001484:	f7ff fe46 	bl	8001114 <SDCARD_Unselect>

    // first byte is VVxxxxxxxx where VV is csd.version
    if((csd[0] & 0xC0) != 0x40) // csd.version != 1
 8001488:	7b3b      	ldrb	r3, [r7, #12]
 800148a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800148e:	2b40      	cmp	r3, #64	; 0x40
 8001490:	d002      	beq.n	8001498 <SDCARD_GetBlocksNumber+0xa4>
        return -6;
 8001492:	f06f 0305 	mvn.w	r3, #5
 8001496:	e015      	b.n	80014c4 <SDCARD_GetBlocksNumber+0xd0>

    uint32_t tmp = csd[7] & 0x3F; // two bits are reserved
 8001498:	7cfb      	ldrb	r3, [r7, #19]
 800149a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800149e:	61fb      	str	r3, [r7, #28]
    tmp = (tmp << 8) | csd[8];
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	7d3a      	ldrb	r2, [r7, #20]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61fb      	str	r3, [r7, #28]
    tmp = (tmp << 8) | csd[9];
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	7d7a      	ldrb	r2, [r7, #21]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61fb      	str	r3, [r7, #28]
    // Full volume: (C_SIZE+1)*512KByte == (C_SIZE+1)<<19
    // Block size: 512Byte == 1<<9
    // Blocks number: CARD_SIZE/BLOCK_SIZE = (C_SIZE+1)*(1<<19) / (1<<9) = (C_SIZE+1)*(1<<10)
    tmp = (tmp + 1) << 10;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	3301      	adds	r3, #1
 80014b8:	029b      	lsls	r3, r3, #10
 80014ba:	61fb      	str	r3, [r7, #28]
    *num = tmp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	601a      	str	r2, [r3, #0]

    return 0;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	0800c9d0 	.word	0x0800c9d0
 80014d0:	2400010c 	.word	0x2400010c

080014d4 <SDCARD_ReadSingleBlock>:

int SDCARD_ReadSingleBlock(uint32_t blockNum, uint8_t* buff) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    uint8_t crc[2];

    SDCARD_Select();
 80014de:	f7ff fe0d 	bl	80010fc <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80014e2:	f7ff fe85 	bl	80011f0 <SDCARD_WaitNotBusy>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	da04      	bge.n	80014f6 <SDCARD_ReadSingleBlock+0x22>
        SDCARD_Unselect();
 80014ec:	f7ff fe12 	bl	8001114 <SDCARD_Unselect>
        return -1;
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	e04d      	b.n	8001592 <SDCARD_ReadSingleBlock+0xbe>
    }

    /* CMD17 (SEND_SINGLE_BLOCK) command */
    uint8_t cmd[] = {
 80014f6:	2351      	movs	r3, #81	; 0x51
 80014f8:	733b      	strb	r3, [r7, #12]
        0x40 | 0x11 /* CMD17 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	737b      	strb	r3, [r7, #13]
        (blockNum >> 16) & 0xFF,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 8001506:	b2db      	uxtb	r3, r3
 8001508:	73bb      	strb	r3, [r7, #14]
        (blockNum >> 8) & 0xFF,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 800150e:	b2db      	uxtb	r3, r3
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	743b      	strb	r3, [r7, #16]
 8001518:	23ff      	movs	r3, #255	; 0xff
 800151a:	747b      	strb	r3, [r7, #17]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 800151c:	f107 010c 	add.w	r1, r7, #12
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	2206      	movs	r2, #6
 8001526:	481d      	ldr	r0, [pc, #116]	; (800159c <SDCARD_ReadSingleBlock+0xc8>)
 8001528:	f007 fbe0 	bl	8008cec <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 800152c:	f7ff fdfe 	bl	800112c <SDCARD_ReadR1>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <SDCARD_ReadSingleBlock+0x6c>
        SDCARD_Unselect();
 8001536:	f7ff fded 	bl	8001114 <SDCARD_Unselect>
        return -2;
 800153a:	f06f 0301 	mvn.w	r3, #1
 800153e:	e028      	b.n	8001592 <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD17) < 0) {
 8001540:	20fe      	movs	r0, #254	; 0xfe
 8001542:	f7ff fe0f 	bl	8001164 <SDCARD_WaitDataToken>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	da04      	bge.n	8001556 <SDCARD_ReadSingleBlock+0x82>
        SDCARD_Unselect();
 800154c:	f7ff fde2 	bl	8001114 <SDCARD_Unselect>
        return -3;
 8001550:	f06f 0302 	mvn.w	r3, #2
 8001554:	e01d      	b.n	8001592 <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_ReadBytes(buff, 512) < 0) {
 8001556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155a:	6838      	ldr	r0, [r7, #0]
 800155c:	f7ff fe26 	bl	80011ac <SDCARD_ReadBytes>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	da04      	bge.n	8001570 <SDCARD_ReadSingleBlock+0x9c>
        SDCARD_Unselect();
 8001566:	f7ff fdd5 	bl	8001114 <SDCARD_Unselect>
        return -4;
 800156a:	f06f 0303 	mvn.w	r3, #3
 800156e:	e010      	b.n	8001592 <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_ReadBytes(crc, 2) < 0) {
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2102      	movs	r1, #2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fe18 	bl	80011ac <SDCARD_ReadBytes>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	da04      	bge.n	800158c <SDCARD_ReadSingleBlock+0xb8>
        SDCARD_Unselect();
 8001582:	f7ff fdc7 	bl	8001114 <SDCARD_Unselect>
        return -5;
 8001586:	f06f 0304 	mvn.w	r3, #4
 800158a:	e002      	b.n	8001592 <SDCARD_ReadSingleBlock+0xbe>
    }

    SDCARD_Unselect();
 800158c:	f7ff fdc2 	bl	8001114 <SDCARD_Unselect>
    return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2400010c 	.word	0x2400010c

080015a0 <SDCARD_WriteSingleBlock>:


int SDCARD_WriteSingleBlock(uint32_t blockNum, const uint8_t* buff) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    SDCARD_Select();
 80015aa:	f7ff fda7 	bl	80010fc <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80015ae:	f7ff fe1f 	bl	80011f0 <SDCARD_WaitNotBusy>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da04      	bge.n	80015c2 <SDCARD_WriteSingleBlock+0x22>
        SDCARD_Unselect();
 80015b8:	f7ff fdac 	bl	8001114 <SDCARD_Unselect>
        return -1;
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
 80015c0:	e05e      	b.n	8001680 <SDCARD_WriteSingleBlock+0xe0>
    }

    /* CMD24 (WRITE_BLOCK) command */
    uint8_t cmd[] = {
 80015c2:	2358      	movs	r3, #88	; 0x58
 80015c4:	743b      	strb	r3, [r7, #16]
        0x40 | 0x18 /* CMD24 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	747b      	strb	r3, [r7, #17]
        (blockNum >> 16) & 0xFF,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	74bb      	strb	r3, [r7, #18]
        (blockNum >> 8) & 0xFF,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	74fb      	strb	r3, [r7, #19]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	753b      	strb	r3, [r7, #20]
 80015e4:	23ff      	movs	r3, #255	; 0xff
 80015e6:	757b      	strb	r3, [r7, #21]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80015e8:	f107 0110 	add.w	r1, r7, #16
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	2206      	movs	r2, #6
 80015f2:	4825      	ldr	r0, [pc, #148]	; (8001688 <SDCARD_WriteSingleBlock+0xe8>)
 80015f4:	f007 fb7a 	bl	8008cec <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 80015f8:	f7ff fd98 	bl	800112c <SDCARD_ReadR1>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <SDCARD_WriteSingleBlock+0x6c>
        SDCARD_Unselect();
 8001602:	f7ff fd87 	bl	8001114 <SDCARD_Unselect>
        return -2;
 8001606:	f06f 0301 	mvn.w	r3, #1
 800160a:	e039      	b.n	8001680 <SDCARD_WriteSingleBlock+0xe0>
    }

    uint8_t dataToken = DATA_TOKEN_CMD24;
 800160c:	23fe      	movs	r3, #254	; 0xfe
 800160e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc[2] = { 0xFF, 0xFF };
 8001610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001614:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 8001616:	f107 010f 	add.w	r1, r7, #15
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	2201      	movs	r2, #1
 8001620:	4819      	ldr	r0, [pc, #100]	; (8001688 <SDCARD_WriteSingleBlock+0xe8>)
 8001622:	f007 fb63 	bl	8008cec <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162e:	6839      	ldr	r1, [r7, #0]
 8001630:	4815      	ldr	r0, [pc, #84]	; (8001688 <SDCARD_WriteSingleBlock+0xe8>)
 8001632:	f007 fb5b 	bl	8008cec <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 8001636:	f107 010c 	add.w	r1, r7, #12
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	2202      	movs	r2, #2
 8001640:	4811      	ldr	r0, [pc, #68]	; (8001688 <SDCARD_WriteSingleBlock+0xe8>)
 8001642:	f007 fb53 	bl	8008cec <HAL_SPI_Transmit>
            010 - Data accepted
            101 - Data rejected due to CRC error
            110 - Data rejected due to write error
    */
    uint8_t dataResp;
    SDCARD_ReadBytes(&dataResp, sizeof(dataResp));
 8001646:	f107 030b 	add.w	r3, r7, #11
 800164a:	2101      	movs	r1, #1
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fdad 	bl	80011ac <SDCARD_ReadBytes>
    if((dataResp & 0x1F) != 0x05) { // data rejected
 8001652:	7afb      	ldrb	r3, [r7, #11]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	2b05      	cmp	r3, #5
 800165a:	d004      	beq.n	8001666 <SDCARD_WriteSingleBlock+0xc6>
        SDCARD_Unselect();
 800165c:	f7ff fd5a 	bl	8001114 <SDCARD_Unselect>
        return -3;
 8001660:	f06f 0302 	mvn.w	r3, #2
 8001664:	e00c      	b.n	8001680 <SDCARD_WriteSingleBlock+0xe0>
    }

    if(SDCARD_WaitNotBusy() < 0) {
 8001666:	f7ff fdc3 	bl	80011f0 <SDCARD_WaitNotBusy>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	da04      	bge.n	800167a <SDCARD_WriteSingleBlock+0xda>
        SDCARD_Unselect();
 8001670:	f7ff fd50 	bl	8001114 <SDCARD_Unselect>
        return -4;
 8001674:	f06f 0303 	mvn.w	r3, #3
 8001678:	e002      	b.n	8001680 <SDCARD_WriteSingleBlock+0xe0>
    }

    SDCARD_Unselect();
 800167a:	f7ff fd4b 	bl	8001114 <SDCARD_Unselect>
    return 0;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2400010c 	.word	0x2400010c

0800168c <SDCARD_ReadBegin>:

int SDCARD_ReadBegin(uint32_t blockNum) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
    SDCARD_Select();
 8001694:	f7ff fd32 	bl	80010fc <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001698:	f7ff fdaa 	bl	80011f0 <SDCARD_WaitNotBusy>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	da04      	bge.n	80016ac <SDCARD_ReadBegin+0x20>
        SDCARD_Unselect();
 80016a2:	f7ff fd37 	bl	8001114 <SDCARD_Unselect>
        return -1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e027      	b.n	80016fc <SDCARD_ReadBegin+0x70>
    }

    /* CMD18 (READ_MULTIPLE_BLOCK) command */
    uint8_t cmd[] = {
 80016ac:	2352      	movs	r3, #82	; 0x52
 80016ae:	723b      	strb	r3, [r7, #8]
        0x40 | 0x12 /* CMD18 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	727b      	strb	r3, [r7, #9]
        (blockNum >> 16) & 0xFF,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	72bb      	strb	r3, [r7, #10]
        (blockNum >> 8) & 0xFF,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	72fb      	strb	r3, [r7, #11]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	733b      	strb	r3, [r7, #12]
 80016ce:	23ff      	movs	r3, #255	; 0xff
 80016d0:	737b      	strb	r3, [r7, #13]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80016d2:	f107 0108 	add.w	r1, r7, #8
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	2206      	movs	r2, #6
 80016dc:	4809      	ldr	r0, [pc, #36]	; (8001704 <SDCARD_ReadBegin+0x78>)
 80016de:	f007 fb05 	bl	8008cec <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 80016e2:	f7ff fd23 	bl	800112c <SDCARD_ReadR1>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d004      	beq.n	80016f6 <SDCARD_ReadBegin+0x6a>
        SDCARD_Unselect();
 80016ec:	f7ff fd12 	bl	8001114 <SDCARD_Unselect>
        return -2;
 80016f0:	f06f 0301 	mvn.w	r3, #1
 80016f4:	e002      	b.n	80016fc <SDCARD_ReadBegin+0x70>
    }

    SDCARD_Unselect();
 80016f6:	f7ff fd0d 	bl	8001114 <SDCARD_Unselect>
    return 0;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2400010c 	.word	0x2400010c

08001708 <SDCARD_ReadData>:

int SDCARD_ReadData(uint8_t* buff) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    uint8_t crc[2];
    SDCARD_Select();
 8001710:	f7ff fcf4 	bl	80010fc <SDCARD_Select>

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD18) < 0) {
 8001714:	20fe      	movs	r0, #254	; 0xfe
 8001716:	f7ff fd25 	bl	8001164 <SDCARD_WaitDataToken>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	da04      	bge.n	800172a <SDCARD_ReadData+0x22>
        SDCARD_Unselect();
 8001720:	f7ff fcf8 	bl	8001114 <SDCARD_Unselect>
        return -1;
 8001724:	f04f 33ff 	mov.w	r3, #4294967295
 8001728:	e01d      	b.n	8001766 <SDCARD_ReadData+0x5e>
    }

    if(SDCARD_ReadBytes(buff, 512) < 0) {
 800172a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fd3c 	bl	80011ac <SDCARD_ReadBytes>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	da04      	bge.n	8001744 <SDCARD_ReadData+0x3c>
        SDCARD_Unselect();
 800173a:	f7ff fceb 	bl	8001114 <SDCARD_Unselect>
        return -2;
 800173e:	f06f 0301 	mvn.w	r3, #1
 8001742:	e010      	b.n	8001766 <SDCARD_ReadData+0x5e>
    }

    if(SDCARD_ReadBytes(crc, 2) < 0) {
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	2102      	movs	r1, #2
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fd2e 	bl	80011ac <SDCARD_ReadBytes>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	da04      	bge.n	8001760 <SDCARD_ReadData+0x58>
        SDCARD_Unselect();
 8001756:	f7ff fcdd 	bl	8001114 <SDCARD_Unselect>
        return -3;
 800175a:	f06f 0302 	mvn.w	r3, #2
 800175e:	e002      	b.n	8001766 <SDCARD_ReadData+0x5e>
    }

    SDCARD_Unselect();
 8001760:	f7ff fcd8 	bl	8001114 <SDCARD_Unselect>
    return 0;
 8001764:	2300      	movs	r3, #0

}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <SDCARD_ReadEnd>:

int SDCARD_ReadEnd() {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
    SDCARD_Select();
 8001776:	f7ff fcc1 	bl	80010fc <SDCARD_Select>

    /* CMD12 (STOP_TRANSMISSION) */
    {
        static const uint8_t cmd[] = { 0x40 | 0x0C /* CMD12 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	2206      	movs	r2, #6
 8001780:	4910      	ldr	r1, [pc, #64]	; (80017c4 <SDCARD_ReadEnd+0x54>)
 8001782:	4811      	ldr	r0, [pc, #68]	; (80017c8 <SDCARD_ReadEnd+0x58>)
 8001784:	f007 fab2 	bl	8008cec <HAL_SPI_Transmit>
    /*
    The received byte immediataly following CMD12 is a stuff byte, it should be
    discarded before receive the response of the CMD12
    */
    uint8_t stuffByte;
    if(SDCARD_ReadBytes(&stuffByte, sizeof(stuffByte)) < 0) {
 8001788:	1dfb      	adds	r3, r7, #7
 800178a:	2101      	movs	r1, #1
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fd0d 	bl	80011ac <SDCARD_ReadBytes>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	da04      	bge.n	80017a2 <SDCARD_ReadEnd+0x32>
        SDCARD_Unselect();
 8001798:	f7ff fcbc 	bl	8001114 <SDCARD_Unselect>
        return -1;
 800179c:	f04f 33ff 	mov.w	r3, #4294967295
 80017a0:	e00c      	b.n	80017bc <SDCARD_ReadEnd+0x4c>
    }

    if(SDCARD_ReadR1() != 0x00) {
 80017a2:	f7ff fcc3 	bl	800112c <SDCARD_ReadR1>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <SDCARD_ReadEnd+0x46>
        SDCARD_Unselect();
 80017ac:	f7ff fcb2 	bl	8001114 <SDCARD_Unselect>
        return -2;
 80017b0:	f06f 0301 	mvn.w	r3, #1
 80017b4:	e002      	b.n	80017bc <SDCARD_ReadEnd+0x4c>
    }
    
    SDCARD_Unselect();
 80017b6:	f7ff fcad 	bl	8001114 <SDCARD_Unselect>
    return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	0800c9d8 	.word	0x0800c9d8
 80017c8:	2400010c 	.word	0x2400010c

080017cc <SDCARD_WriteBegin>:


int SDCARD_WriteBegin(uint32_t blockNum) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
    SDCARD_Select();
 80017d4:	f7ff fc92 	bl	80010fc <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80017d8:	f7ff fd0a 	bl	80011f0 <SDCARD_WaitNotBusy>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da04      	bge.n	80017ec <SDCARD_WriteBegin+0x20>
        SDCARD_Unselect();
 80017e2:	f7ff fc97 	bl	8001114 <SDCARD_Unselect>
        return -1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e027      	b.n	800183c <SDCARD_WriteBegin+0x70>
    }

    /* CMD25 (WRITE_MULTIPLE_BLOCK) command */
    uint8_t cmd[] = {
 80017ec:	2359      	movs	r3, #89	; 0x59
 80017ee:	723b      	strb	r3, [r7, #8]
        0x40 | 0x19 /* CMD25 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	727b      	strb	r3, [r7, #9]
        (blockNum >> 16) & 0xFF,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	72bb      	strb	r3, [r7, #10]
        (blockNum >> 8) & 0xFF,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 8001804:	b2db      	uxtb	r3, r3
 8001806:	72fb      	strb	r3, [r7, #11]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	733b      	strb	r3, [r7, #12]
 800180e:	23ff      	movs	r3, #255	; 0xff
 8001810:	737b      	strb	r3, [r7, #13]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001812:	f107 0108 	add.w	r1, r7, #8
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	2206      	movs	r2, #6
 800181c:	4809      	ldr	r0, [pc, #36]	; (8001844 <SDCARD_WriteBegin+0x78>)
 800181e:	f007 fa65 	bl	8008cec <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8001822:	f7ff fc83 	bl	800112c <SDCARD_ReadR1>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <SDCARD_WriteBegin+0x6a>
        SDCARD_Unselect();
 800182c:	f7ff fc72 	bl	8001114 <SDCARD_Unselect>
        return -2;
 8001830:	f06f 0301 	mvn.w	r3, #1
 8001834:	e002      	b.n	800183c <SDCARD_WriteBegin+0x70>
    }

    SDCARD_Unselect();
 8001836:	f7ff fc6d 	bl	8001114 <SDCARD_Unselect>
    return 0;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2400010c 	.word	0x2400010c

08001848 <SDCARD_WriteData>:

int SDCARD_WriteData(const uint8_t* buff) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
    SDCARD_Select();
 8001850:	f7ff fc54 	bl	80010fc <SDCARD_Select>

    uint8_t dataToken = DATA_TOKEN_CMD25;
 8001854:	23fc      	movs	r3, #252	; 0xfc
 8001856:	73fb      	strb	r3, [r7, #15]
    uint8_t crc[2] = { 0xFF, 0xFF };
 8001858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800185c:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 800185e:	f107 010f 	add.w	r1, r7, #15
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	2201      	movs	r2, #1
 8001868:	4819      	ldr	r0, [pc, #100]	; (80018d0 <SDCARD_WriteData+0x88>)
 800186a:	f007 fa3f 	bl	8008cec <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4815      	ldr	r0, [pc, #84]	; (80018d0 <SDCARD_WriteData+0x88>)
 800187a:	f007 fa37 	bl	8008cec <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 800187e:	f107 010c 	add.w	r1, r7, #12
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	2202      	movs	r2, #2
 8001888:	4811      	ldr	r0, [pc, #68]	; (80018d0 <SDCARD_WriteData+0x88>)
 800188a:	f007 fa2f 	bl	8008cec <HAL_SPI_Transmit>
            010 - Data accepted
            101 - Data rejected due to CRC error
            110 - Data rejected due to write error
    */
    uint8_t dataResp;
    SDCARD_ReadBytes(&dataResp, sizeof(dataResp));
 800188e:	f107 030b 	add.w	r3, r7, #11
 8001892:	2101      	movs	r1, #1
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fc89 	bl	80011ac <SDCARD_ReadBytes>
    if((dataResp & 0x1F) != 0x05) { // data rejected
 800189a:	7afb      	ldrb	r3, [r7, #11]
 800189c:	f003 031f 	and.w	r3, r3, #31
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d004      	beq.n	80018ae <SDCARD_WriteData+0x66>
        SDCARD_Unselect();
 80018a4:	f7ff fc36 	bl	8001114 <SDCARD_Unselect>
        return -1;
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ac:	e00c      	b.n	80018c8 <SDCARD_WriteData+0x80>
    }

    if(SDCARD_WaitNotBusy() < 0) {
 80018ae:	f7ff fc9f 	bl	80011f0 <SDCARD_WaitNotBusy>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	da04      	bge.n	80018c2 <SDCARD_WriteData+0x7a>
        SDCARD_Unselect();
 80018b8:	f7ff fc2c 	bl	8001114 <SDCARD_Unselect>
        return -2;
 80018bc:	f06f 0301 	mvn.w	r3, #1
 80018c0:	e002      	b.n	80018c8 <SDCARD_WriteData+0x80>
    }

    SDCARD_Unselect();
 80018c2:	f7ff fc27 	bl	8001114 <SDCARD_Unselect>
    return 0;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	2400010c 	.word	0x2400010c

080018d4 <SDCARD_WriteEnd>:

int SDCARD_WriteEnd() {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
    SDCARD_Select();
 80018da:	f7ff fc0f 	bl	80010fc <SDCARD_Select>

    uint8_t stopTran = 0xFD; // stop transaction token for CMD25
 80018de:	23fd      	movs	r3, #253	; 0xfd
 80018e0:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &stopTran, sizeof(stopTran), HAL_MAX_DELAY);
 80018e2:	1df9      	adds	r1, r7, #7
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	2201      	movs	r2, #1
 80018ea:	480c      	ldr	r0, [pc, #48]	; (800191c <SDCARD_WriteEnd+0x48>)
 80018ec:	f007 f9fe 	bl	8008cec <HAL_SPI_Transmit>

    // skip one byte before readyng "busy"
    // this is required by the spec and is necessary for some real SD-cards!
    uint8_t skipByte;
    SDCARD_ReadBytes(&skipByte, sizeof(skipByte));
 80018f0:	1dbb      	adds	r3, r7, #6
 80018f2:	2101      	movs	r1, #1
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fc59 	bl	80011ac <SDCARD_ReadBytes>

    if(SDCARD_WaitNotBusy() < 0) {
 80018fa:	f7ff fc79 	bl	80011f0 <SDCARD_WaitNotBusy>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	da04      	bge.n	800190e <SDCARD_WriteEnd+0x3a>
        SDCARD_Unselect();
 8001904:	f7ff fc06 	bl	8001114 <SDCARD_Unselect>
        return -1;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
 800190c:	e002      	b.n	8001914 <SDCARD_WriteEnd+0x40>
    }

    SDCARD_Unselect();
 800190e:	f7ff fc01 	bl	8001114 <SDCARD_Unselect>
    return 0;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	2400010c 	.word	0x2400010c

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_MspInit+0x30>)
 8001928:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800192c:	4a08      	ldr	r2, [pc, #32]	; (8001950 <HAL_MspInit+0x30>)
 800192e:	f043 0302 	orr.w	r3, r3, #2
 8001932:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_MspInit+0x30>)
 8001938:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	58024400 	.word	0x58024400

08001954 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b0b8      	sub	sp, #224	; 0xe0
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	22b8      	movs	r2, #184	; 0xb8
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f00a f95f 	bl	800bc38 <memset>
  if(hsd->Instance==SDMMC1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a3b      	ldr	r2, [pc, #236]	; (8001a6c <HAL_SD_MspInit+0x118>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d16e      	bne.n	8001a62 <HAL_SD_MspInit+0x10e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001988:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800198a:	2300      	movs	r3, #0
 800198c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4618      	mov	r0, r3
 8001994:	f003 fb98 	bl	80050c8 <HAL_RCCEx_PeriphCLKConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 800199e:	f7ff fba7 	bl	80010f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80019a2:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <HAL_SD_MspInit+0x11c>)
 80019a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80019a8:	4a31      	ldr	r2, [pc, #196]	; (8001a70 <HAL_SD_MspInit+0x11c>)
 80019aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ae:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80019b2:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_SD_MspInit+0x11c>)
 80019b4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_SD_MspInit+0x11c>)
 80019c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019c6:	4a2a      	ldr	r2, [pc, #168]	; (8001a70 <HAL_SD_MspInit+0x11c>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_SD_MspInit+0x11c>)
 80019d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019de:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <HAL_SD_MspInit+0x11c>)
 80019e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019e4:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <HAL_SD_MspInit+0x11c>)
 80019e6:	f043 0308 	orr.w	r3, r3, #8
 80019ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_SD_MspInit+0x11c>)
 80019f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80019fc:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001a00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a16:	230c      	movs	r3, #12
 8001a18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a20:	4619      	mov	r1, r3
 8001a22:	4814      	ldr	r0, [pc, #80]	; (8001a74 <HAL_SD_MspInit+0x120>)
 8001a24:	f002 f96a 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a28:	2304      	movs	r3, #4
 8001a2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a40:	230c      	movs	r3, #12
 8001a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a46:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480a      	ldr	r0, [pc, #40]	; (8001a78 <HAL_SD_MspInit+0x124>)
 8001a4e:	f002 f955 	bl	8003cfc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2031      	movs	r0, #49	; 0x31
 8001a58:	f000 fbed 	bl	8002236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001a5c:	2031      	movs	r0, #49	; 0x31
 8001a5e:	f000 fc04 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	37e0      	adds	r7, #224	; 0xe0
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	52007000 	.word	0x52007000
 8001a70:	58024400 	.word	0x58024400
 8001a74:	58020800 	.word	0x58020800
 8001a78:	58020c00 	.word	0x58020c00

08001a7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b0b8      	sub	sp, #224	; 0xe0
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	22b8      	movs	r2, #184	; 0xb8
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00a f8cb 	bl	800bc38 <memset>
  if(hspi->Instance==SPI1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <HAL_SPI_MspInit+0xbc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d141      	bne.n	8001b30 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fb04 	bl	80050c8 <HAL_RCCEx_PeriphCLKConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001ac6:	f7ff fb13 	bl	80010f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <HAL_SPI_MspInit+0xc0>)
 8001acc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001ad0:	4a1a      	ldr	r2, [pc, #104]	; (8001b3c <HAL_SPI_MspInit+0xc0>)
 8001ad2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_SPI_MspInit+0xc0>)
 8001adc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_SPI_MspInit+0xc0>)
 8001aea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001aee:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <HAL_SPI_MspInit+0xc0>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_SPI_MspInit+0xc0>)
 8001afa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b06:	23e0      	movs	r3, #224	; 0xe0
 8001b08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b1e:	2305      	movs	r3, #5
 8001b20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <HAL_SPI_MspInit+0xc4>)
 8001b2c:	f002 f8e6 	bl	8003cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b30:	bf00      	nop
 8001b32:	37e0      	adds	r7, #224	; 0xe0
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40013000 	.word	0x40013000
 8001b3c:	58024400 	.word	0x58024400
 8001b40:	58020000 	.word	0x58020000

08001b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0b8      	sub	sp, #224	; 0xe0
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	22b8      	movs	r2, #184	; 0xb8
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f00a f867 	bl	800bc38 <memset>
  if(huart->Instance==USART3)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a52      	ldr	r2, [pc, #328]	; (8001cb8 <HAL_UART_MspInit+0x174>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	f040 809d 	bne.w	8001cb0 <HAL_UART_MspInit+0x16c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b76:	2302      	movs	r3, #2
 8001b78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4618      	mov	r0, r3
 8001b86:	f003 fa9f 	bl	80050c8 <HAL_RCCEx_PeriphCLKConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001b90:	f7ff faae 	bl	80010f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b94:	4b49      	ldr	r3, [pc, #292]	; (8001cbc <HAL_UART_MspInit+0x178>)
 8001b96:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001b9a:	4a48      	ldr	r2, [pc, #288]	; (8001cbc <HAL_UART_MspInit+0x178>)
 8001b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ba4:	4b45      	ldr	r3, [pc, #276]	; (8001cbc <HAL_UART_MspInit+0x178>)
 8001ba6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb2:	4b42      	ldr	r3, [pc, #264]	; (8001cbc <HAL_UART_MspInit+0x178>)
 8001bb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bb8:	4a40      	ldr	r2, [pc, #256]	; (8001cbc <HAL_UART_MspInit+0x178>)
 8001bba:	f043 0308 	orr.w	r3, r3, #8
 8001bbe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001bc2:	4b3e      	ldr	r3, [pc, #248]	; (8001cbc <HAL_UART_MspInit+0x178>)
 8001bc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001bd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bea:	2307      	movs	r3, #7
 8001bec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4832      	ldr	r0, [pc, #200]	; (8001cc0 <HAL_UART_MspInit+0x17c>)
 8001bf8:	f002 f880 	bl	8003cfc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001bfc:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <HAL_UART_MspInit+0x180>)
 8001bfe:	4a32      	ldr	r2, [pc, #200]	; (8001cc8 <HAL_UART_MspInit+0x184>)
 8001c00:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001c02:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <HAL_UART_MspInit+0x180>)
 8001c04:	222d      	movs	r2, #45	; 0x2d
 8001c06:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c08:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <HAL_UART_MspInit+0x180>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <HAL_UART_MspInit+0x180>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <HAL_UART_MspInit+0x180>)
 8001c16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c1a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c1c:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <HAL_UART_MspInit+0x180>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <HAL_UART_MspInit+0x180>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001c28:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <HAL_UART_MspInit+0x180>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c2e:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_UART_MspInit+0x180>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c34:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <HAL_UART_MspInit+0x180>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c3a:	4822      	ldr	r0, [pc, #136]	; (8001cc4 <HAL_UART_MspInit+0x180>)
 8001c3c:	f000 fb30 	bl	80022a0 <HAL_DMA_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001c46:	f7ff fa53 	bl	80010f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_UART_MspInit+0x180>)
 8001c4e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c50:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <HAL_UART_MspInit+0x180>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_UART_MspInit+0x188>)
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <HAL_UART_MspInit+0x18c>)
 8001c5a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_UART_MspInit+0x188>)
 8001c5e:	222e      	movs	r2, #46	; 0x2e
 8001c60:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <HAL_UART_MspInit+0x188>)
 8001c64:	2240      	movs	r2, #64	; 0x40
 8001c66:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_UART_MspInit+0x188>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_UART_MspInit+0x188>)
 8001c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c74:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_UART_MspInit+0x188>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_UART_MspInit+0x188>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_UART_MspInit+0x188>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_UART_MspInit+0x188>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_UART_MspInit+0x188>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001c94:	480d      	ldr	r0, [pc, #52]	; (8001ccc <HAL_UART_MspInit+0x188>)
 8001c96:	f000 fb03 	bl	80022a0 <HAL_DMA_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8001ca0:	f7ff fa26 	bl	80010f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <HAL_UART_MspInit+0x188>)
 8001ca8:	679a      	str	r2, [r3, #120]	; 0x78
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <HAL_UART_MspInit+0x188>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	37e0      	adds	r7, #224	; 0xe0
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40004800 	.word	0x40004800
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	58020c00 	.word	0x58020c00
 8001cc4:	24000224 	.word	0x24000224
 8001cc8:	40020028 	.word	0x40020028
 8001ccc:	2400029c 	.word	0x2400029c
 8001cd0:	40020040 	.word	0x40020040

08001cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <NMI_Handler+0x4>

08001cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <HardFault_Handler+0x4>

08001ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <MemManage_Handler+0x4>

08001ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <BusFault_Handler+0x4>

08001cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <UsageFault_Handler+0x4>

08001cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d20:	f000 f96a 	bl	8001ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <DMA1_Stream1_IRQHandler+0x10>)
 8001d2e:	f000 fe47 	bl	80029c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	24000224 	.word	0x24000224

08001d3c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <DMA1_Stream2_IRQHandler+0x10>)
 8001d42:	f000 fe3d 	bl	80029c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2400029c 	.word	0x2400029c

08001d50 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <SDMMC1_IRQHandler+0x10>)
 8001d56:	f005 fccf 	bl	80076f8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	24000090 	.word	0x24000090

08001d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <_sbrk+0x5c>)
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <_sbrk+0x60>)
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <_sbrk+0x64>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <_sbrk+0x68>)
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d207      	bcs.n	8001da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d94:	f009 ff18 	bl	800bbc8 <__errno>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	e009      	b.n	8001db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <_sbrk+0x64>)
 8001db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db6:	68fb      	ldr	r3, [r7, #12]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	24100000 	.word	0x24100000
 8001dc4:	00000800 	.word	0x00000800
 8001dc8:	24000390 	.word	0x24000390
 8001dcc:	240003c8 	.word	0x240003c8

08001dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dd4:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <SystemInit+0xd0>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dda:	4a31      	ldr	r2, [pc, #196]	; (8001ea0 <SystemInit+0xd0>)
 8001ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001de4:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <SystemInit+0xd4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d807      	bhi.n	8001e00 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001df0:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <SystemInit+0xd4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 030f 	bic.w	r3, r3, #15
 8001df8:	4a2a      	ldr	r2, [pc, #168]	; (8001ea4 <SystemInit+0xd4>)
 8001dfa:	f043 0303 	orr.w	r3, r3, #3
 8001dfe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <SystemInit+0xd8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <SystemInit+0xd8>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e0c:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <SystemInit+0xd8>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e12:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <SystemInit+0xd8>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4924      	ldr	r1, [pc, #144]	; (8001ea8 <SystemInit+0xd8>)
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <SystemInit+0xdc>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e1e:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <SystemInit+0xd4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <SystemInit+0xd4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 030f 	bic.w	r3, r3, #15
 8001e32:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <SystemInit+0xd4>)
 8001e34:	f043 0303 	orr.w	r3, r3, #3
 8001e38:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <SystemInit+0xd8>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <SystemInit+0xd8>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <SystemInit+0xd8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <SystemInit+0xd8>)
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <SystemInit+0xe0>)
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <SystemInit+0xd8>)
 8001e54:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <SystemInit+0xe4>)
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <SystemInit+0xd8>)
 8001e5a:	4a17      	ldr	r2, [pc, #92]	; (8001eb8 <SystemInit+0xe8>)
 8001e5c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <SystemInit+0xd8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <SystemInit+0xd8>)
 8001e66:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <SystemInit+0xe8>)
 8001e68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <SystemInit+0xd8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <SystemInit+0xd8>)
 8001e72:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <SystemInit+0xe8>)
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <SystemInit+0xd8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <SystemInit+0xd8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <SystemInit+0xd8>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <SystemInit+0xd8>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <SystemInit+0xec>)
 8001e90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00
 8001ea4:	52002000 	.word	0x52002000
 8001ea8:	58024400 	.word	0x58024400
 8001eac:	eaf6ed7f 	.word	0xeaf6ed7f
 8001eb0:	02020200 	.word	0x02020200
 8001eb4:	01ff0000 	.word	0x01ff0000
 8001eb8:	01010280 	.word	0x01010280
 8001ebc:	52004000 	.word	0x52004000

08001ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ec4:	f7ff ff84 	bl	8001dd0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eca:	490d      	ldr	r1, [pc, #52]	; (8001f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed0:	e002      	b.n	8001ed8 <LoopCopyDataInit>

08001ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed6:	3304      	adds	r3, #4

08001ed8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001edc:	d3f9      	bcc.n	8001ed2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ee0:	4c0a      	ldr	r4, [pc, #40]	; (8001f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee4:	e001      	b.n	8001eea <LoopFillZerobss>

08001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee8:	3204      	adds	r2, #4

08001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eec:	d3fb      	bcc.n	8001ee6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001eee:	f009 fe71 	bl	800bbd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef2:	f7fe fded 	bl	8000ad0 <main>
  bx  lr
 8001ef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ef8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001efc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f00:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001f04:	0800ca78 	.word	0x0800ca78
  ldr r2, =_sbss
 8001f08:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001f0c:	240003c4 	.word	0x240003c4

08001f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC_IRQHandler>
	...

08001f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f1a:	2003      	movs	r0, #3
 8001f1c:	f000 f980 	bl	8002220 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001f20:	f002 fefc 	bl	8004d1c <HAL_RCC_GetSysClockFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_Init+0x68>)
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	4913      	ldr	r1, [pc, #76]	; (8001f80 <HAL_Init+0x6c>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_Init+0x68>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <HAL_Init+0x6c>)
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <HAL_Init+0x70>)
 8001f56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f58:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <HAL_Init+0x74>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f000 f814 	bl	8001f8c <HAL_InitTick>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e002      	b.n	8001f74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6e:	f7ff fcd7 	bl	8001920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	58024400 	.word	0x58024400
 8001f80:	0800c9e0 	.word	0x0800c9e0
 8001f84:	24000004 	.word	0x24000004
 8001f88:	24000000 	.word	0x24000000

08001f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_InitTick+0x60>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e021      	b.n	8001fe4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <HAL_InitTick+0x64>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_InitTick+0x60>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f965 	bl	8002286 <HAL_SYSTICK_Config>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00e      	b.n	8001fe4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b0f      	cmp	r3, #15
 8001fca:	d80a      	bhi.n	8001fe2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f000 f92f 	bl	8002236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd8:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <HAL_InitTick+0x68>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e000      	b.n	8001fe4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	2400000c 	.word	0x2400000c
 8001ff0:	24000000 	.word	0x24000000
 8001ff4:	24000008 	.word	0x24000008

08001ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_IncTick+0x20>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_IncTick+0x24>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4413      	add	r3, r2
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <HAL_IncTick+0x24>)
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	2400000c 	.word	0x2400000c
 800201c:	24000394 	.word	0x24000394

08002020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return uwTick;
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <HAL_GetTick+0x14>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	24000394 	.word	0x24000394

08002038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002040:	f7ff ffee 	bl	8002020 <HAL_GetTick>
 8002044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d005      	beq.n	800205e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_Delay+0x44>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800205e:	bf00      	nop
 8002060:	f7ff ffde 	bl	8002020 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	429a      	cmp	r2, r3
 800206e:	d8f7      	bhi.n	8002060 <HAL_Delay+0x28>
  {
  }
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2400000c 	.word	0x2400000c

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ae:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <__NVIC_SetPriorityGrouping+0x40>)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	60d3      	str	r3, [r2, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00
 80020c4:	05fa0000 	.word	0x05fa0000

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	db0b      	blt.n	800210e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4907      	ldr	r1, [pc, #28]	; (800211c <__NVIC_EnableIRQ+0x38>)
 80020fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000e100 	.word	0xe000e100

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800212c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db0a      	blt.n	800214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	; (800216c <__NVIC_SetPriority+0x4c>)
 800213a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	440b      	add	r3, r1
 8002144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002148:	e00a      	b.n	8002160 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4908      	ldr	r1, [pc, #32]	; (8002170 <__NVIC_SetPriority+0x50>)
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3b04      	subs	r3, #4
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	440b      	add	r3, r1
 800215e:	761a      	strb	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	; 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ec:	d301      	bcc.n	80021f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00f      	b.n	8002212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <SysTick_Config+0x40>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fa:	210f      	movs	r1, #15
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	f7ff ff8e 	bl	8002120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <SysTick_Config+0x40>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <SysTick_Config+0x40>)
 800220c:	2207      	movs	r2, #7
 800220e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	e000e010 	.word	0xe000e010

08002220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff29 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002244:	f7ff ff40 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 8002248:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7ff ff90 	bl	8002174 <NVIC_EncodePriority>
 8002254:	4602      	mov	r2, r0
 8002256:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff5f 	bl	8002120 <__NVIC_SetPriority>
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff33 	bl	80020e4 <__NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffa4 	bl	80021dc <SysTick_Config>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff feba 	bl	8002020 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e37f      	b.n	80029b8 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a66      	ldr	r2, [pc, #408]	; (8002458 <HAL_DMA_Init+0x1b8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d04a      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a65      	ldr	r2, [pc, #404]	; (800245c <HAL_DMA_Init+0x1bc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d045      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a63      	ldr	r2, [pc, #396]	; (8002460 <HAL_DMA_Init+0x1c0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d040      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a62      	ldr	r2, [pc, #392]	; (8002464 <HAL_DMA_Init+0x1c4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d03b      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a60      	ldr	r2, [pc, #384]	; (8002468 <HAL_DMA_Init+0x1c8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d036      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a5f      	ldr	r2, [pc, #380]	; (800246c <HAL_DMA_Init+0x1cc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d031      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a5d      	ldr	r2, [pc, #372]	; (8002470 <HAL_DMA_Init+0x1d0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02c      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a5c      	ldr	r2, [pc, #368]	; (8002474 <HAL_DMA_Init+0x1d4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d027      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a5a      	ldr	r2, [pc, #360]	; (8002478 <HAL_DMA_Init+0x1d8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d022      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a59      	ldr	r2, [pc, #356]	; (800247c <HAL_DMA_Init+0x1dc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d01d      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a57      	ldr	r2, [pc, #348]	; (8002480 <HAL_DMA_Init+0x1e0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d018      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a56      	ldr	r2, [pc, #344]	; (8002484 <HAL_DMA_Init+0x1e4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a54      	ldr	r2, [pc, #336]	; (8002488 <HAL_DMA_Init+0x1e8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00e      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a53      	ldr	r2, [pc, #332]	; (800248c <HAL_DMA_Init+0x1ec>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d009      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a51      	ldr	r2, [pc, #324]	; (8002490 <HAL_DMA_Init+0x1f0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_DMA_Init+0xb8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a50      	ldr	r2, [pc, #320]	; (8002494 <HAL_DMA_Init+0x1f4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_DMA_Init+0xbc>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_DMA_Init+0xbe>
 800235c:	2300      	movs	r3, #0
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 813c 	beq.w	80025dc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a37      	ldr	r2, [pc, #220]	; (8002458 <HAL_DMA_Init+0x1b8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d04a      	beq.n	8002414 <HAL_DMA_Init+0x174>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a36      	ldr	r2, [pc, #216]	; (800245c <HAL_DMA_Init+0x1bc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d045      	beq.n	8002414 <HAL_DMA_Init+0x174>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a34      	ldr	r2, [pc, #208]	; (8002460 <HAL_DMA_Init+0x1c0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d040      	beq.n	8002414 <HAL_DMA_Init+0x174>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a33      	ldr	r2, [pc, #204]	; (8002464 <HAL_DMA_Init+0x1c4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d03b      	beq.n	8002414 <HAL_DMA_Init+0x174>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a31      	ldr	r2, [pc, #196]	; (8002468 <HAL_DMA_Init+0x1c8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d036      	beq.n	8002414 <HAL_DMA_Init+0x174>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a30      	ldr	r2, [pc, #192]	; (800246c <HAL_DMA_Init+0x1cc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d031      	beq.n	8002414 <HAL_DMA_Init+0x174>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2e      	ldr	r2, [pc, #184]	; (8002470 <HAL_DMA_Init+0x1d0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02c      	beq.n	8002414 <HAL_DMA_Init+0x174>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2d      	ldr	r2, [pc, #180]	; (8002474 <HAL_DMA_Init+0x1d4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d027      	beq.n	8002414 <HAL_DMA_Init+0x174>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <HAL_DMA_Init+0x1d8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d022      	beq.n	8002414 <HAL_DMA_Init+0x174>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a2a      	ldr	r2, [pc, #168]	; (800247c <HAL_DMA_Init+0x1dc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d01d      	beq.n	8002414 <HAL_DMA_Init+0x174>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a28      	ldr	r2, [pc, #160]	; (8002480 <HAL_DMA_Init+0x1e0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d018      	beq.n	8002414 <HAL_DMA_Init+0x174>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a27      	ldr	r2, [pc, #156]	; (8002484 <HAL_DMA_Init+0x1e4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d013      	beq.n	8002414 <HAL_DMA_Init+0x174>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a25      	ldr	r2, [pc, #148]	; (8002488 <HAL_DMA_Init+0x1e8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00e      	beq.n	8002414 <HAL_DMA_Init+0x174>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a24      	ldr	r2, [pc, #144]	; (800248c <HAL_DMA_Init+0x1ec>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d009      	beq.n	8002414 <HAL_DMA_Init+0x174>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a22      	ldr	r2, [pc, #136]	; (8002490 <HAL_DMA_Init+0x1f0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_DMA_Init+0x174>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a21      	ldr	r2, [pc, #132]	; (8002494 <HAL_DMA_Init+0x1f4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d108      	bne.n	8002426 <HAL_DMA_Init+0x186>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0201 	bic.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e007      	b.n	8002436 <HAL_DMA_Init+0x196>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002436:	e02f      	b.n	8002498 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002438:	f7ff fdf2 	bl	8002020 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b05      	cmp	r3, #5
 8002444:	d928      	bls.n	8002498 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2203      	movs	r2, #3
 8002450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e2af      	b.n	80029b8 <HAL_DMA_Init+0x718>
 8002458:	40020010 	.word	0x40020010
 800245c:	40020028 	.word	0x40020028
 8002460:	40020040 	.word	0x40020040
 8002464:	40020058 	.word	0x40020058
 8002468:	40020070 	.word	0x40020070
 800246c:	40020088 	.word	0x40020088
 8002470:	400200a0 	.word	0x400200a0
 8002474:	400200b8 	.word	0x400200b8
 8002478:	40020410 	.word	0x40020410
 800247c:	40020428 	.word	0x40020428
 8002480:	40020440 	.word	0x40020440
 8002484:	40020458 	.word	0x40020458
 8002488:	40020470 	.word	0x40020470
 800248c:	40020488 	.word	0x40020488
 8002490:	400204a0 	.word	0x400204a0
 8002494:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1c8      	bne.n	8002438 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4b73      	ldr	r3, [pc, #460]	; (8002680 <HAL_DMA_Init+0x3e0>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80024be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d107      	bne.n	80024fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	4313      	orrs	r3, r2
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b28      	cmp	r3, #40	; 0x28
 8002502:	d903      	bls.n	800250c <HAL_DMA_Init+0x26c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b2e      	cmp	r3, #46	; 0x2e
 800250a:	d91f      	bls.n	800254c <HAL_DMA_Init+0x2ac>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b3e      	cmp	r3, #62	; 0x3e
 8002512:	d903      	bls.n	800251c <HAL_DMA_Init+0x27c>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b42      	cmp	r3, #66	; 0x42
 800251a:	d917      	bls.n	800254c <HAL_DMA_Init+0x2ac>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b46      	cmp	r3, #70	; 0x46
 8002522:	d903      	bls.n	800252c <HAL_DMA_Init+0x28c>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b48      	cmp	r3, #72	; 0x48
 800252a:	d90f      	bls.n	800254c <HAL_DMA_Init+0x2ac>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b4e      	cmp	r3, #78	; 0x4e
 8002532:	d903      	bls.n	800253c <HAL_DMA_Init+0x29c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b52      	cmp	r3, #82	; 0x52
 800253a:	d907      	bls.n	800254c <HAL_DMA_Init+0x2ac>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b73      	cmp	r3, #115	; 0x73
 8002542:	d905      	bls.n	8002550 <HAL_DMA_Init+0x2b0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b77      	cmp	r3, #119	; 0x77
 800254a:	d801      	bhi.n	8002550 <HAL_DMA_Init+0x2b0>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_DMA_Init+0x2b2>
 8002550:	2300      	movs	r3, #0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800255c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f023 0307 	bic.w	r3, r3, #7
 8002574:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	2b04      	cmp	r3, #4
 8002586:	d117      	bne.n	80025b8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00e      	beq.n	80025b8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f001 fa24 	bl	80039e8 <DMA_CheckFifoParam>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2240      	movs	r2, #64	; 0x40
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e1ff      	b.n	80029b8 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f001 f95f 	bl	8003884 <DMA_CalcBaseAndBitshift>
 80025c6:	4603      	mov	r3, r0
 80025c8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	223f      	movs	r2, #63	; 0x3f
 80025d4:	409a      	lsls	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	e0fe      	b.n	80027da <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a28      	ldr	r2, [pc, #160]	; (8002684 <HAL_DMA_Init+0x3e4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d04a      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a27      	ldr	r2, [pc, #156]	; (8002688 <HAL_DMA_Init+0x3e8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d045      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a25      	ldr	r2, [pc, #148]	; (800268c <HAL_DMA_Init+0x3ec>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d040      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a24      	ldr	r2, [pc, #144]	; (8002690 <HAL_DMA_Init+0x3f0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d03b      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a22      	ldr	r2, [pc, #136]	; (8002694 <HAL_DMA_Init+0x3f4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d036      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a21      	ldr	r2, [pc, #132]	; (8002698 <HAL_DMA_Init+0x3f8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d031      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1f      	ldr	r2, [pc, #124]	; (800269c <HAL_DMA_Init+0x3fc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d02c      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1e      	ldr	r2, [pc, #120]	; (80026a0 <HAL_DMA_Init+0x400>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d027      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <HAL_DMA_Init+0x404>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d022      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1b      	ldr	r2, [pc, #108]	; (80026a8 <HAL_DMA_Init+0x408>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d01d      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a19      	ldr	r2, [pc, #100]	; (80026ac <HAL_DMA_Init+0x40c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d018      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a18      	ldr	r2, [pc, #96]	; (80026b0 <HAL_DMA_Init+0x410>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d013      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a16      	ldr	r2, [pc, #88]	; (80026b4 <HAL_DMA_Init+0x414>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00e      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a15      	ldr	r2, [pc, #84]	; (80026b8 <HAL_DMA_Init+0x418>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d009      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a13      	ldr	r2, [pc, #76]	; (80026bc <HAL_DMA_Init+0x41c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d004      	beq.n	800267c <HAL_DMA_Init+0x3dc>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <HAL_DMA_Init+0x420>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d123      	bne.n	80026c4 <HAL_DMA_Init+0x424>
 800267c:	2301      	movs	r3, #1
 800267e:	e022      	b.n	80026c6 <HAL_DMA_Init+0x426>
 8002680:	fe10803f 	.word	0xfe10803f
 8002684:	48022c08 	.word	0x48022c08
 8002688:	48022c1c 	.word	0x48022c1c
 800268c:	48022c30 	.word	0x48022c30
 8002690:	48022c44 	.word	0x48022c44
 8002694:	48022c58 	.word	0x48022c58
 8002698:	48022c6c 	.word	0x48022c6c
 800269c:	48022c80 	.word	0x48022c80
 80026a0:	48022c94 	.word	0x48022c94
 80026a4:	58025408 	.word	0x58025408
 80026a8:	5802541c 	.word	0x5802541c
 80026ac:	58025430 	.word	0x58025430
 80026b0:	58025444 	.word	0x58025444
 80026b4:	58025458 	.word	0x58025458
 80026b8:	5802546c 	.word	0x5802546c
 80026bc:	58025480 	.word	0x58025480
 80026c0:	58025494 	.word	0x58025494
 80026c4:	2300      	movs	r3, #0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d07e      	beq.n	80027c8 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a80      	ldr	r2, [pc, #512]	; (80028d0 <HAL_DMA_Init+0x630>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d021      	beq.n	8002718 <HAL_DMA_Init+0x478>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a7e      	ldr	r2, [pc, #504]	; (80028d4 <HAL_DMA_Init+0x634>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01c      	beq.n	8002718 <HAL_DMA_Init+0x478>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7d      	ldr	r2, [pc, #500]	; (80028d8 <HAL_DMA_Init+0x638>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d017      	beq.n	8002718 <HAL_DMA_Init+0x478>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a7b      	ldr	r2, [pc, #492]	; (80028dc <HAL_DMA_Init+0x63c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d012      	beq.n	8002718 <HAL_DMA_Init+0x478>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a7a      	ldr	r2, [pc, #488]	; (80028e0 <HAL_DMA_Init+0x640>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00d      	beq.n	8002718 <HAL_DMA_Init+0x478>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a78      	ldr	r2, [pc, #480]	; (80028e4 <HAL_DMA_Init+0x644>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d008      	beq.n	8002718 <HAL_DMA_Init+0x478>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a77      	ldr	r2, [pc, #476]	; (80028e8 <HAL_DMA_Init+0x648>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <HAL_DMA_Init+0x478>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a75      	ldr	r2, [pc, #468]	; (80028ec <HAL_DMA_Init+0x64c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2202      	movs	r2, #2
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4b6e      	ldr	r3, [pc, #440]	; (80028f0 <HAL_DMA_Init+0x650>)
 8002736:	4013      	ands	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	d008      	beq.n	8002754 <HAL_DMA_Init+0x4b4>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b80      	cmp	r3, #128	; 0x80
 8002748:	d102      	bne.n	8002750 <HAL_DMA_Init+0x4b0>
 800274a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800274e:	e002      	b.n	8002756 <HAL_DMA_Init+0x4b6>
 8002750:	2300      	movs	r3, #0
 8002752:	e000      	b.n	8002756 <HAL_DMA_Init+0x4b6>
 8002754:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68d2      	ldr	r2, [r2, #12]
 800275a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800275c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002764:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800276c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002774:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800277c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002784:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b56      	ldr	r3, [pc, #344]	; (80028f4 <HAL_DMA_Init+0x654>)
 800279c:	4413      	add	r3, r2
 800279e:	4a56      	ldr	r2, [pc, #344]	; (80028f8 <HAL_DMA_Init+0x658>)
 80027a0:	fba2 2303 	umull	r2, r3, r2, r3
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	009a      	lsls	r2, r3, #2
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f001 f869 	bl	8003884 <DMA_CalcBaseAndBitshift>
 80027b2:	4603      	mov	r3, r0
 80027b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	2201      	movs	r2, #1
 80027c0:	409a      	lsls	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	e008      	b.n	80027da <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2240      	movs	r2, #64	; 0x40
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2203      	movs	r2, #3
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0ee      	b.n	80029b8 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a47      	ldr	r2, [pc, #284]	; (80028fc <HAL_DMA_Init+0x65c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d072      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a45      	ldr	r2, [pc, #276]	; (8002900 <HAL_DMA_Init+0x660>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d06d      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a44      	ldr	r2, [pc, #272]	; (8002904 <HAL_DMA_Init+0x664>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d068      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a42      	ldr	r2, [pc, #264]	; (8002908 <HAL_DMA_Init+0x668>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d063      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a41      	ldr	r2, [pc, #260]	; (800290c <HAL_DMA_Init+0x66c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d05e      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a3f      	ldr	r2, [pc, #252]	; (8002910 <HAL_DMA_Init+0x670>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d059      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a3e      	ldr	r2, [pc, #248]	; (8002914 <HAL_DMA_Init+0x674>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d054      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a3c      	ldr	r2, [pc, #240]	; (8002918 <HAL_DMA_Init+0x678>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d04f      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a3b      	ldr	r2, [pc, #236]	; (800291c <HAL_DMA_Init+0x67c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d04a      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a39      	ldr	r2, [pc, #228]	; (8002920 <HAL_DMA_Init+0x680>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d045      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a38      	ldr	r2, [pc, #224]	; (8002924 <HAL_DMA_Init+0x684>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d040      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a36      	ldr	r2, [pc, #216]	; (8002928 <HAL_DMA_Init+0x688>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d03b      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a35      	ldr	r2, [pc, #212]	; (800292c <HAL_DMA_Init+0x68c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d036      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a33      	ldr	r2, [pc, #204]	; (8002930 <HAL_DMA_Init+0x690>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d031      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a32      	ldr	r2, [pc, #200]	; (8002934 <HAL_DMA_Init+0x694>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d02c      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a30      	ldr	r2, [pc, #192]	; (8002938 <HAL_DMA_Init+0x698>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d027      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <HAL_DMA_Init+0x630>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d022      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <HAL_DMA_Init+0x634>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d01d      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <HAL_DMA_Init+0x638>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d018      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0f      	ldr	r2, [pc, #60]	; (80028dc <HAL_DMA_Init+0x63c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <HAL_DMA_Init+0x640>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00e      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <HAL_DMA_Init+0x644>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d009      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a0b      	ldr	r2, [pc, #44]	; (80028e8 <HAL_DMA_Init+0x648>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d004      	beq.n	80028ca <HAL_DMA_Init+0x62a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_DMA_Init+0x64c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d138      	bne.n	800293c <HAL_DMA_Init+0x69c>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e037      	b.n	800293e <HAL_DMA_Init+0x69e>
 80028ce:	bf00      	nop
 80028d0:	58025408 	.word	0x58025408
 80028d4:	5802541c 	.word	0x5802541c
 80028d8:	58025430 	.word	0x58025430
 80028dc:	58025444 	.word	0x58025444
 80028e0:	58025458 	.word	0x58025458
 80028e4:	5802546c 	.word	0x5802546c
 80028e8:	58025480 	.word	0x58025480
 80028ec:	58025494 	.word	0x58025494
 80028f0:	fffe000f 	.word	0xfffe000f
 80028f4:	a7fdabf8 	.word	0xa7fdabf8
 80028f8:	cccccccd 	.word	0xcccccccd
 80028fc:	40020010 	.word	0x40020010
 8002900:	40020028 	.word	0x40020028
 8002904:	40020040 	.word	0x40020040
 8002908:	40020058 	.word	0x40020058
 800290c:	40020070 	.word	0x40020070
 8002910:	40020088 	.word	0x40020088
 8002914:	400200a0 	.word	0x400200a0
 8002918:	400200b8 	.word	0x400200b8
 800291c:	40020410 	.word	0x40020410
 8002920:	40020428 	.word	0x40020428
 8002924:	40020440 	.word	0x40020440
 8002928:	40020458 	.word	0x40020458
 800292c:	40020470 	.word	0x40020470
 8002930:	40020488 	.word	0x40020488
 8002934:	400204a0 	.word	0x400204a0
 8002938:	400204b8 	.word	0x400204b8
 800293c:	2300      	movs	r3, #0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d032      	beq.n	80029a8 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f001 f8cc 	bl	8003ae0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b80      	cmp	r3, #128	; 0x80
 800294e:	d102      	bne.n	8002956 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800296a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d010      	beq.n	8002996 <HAL_DMA_Init+0x6f6>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b08      	cmp	r3, #8
 800297a:	d80c      	bhi.n	8002996 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f001 f949 	bl	8003c14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	e008      	b.n	80029a8 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029cc:	4b67      	ldr	r3, [pc, #412]	; (8002b6c <HAL_DMA_IRQHandler+0x1ac>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a67      	ldr	r2, [pc, #412]	; (8002b70 <HAL_DMA_IRQHandler+0x1b0>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	0a9b      	lsrs	r3, r3, #10
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a5f      	ldr	r2, [pc, #380]	; (8002b74 <HAL_DMA_IRQHandler+0x1b4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d04a      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a5d      	ldr	r2, [pc, #372]	; (8002b78 <HAL_DMA_IRQHandler+0x1b8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d045      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a5c      	ldr	r2, [pc, #368]	; (8002b7c <HAL_DMA_IRQHandler+0x1bc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d040      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a5a      	ldr	r2, [pc, #360]	; (8002b80 <HAL_DMA_IRQHandler+0x1c0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d03b      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a59      	ldr	r2, [pc, #356]	; (8002b84 <HAL_DMA_IRQHandler+0x1c4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d036      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a57      	ldr	r2, [pc, #348]	; (8002b88 <HAL_DMA_IRQHandler+0x1c8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d031      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a56      	ldr	r2, [pc, #344]	; (8002b8c <HAL_DMA_IRQHandler+0x1cc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d02c      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a54      	ldr	r2, [pc, #336]	; (8002b90 <HAL_DMA_IRQHandler+0x1d0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d027      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a53      	ldr	r2, [pc, #332]	; (8002b94 <HAL_DMA_IRQHandler+0x1d4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d022      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a51      	ldr	r2, [pc, #324]	; (8002b98 <HAL_DMA_IRQHandler+0x1d8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01d      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a50      	ldr	r2, [pc, #320]	; (8002b9c <HAL_DMA_IRQHandler+0x1dc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d018      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a4e      	ldr	r2, [pc, #312]	; (8002ba0 <HAL_DMA_IRQHandler+0x1e0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a4d      	ldr	r2, [pc, #308]	; (8002ba4 <HAL_DMA_IRQHandler+0x1e4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00e      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a4b      	ldr	r2, [pc, #300]	; (8002ba8 <HAL_DMA_IRQHandler+0x1e8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d009      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a4a      	ldr	r2, [pc, #296]	; (8002bac <HAL_DMA_IRQHandler+0x1ec>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d004      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xd2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a48      	ldr	r2, [pc, #288]	; (8002bb0 <HAL_DMA_IRQHandler+0x1f0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d101      	bne.n	8002a96 <HAL_DMA_IRQHandler+0xd6>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_DMA_IRQHandler+0xd8>
 8002a96:	2300      	movs	r3, #0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 842b 	beq.w	80032f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 80a2 	beq.w	8002bf8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2e      	ldr	r2, [pc, #184]	; (8002b74 <HAL_DMA_IRQHandler+0x1b4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d04a      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2d      	ldr	r2, [pc, #180]	; (8002b78 <HAL_DMA_IRQHandler+0x1b8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d045      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2b      	ldr	r2, [pc, #172]	; (8002b7c <HAL_DMA_IRQHandler+0x1bc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d040      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2a      	ldr	r2, [pc, #168]	; (8002b80 <HAL_DMA_IRQHandler+0x1c0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d03b      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a28      	ldr	r2, [pc, #160]	; (8002b84 <HAL_DMA_IRQHandler+0x1c4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d036      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a27      	ldr	r2, [pc, #156]	; (8002b88 <HAL_DMA_IRQHandler+0x1c8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d031      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a25      	ldr	r2, [pc, #148]	; (8002b8c <HAL_DMA_IRQHandler+0x1cc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d02c      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a24      	ldr	r2, [pc, #144]	; (8002b90 <HAL_DMA_IRQHandler+0x1d0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d027      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a22      	ldr	r2, [pc, #136]	; (8002b94 <HAL_DMA_IRQHandler+0x1d4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d022      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a21      	ldr	r2, [pc, #132]	; (8002b98 <HAL_DMA_IRQHandler+0x1d8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d01d      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1f      	ldr	r2, [pc, #124]	; (8002b9c <HAL_DMA_IRQHandler+0x1dc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d018      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <HAL_DMA_IRQHandler+0x1e0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d013      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_DMA_IRQHandler+0x1e4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00e      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <HAL_DMA_IRQHandler+0x1e8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d009      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a19      	ldr	r2, [pc, #100]	; (8002bac <HAL_DMA_IRQHandler+0x1ec>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x194>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <HAL_DMA_IRQHandler+0x1f0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d12f      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x1f4>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bf14      	ite	ne
 8002b62:	2301      	movne	r3, #1
 8002b64:	2300      	moveq	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	e02e      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x208>
 8002b6a:	bf00      	nop
 8002b6c:	24000000 	.word	0x24000000
 8002b70:	1b4e81b5 	.word	0x1b4e81b5
 8002b74:	40020010 	.word	0x40020010
 8002b78:	40020028 	.word	0x40020028
 8002b7c:	40020040 	.word	0x40020040
 8002b80:	40020058 	.word	0x40020058
 8002b84:	40020070 	.word	0x40020070
 8002b88:	40020088 	.word	0x40020088
 8002b8c:	400200a0 	.word	0x400200a0
 8002b90:	400200b8 	.word	0x400200b8
 8002b94:	40020410 	.word	0x40020410
 8002b98:	40020428 	.word	0x40020428
 8002b9c:	40020440 	.word	0x40020440
 8002ba0:	40020458 	.word	0x40020458
 8002ba4:	40020470 	.word	0x40020470
 8002ba8:	40020488 	.word	0x40020488
 8002bac:	400204a0 	.word	0x400204a0
 8002bb0:	400204b8 	.word	0x400204b8
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bf14      	ite	ne
 8002bc2:	2301      	movne	r3, #1
 8002bc4:	2300      	moveq	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d015      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0204 	bic.w	r2, r2, #4
 8002bda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	2208      	movs	r2, #8
 8002be6:	409a      	lsls	r2, r3
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	f043 0201 	orr.w	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d06e      	beq.n	8002cec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a69      	ldr	r2, [pc, #420]	; (8002db8 <HAL_DMA_IRQHandler+0x3f8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d04a      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a67      	ldr	r2, [pc, #412]	; (8002dbc <HAL_DMA_IRQHandler+0x3fc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d045      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a66      	ldr	r2, [pc, #408]	; (8002dc0 <HAL_DMA_IRQHandler+0x400>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d040      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a64      	ldr	r2, [pc, #400]	; (8002dc4 <HAL_DMA_IRQHandler+0x404>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d03b      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a63      	ldr	r2, [pc, #396]	; (8002dc8 <HAL_DMA_IRQHandler+0x408>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d036      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a61      	ldr	r2, [pc, #388]	; (8002dcc <HAL_DMA_IRQHandler+0x40c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d031      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a60      	ldr	r2, [pc, #384]	; (8002dd0 <HAL_DMA_IRQHandler+0x410>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d02c      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a5e      	ldr	r2, [pc, #376]	; (8002dd4 <HAL_DMA_IRQHandler+0x414>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d027      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a5d      	ldr	r2, [pc, #372]	; (8002dd8 <HAL_DMA_IRQHandler+0x418>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d022      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a5b      	ldr	r2, [pc, #364]	; (8002ddc <HAL_DMA_IRQHandler+0x41c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01d      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a5a      	ldr	r2, [pc, #360]	; (8002de0 <HAL_DMA_IRQHandler+0x420>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d018      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a58      	ldr	r2, [pc, #352]	; (8002de4 <HAL_DMA_IRQHandler+0x424>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a57      	ldr	r2, [pc, #348]	; (8002de8 <HAL_DMA_IRQHandler+0x428>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00e      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a55      	ldr	r2, [pc, #340]	; (8002dec <HAL_DMA_IRQHandler+0x42c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d009      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a54      	ldr	r2, [pc, #336]	; (8002df0 <HAL_DMA_IRQHandler+0x430>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d004      	beq.n	8002cae <HAL_DMA_IRQHandler+0x2ee>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a52      	ldr	r2, [pc, #328]	; (8002df4 <HAL_DMA_IRQHandler+0x434>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d10a      	bne.n	8002cc4 <HAL_DMA_IRQHandler+0x304>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e003      	b.n	8002ccc <HAL_DMA_IRQHandler+0x30c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2201      	movs	r2, #1
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce4:	f043 0202 	orr.w	r2, r3, #2
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 808f 	beq.w	8002e20 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2c      	ldr	r2, [pc, #176]	; (8002db8 <HAL_DMA_IRQHandler+0x3f8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d04a      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a2a      	ldr	r2, [pc, #168]	; (8002dbc <HAL_DMA_IRQHandler+0x3fc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d045      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a29      	ldr	r2, [pc, #164]	; (8002dc0 <HAL_DMA_IRQHandler+0x400>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d040      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a27      	ldr	r2, [pc, #156]	; (8002dc4 <HAL_DMA_IRQHandler+0x404>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d03b      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <HAL_DMA_IRQHandler+0x408>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d036      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a24      	ldr	r2, [pc, #144]	; (8002dcc <HAL_DMA_IRQHandler+0x40c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d031      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <HAL_DMA_IRQHandler+0x410>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d02c      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a21      	ldr	r2, [pc, #132]	; (8002dd4 <HAL_DMA_IRQHandler+0x414>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d027      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <HAL_DMA_IRQHandler+0x418>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d022      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1e      	ldr	r2, [pc, #120]	; (8002ddc <HAL_DMA_IRQHandler+0x41c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01d      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <HAL_DMA_IRQHandler+0x420>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d018      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <HAL_DMA_IRQHandler+0x424>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1a      	ldr	r2, [pc, #104]	; (8002de8 <HAL_DMA_IRQHandler+0x428>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00e      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a18      	ldr	r2, [pc, #96]	; (8002dec <HAL_DMA_IRQHandler+0x42c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d009      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <HAL_DMA_IRQHandler+0x430>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d004      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x3e2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <HAL_DMA_IRQHandler+0x434>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d12a      	bne.n	8002df8 <HAL_DMA_IRQHandler+0x438>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf14      	ite	ne
 8002db0:	2301      	movne	r3, #1
 8002db2:	2300      	moveq	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e023      	b.n	8002e00 <HAL_DMA_IRQHandler+0x440>
 8002db8:	40020010 	.word	0x40020010
 8002dbc:	40020028 	.word	0x40020028
 8002dc0:	40020040 	.word	0x40020040
 8002dc4:	40020058 	.word	0x40020058
 8002dc8:	40020070 	.word	0x40020070
 8002dcc:	40020088 	.word	0x40020088
 8002dd0:	400200a0 	.word	0x400200a0
 8002dd4:	400200b8 	.word	0x400200b8
 8002dd8:	40020410 	.word	0x40020410
 8002ddc:	40020428 	.word	0x40020428
 8002de0:	40020440 	.word	0x40020440
 8002de4:	40020458 	.word	0x40020458
 8002de8:	40020470 	.word	0x40020470
 8002dec:	40020488 	.word	0x40020488
 8002df0:	400204a0 	.word	0x400204a0
 8002df4:	400204b8 	.word	0x400204b8
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00d      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e18:	f043 0204 	orr.w	r2, r3, #4
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	2210      	movs	r2, #16
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80a6 	beq.w	8002f82 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a85      	ldr	r2, [pc, #532]	; (8003050 <HAL_DMA_IRQHandler+0x690>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d04a      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a83      	ldr	r2, [pc, #524]	; (8003054 <HAL_DMA_IRQHandler+0x694>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d045      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a82      	ldr	r2, [pc, #520]	; (8003058 <HAL_DMA_IRQHandler+0x698>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d040      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a80      	ldr	r2, [pc, #512]	; (800305c <HAL_DMA_IRQHandler+0x69c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d03b      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a7f      	ldr	r2, [pc, #508]	; (8003060 <HAL_DMA_IRQHandler+0x6a0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d036      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a7d      	ldr	r2, [pc, #500]	; (8003064 <HAL_DMA_IRQHandler+0x6a4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d031      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a7c      	ldr	r2, [pc, #496]	; (8003068 <HAL_DMA_IRQHandler+0x6a8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d02c      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a7a      	ldr	r2, [pc, #488]	; (800306c <HAL_DMA_IRQHandler+0x6ac>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d027      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a79      	ldr	r2, [pc, #484]	; (8003070 <HAL_DMA_IRQHandler+0x6b0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d022      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a77      	ldr	r2, [pc, #476]	; (8003074 <HAL_DMA_IRQHandler+0x6b4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01d      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a76      	ldr	r2, [pc, #472]	; (8003078 <HAL_DMA_IRQHandler+0x6b8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d018      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a74      	ldr	r2, [pc, #464]	; (800307c <HAL_DMA_IRQHandler+0x6bc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d013      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a73      	ldr	r2, [pc, #460]	; (8003080 <HAL_DMA_IRQHandler+0x6c0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a71      	ldr	r2, [pc, #452]	; (8003084 <HAL_DMA_IRQHandler+0x6c4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a70      	ldr	r2, [pc, #448]	; (8003088 <HAL_DMA_IRQHandler+0x6c8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x516>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a6e      	ldr	r2, [pc, #440]	; (800308c <HAL_DMA_IRQHandler+0x6cc>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d10a      	bne.n	8002eec <HAL_DMA_IRQHandler+0x52c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf14      	ite	ne
 8002ee4:	2301      	movne	r3, #1
 8002ee6:	2300      	moveq	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e009      	b.n	8002f00 <HAL_DMA_IRQHandler+0x540>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bf14      	ite	ne
 8002efa:	2301      	movne	r3, #1
 8002efc:	2300      	moveq	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d03e      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d018      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d108      	bne.n	8002f42 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d024      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4798      	blx	r3
 8002f40:	e01f      	b.n	8002f82 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01b      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	4798      	blx	r3
 8002f52:	e016      	b.n	8002f82 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d107      	bne.n	8002f72 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0208 	bic.w	r2, r2, #8
 8002f70:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 8110 	beq.w	80031b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a2c      	ldr	r2, [pc, #176]	; (8003050 <HAL_DMA_IRQHandler+0x690>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d04a      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2b      	ldr	r2, [pc, #172]	; (8003054 <HAL_DMA_IRQHandler+0x694>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d045      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a29      	ldr	r2, [pc, #164]	; (8003058 <HAL_DMA_IRQHandler+0x698>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d040      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a28      	ldr	r2, [pc, #160]	; (800305c <HAL_DMA_IRQHandler+0x69c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d03b      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a26      	ldr	r2, [pc, #152]	; (8003060 <HAL_DMA_IRQHandler+0x6a0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d036      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a25      	ldr	r2, [pc, #148]	; (8003064 <HAL_DMA_IRQHandler+0x6a4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d031      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a23      	ldr	r2, [pc, #140]	; (8003068 <HAL_DMA_IRQHandler+0x6a8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d02c      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a22      	ldr	r2, [pc, #136]	; (800306c <HAL_DMA_IRQHandler+0x6ac>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d027      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a20      	ldr	r2, [pc, #128]	; (8003070 <HAL_DMA_IRQHandler+0x6b0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d022      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1f      	ldr	r2, [pc, #124]	; (8003074 <HAL_DMA_IRQHandler+0x6b4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d01d      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <HAL_DMA_IRQHandler+0x6b8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d018      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1c      	ldr	r2, [pc, #112]	; (800307c <HAL_DMA_IRQHandler+0x6bc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d013      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1a      	ldr	r2, [pc, #104]	; (8003080 <HAL_DMA_IRQHandler+0x6c0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00e      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a19      	ldr	r2, [pc, #100]	; (8003084 <HAL_DMA_IRQHandler+0x6c4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d009      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a17      	ldr	r2, [pc, #92]	; (8003088 <HAL_DMA_IRQHandler+0x6c8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <HAL_DMA_IRQHandler+0x678>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a16      	ldr	r2, [pc, #88]	; (800308c <HAL_DMA_IRQHandler+0x6cc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d12b      	bne.n	8003090 <HAL_DMA_IRQHandler+0x6d0>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf14      	ite	ne
 8003046:	2301      	movne	r3, #1
 8003048:	2300      	moveq	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	e02a      	b.n	80030a4 <HAL_DMA_IRQHandler+0x6e4>
 800304e:	bf00      	nop
 8003050:	40020010 	.word	0x40020010
 8003054:	40020028 	.word	0x40020028
 8003058:	40020040 	.word	0x40020040
 800305c:	40020058 	.word	0x40020058
 8003060:	40020070 	.word	0x40020070
 8003064:	40020088 	.word	0x40020088
 8003068:	400200a0 	.word	0x400200a0
 800306c:	400200b8 	.word	0x400200b8
 8003070:	40020410 	.word	0x40020410
 8003074:	40020428 	.word	0x40020428
 8003078:	40020440 	.word	0x40020440
 800307c:	40020458 	.word	0x40020458
 8003080:	40020470 	.word	0x40020470
 8003084:	40020488 	.word	0x40020488
 8003088:	400204a0 	.word	0x400204a0
 800308c:	400204b8 	.word	0x400204b8
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	bf14      	ite	ne
 800309e:	2301      	movne	r3, #1
 80030a0:	2300      	moveq	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8087 	beq.w	80031b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2220      	movs	r2, #32
 80030b4:	409a      	lsls	r2, r3
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d139      	bne.n	800313a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0216 	bic.w	r2, r2, #22
 80030d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_DMA_IRQHandler+0x736>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d007      	beq.n	8003106 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0208 	bic.w	r2, r2, #8
 8003104:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	223f      	movs	r2, #63	; 0x3f
 8003110:	409a      	lsls	r2, r3
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8382 	beq.w	8003834 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	4798      	blx	r3
          }
          return;
 8003138:	e37c      	b.n	8003834 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d018      	beq.n	800317a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d108      	bne.n	8003168 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	2b00      	cmp	r3, #0
 800315c:	d02c      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	4798      	blx	r3
 8003166:	e027      	b.n	80031b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d023      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
 8003178:	e01e      	b.n	80031b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10f      	bne.n	80031a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0210 	bic.w	r2, r2, #16
 8003196:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 833e 	beq.w	800383e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 8088 	beq.w	80032e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2204      	movs	r2, #4
 80031d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a89      	ldr	r2, [pc, #548]	; (8003404 <HAL_DMA_IRQHandler+0xa44>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d04a      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a88      	ldr	r2, [pc, #544]	; (8003408 <HAL_DMA_IRQHandler+0xa48>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d045      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a86      	ldr	r2, [pc, #536]	; (800340c <HAL_DMA_IRQHandler+0xa4c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d040      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a85      	ldr	r2, [pc, #532]	; (8003410 <HAL_DMA_IRQHandler+0xa50>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d03b      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a83      	ldr	r2, [pc, #524]	; (8003414 <HAL_DMA_IRQHandler+0xa54>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d036      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a82      	ldr	r2, [pc, #520]	; (8003418 <HAL_DMA_IRQHandler+0xa58>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d031      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a80      	ldr	r2, [pc, #512]	; (800341c <HAL_DMA_IRQHandler+0xa5c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d02c      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a7f      	ldr	r2, [pc, #508]	; (8003420 <HAL_DMA_IRQHandler+0xa60>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d027      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a7d      	ldr	r2, [pc, #500]	; (8003424 <HAL_DMA_IRQHandler+0xa64>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d022      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a7c      	ldr	r2, [pc, #496]	; (8003428 <HAL_DMA_IRQHandler+0xa68>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d01d      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a7a      	ldr	r2, [pc, #488]	; (800342c <HAL_DMA_IRQHandler+0xa6c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d018      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a79      	ldr	r2, [pc, #484]	; (8003430 <HAL_DMA_IRQHandler+0xa70>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d013      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a77      	ldr	r2, [pc, #476]	; (8003434 <HAL_DMA_IRQHandler+0xa74>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00e      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a76      	ldr	r2, [pc, #472]	; (8003438 <HAL_DMA_IRQHandler+0xa78>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d009      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a74      	ldr	r2, [pc, #464]	; (800343c <HAL_DMA_IRQHandler+0xa7c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d004      	beq.n	8003278 <HAL_DMA_IRQHandler+0x8b8>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a73      	ldr	r2, [pc, #460]	; (8003440 <HAL_DMA_IRQHandler+0xa80>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d108      	bne.n	800328a <HAL_DMA_IRQHandler+0x8ca>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0201 	bic.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e007      	b.n	800329a <HAL_DMA_IRQHandler+0x8da>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3301      	adds	r3, #1
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d307      	bcc.n	80032b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f2      	bne.n	800329a <HAL_DMA_IRQHandler+0x8da>
 80032b4:	e000      	b.n	80032b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80032b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d004      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2203      	movs	r2, #3
 80032ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80032ce:	e003      	b.n	80032d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 82aa 	beq.w	800383e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
 80032f2:	e2a4      	b.n	800383e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a52      	ldr	r2, [pc, #328]	; (8003444 <HAL_DMA_IRQHandler+0xa84>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d04a      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a51      	ldr	r2, [pc, #324]	; (8003448 <HAL_DMA_IRQHandler+0xa88>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d045      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a4f      	ldr	r2, [pc, #316]	; (800344c <HAL_DMA_IRQHandler+0xa8c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d040      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a4e      	ldr	r2, [pc, #312]	; (8003450 <HAL_DMA_IRQHandler+0xa90>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d03b      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a4c      	ldr	r2, [pc, #304]	; (8003454 <HAL_DMA_IRQHandler+0xa94>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d036      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a4b      	ldr	r2, [pc, #300]	; (8003458 <HAL_DMA_IRQHandler+0xa98>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d031      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a49      	ldr	r2, [pc, #292]	; (800345c <HAL_DMA_IRQHandler+0xa9c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d02c      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a48      	ldr	r2, [pc, #288]	; (8003460 <HAL_DMA_IRQHandler+0xaa0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d027      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a46      	ldr	r2, [pc, #280]	; (8003464 <HAL_DMA_IRQHandler+0xaa4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d022      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a45      	ldr	r2, [pc, #276]	; (8003468 <HAL_DMA_IRQHandler+0xaa8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d01d      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a43      	ldr	r2, [pc, #268]	; (800346c <HAL_DMA_IRQHandler+0xaac>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d018      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a42      	ldr	r2, [pc, #264]	; (8003470 <HAL_DMA_IRQHandler+0xab0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d013      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a40      	ldr	r2, [pc, #256]	; (8003474 <HAL_DMA_IRQHandler+0xab4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00e      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a3f      	ldr	r2, [pc, #252]	; (8003478 <HAL_DMA_IRQHandler+0xab8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d009      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a3d      	ldr	r2, [pc, #244]	; (800347c <HAL_DMA_IRQHandler+0xabc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d004      	beq.n	8003394 <HAL_DMA_IRQHandler+0x9d4>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a3c      	ldr	r2, [pc, #240]	; (8003480 <HAL_DMA_IRQHandler+0xac0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d101      	bne.n	8003398 <HAL_DMA_IRQHandler+0x9d8>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_DMA_IRQHandler+0x9da>
 8003398:	2300      	movs	r3, #0
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 824f 	beq.w	800383e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2204      	movs	r2, #4
 80033b2:	409a      	lsls	r2, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80dd 	beq.w	8003578 <HAL_DMA_IRQHandler+0xbb8>
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80d7 	beq.w	8003578 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	2204      	movs	r2, #4
 80033d4:	409a      	lsls	r2, r3
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d059      	beq.n	8003498 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d14a      	bne.n	8003484 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8220 	beq.w	8003838 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003400:	e21a      	b.n	8003838 <HAL_DMA_IRQHandler+0xe78>
 8003402:	bf00      	nop
 8003404:	40020010 	.word	0x40020010
 8003408:	40020028 	.word	0x40020028
 800340c:	40020040 	.word	0x40020040
 8003410:	40020058 	.word	0x40020058
 8003414:	40020070 	.word	0x40020070
 8003418:	40020088 	.word	0x40020088
 800341c:	400200a0 	.word	0x400200a0
 8003420:	400200b8 	.word	0x400200b8
 8003424:	40020410 	.word	0x40020410
 8003428:	40020428 	.word	0x40020428
 800342c:	40020440 	.word	0x40020440
 8003430:	40020458 	.word	0x40020458
 8003434:	40020470 	.word	0x40020470
 8003438:	40020488 	.word	0x40020488
 800343c:	400204a0 	.word	0x400204a0
 8003440:	400204b8 	.word	0x400204b8
 8003444:	48022c08 	.word	0x48022c08
 8003448:	48022c1c 	.word	0x48022c1c
 800344c:	48022c30 	.word	0x48022c30
 8003450:	48022c44 	.word	0x48022c44
 8003454:	48022c58 	.word	0x48022c58
 8003458:	48022c6c 	.word	0x48022c6c
 800345c:	48022c80 	.word	0x48022c80
 8003460:	48022c94 	.word	0x48022c94
 8003464:	58025408 	.word	0x58025408
 8003468:	5802541c 	.word	0x5802541c
 800346c:	58025430 	.word	0x58025430
 8003470:	58025444 	.word	0x58025444
 8003474:	58025458 	.word	0x58025458
 8003478:	5802546c 	.word	0x5802546c
 800347c:	58025480 	.word	0x58025480
 8003480:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 81d5 	beq.w	8003838 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003496:	e1cf      	b.n	8003838 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d160      	bne.n	8003564 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7f      	ldr	r2, [pc, #508]	; (80036a4 <HAL_DMA_IRQHandler+0xce4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d04a      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a7d      	ldr	r2, [pc, #500]	; (80036a8 <HAL_DMA_IRQHandler+0xce8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d045      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a7c      	ldr	r2, [pc, #496]	; (80036ac <HAL_DMA_IRQHandler+0xcec>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d040      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a7a      	ldr	r2, [pc, #488]	; (80036b0 <HAL_DMA_IRQHandler+0xcf0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d03b      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a79      	ldr	r2, [pc, #484]	; (80036b4 <HAL_DMA_IRQHandler+0xcf4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d036      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a77      	ldr	r2, [pc, #476]	; (80036b8 <HAL_DMA_IRQHandler+0xcf8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d031      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a76      	ldr	r2, [pc, #472]	; (80036bc <HAL_DMA_IRQHandler+0xcfc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d02c      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a74      	ldr	r2, [pc, #464]	; (80036c0 <HAL_DMA_IRQHandler+0xd00>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d027      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a73      	ldr	r2, [pc, #460]	; (80036c4 <HAL_DMA_IRQHandler+0xd04>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d022      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a71      	ldr	r2, [pc, #452]	; (80036c8 <HAL_DMA_IRQHandler+0xd08>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01d      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a70      	ldr	r2, [pc, #448]	; (80036cc <HAL_DMA_IRQHandler+0xd0c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d018      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a6e      	ldr	r2, [pc, #440]	; (80036d0 <HAL_DMA_IRQHandler+0xd10>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a6d      	ldr	r2, [pc, #436]	; (80036d4 <HAL_DMA_IRQHandler+0xd14>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00e      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a6b      	ldr	r2, [pc, #428]	; (80036d8 <HAL_DMA_IRQHandler+0xd18>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a6a      	ldr	r2, [pc, #424]	; (80036dc <HAL_DMA_IRQHandler+0xd1c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_DMA_IRQHandler+0xb82>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a68      	ldr	r2, [pc, #416]	; (80036e0 <HAL_DMA_IRQHandler+0xd20>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d108      	bne.n	8003554 <HAL_DMA_IRQHandler+0xb94>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0208 	bic.w	r2, r2, #8
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e007      	b.n	8003564 <HAL_DMA_IRQHandler+0xba4>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0204 	bic.w	r2, r2, #4
 8003562:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8165 	beq.w	8003838 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003576:	e15f      	b.n	8003838 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2202      	movs	r2, #2
 8003582:	409a      	lsls	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80c5 	beq.w	8003718 <HAL_DMA_IRQHandler+0xd58>
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80bf 	beq.w	8003718 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	2202      	movs	r2, #2
 80035a4:	409a      	lsls	r2, r3
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d018      	beq.n	80035e6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 813a 	beq.w	800383c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035d0:	e134      	b.n	800383c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8130 	beq.w	800383c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035e4:	e12a      	b.n	800383c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f040 8089 	bne.w	8003704 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2b      	ldr	r2, [pc, #172]	; (80036a4 <HAL_DMA_IRQHandler+0xce4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d04a      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a29      	ldr	r2, [pc, #164]	; (80036a8 <HAL_DMA_IRQHandler+0xce8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d045      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a28      	ldr	r2, [pc, #160]	; (80036ac <HAL_DMA_IRQHandler+0xcec>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d040      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <HAL_DMA_IRQHandler+0xcf0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d03b      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a25      	ldr	r2, [pc, #148]	; (80036b4 <HAL_DMA_IRQHandler+0xcf4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d036      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a23      	ldr	r2, [pc, #140]	; (80036b8 <HAL_DMA_IRQHandler+0xcf8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d031      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a22      	ldr	r2, [pc, #136]	; (80036bc <HAL_DMA_IRQHandler+0xcfc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d02c      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a20      	ldr	r2, [pc, #128]	; (80036c0 <HAL_DMA_IRQHandler+0xd00>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d027      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <HAL_DMA_IRQHandler+0xd04>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d022      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <HAL_DMA_IRQHandler+0xd08>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01d      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1c      	ldr	r2, [pc, #112]	; (80036cc <HAL_DMA_IRQHandler+0xd0c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d018      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1a      	ldr	r2, [pc, #104]	; (80036d0 <HAL_DMA_IRQHandler+0xd10>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a19      	ldr	r2, [pc, #100]	; (80036d4 <HAL_DMA_IRQHandler+0xd14>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00e      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <HAL_DMA_IRQHandler+0xd18>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d009      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a16      	ldr	r2, [pc, #88]	; (80036dc <HAL_DMA_IRQHandler+0xd1c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_DMA_IRQHandler+0xcd2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <HAL_DMA_IRQHandler+0xd20>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d128      	bne.n	80036e4 <HAL_DMA_IRQHandler+0xd24>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0214 	bic.w	r2, r2, #20
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e027      	b.n	80036f4 <HAL_DMA_IRQHandler+0xd34>
 80036a4:	40020010 	.word	0x40020010
 80036a8:	40020028 	.word	0x40020028
 80036ac:	40020040 	.word	0x40020040
 80036b0:	40020058 	.word	0x40020058
 80036b4:	40020070 	.word	0x40020070
 80036b8:	40020088 	.word	0x40020088
 80036bc:	400200a0 	.word	0x400200a0
 80036c0:	400200b8 	.word	0x400200b8
 80036c4:	40020410 	.word	0x40020410
 80036c8:	40020428 	.word	0x40020428
 80036cc:	40020440 	.word	0x40020440
 80036d0:	40020458 	.word	0x40020458
 80036d4:	40020470 	.word	0x40020470
 80036d8:	40020488 	.word	0x40020488
 80036dc:	400204a0 	.word	0x400204a0
 80036e0:	400204b8 	.word	0x400204b8
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 020a 	bic.w	r2, r2, #10
 80036f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 8097 	beq.w	800383c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003716:	e091      	b.n	800383c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	2208      	movs	r2, #8
 8003722:	409a      	lsls	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8088 	beq.w	800383e <HAL_DMA_IRQHandler+0xe7e>
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8082 	beq.w	800383e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a41      	ldr	r2, [pc, #260]	; (8003844 <HAL_DMA_IRQHandler+0xe84>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d04a      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a3f      	ldr	r2, [pc, #252]	; (8003848 <HAL_DMA_IRQHandler+0xe88>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d045      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a3e      	ldr	r2, [pc, #248]	; (800384c <HAL_DMA_IRQHandler+0xe8c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d040      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a3c      	ldr	r2, [pc, #240]	; (8003850 <HAL_DMA_IRQHandler+0xe90>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d03b      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a3b      	ldr	r2, [pc, #236]	; (8003854 <HAL_DMA_IRQHandler+0xe94>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d036      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a39      	ldr	r2, [pc, #228]	; (8003858 <HAL_DMA_IRQHandler+0xe98>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d031      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a38      	ldr	r2, [pc, #224]	; (800385c <HAL_DMA_IRQHandler+0xe9c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d02c      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a36      	ldr	r2, [pc, #216]	; (8003860 <HAL_DMA_IRQHandler+0xea0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d027      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a35      	ldr	r2, [pc, #212]	; (8003864 <HAL_DMA_IRQHandler+0xea4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d022      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a33      	ldr	r2, [pc, #204]	; (8003868 <HAL_DMA_IRQHandler+0xea8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01d      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a32      	ldr	r2, [pc, #200]	; (800386c <HAL_DMA_IRQHandler+0xeac>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d018      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a30      	ldr	r2, [pc, #192]	; (8003870 <HAL_DMA_IRQHandler+0xeb0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a2f      	ldr	r2, [pc, #188]	; (8003874 <HAL_DMA_IRQHandler+0xeb4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00e      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a2d      	ldr	r2, [pc, #180]	; (8003878 <HAL_DMA_IRQHandler+0xeb8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d009      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a2c      	ldr	r2, [pc, #176]	; (800387c <HAL_DMA_IRQHandler+0xebc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <HAL_DMA_IRQHandler+0xe1a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a2a      	ldr	r2, [pc, #168]	; (8003880 <HAL_DMA_IRQHandler+0xec0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d108      	bne.n	80037ec <HAL_DMA_IRQHandler+0xe2c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 021c 	bic.w	r2, r2, #28
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e007      	b.n	80037fc <HAL_DMA_IRQHandler+0xe3c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 020e 	bic.w	r2, r2, #14
 80037fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	2201      	movs	r2, #1
 8003806:	409a      	lsls	r2, r3
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
 8003832:	e004      	b.n	800383e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003834:	bf00      	nop
 8003836:	e002      	b.n	800383e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003838:	bf00      	nop
 800383a:	e000      	b.n	800383e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800383c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800383e:	3728      	adds	r7, #40	; 0x28
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40020010 	.word	0x40020010
 8003848:	40020028 	.word	0x40020028
 800384c:	40020040 	.word	0x40020040
 8003850:	40020058 	.word	0x40020058
 8003854:	40020070 	.word	0x40020070
 8003858:	40020088 	.word	0x40020088
 800385c:	400200a0 	.word	0x400200a0
 8003860:	400200b8 	.word	0x400200b8
 8003864:	40020410 	.word	0x40020410
 8003868:	40020428 	.word	0x40020428
 800386c:	40020440 	.word	0x40020440
 8003870:	40020458 	.word	0x40020458
 8003874:	40020470 	.word	0x40020470
 8003878:	40020488 	.word	0x40020488
 800387c:	400204a0 	.word	0x400204a0
 8003880:	400204b8 	.word	0x400204b8

08003884 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a42      	ldr	r2, [pc, #264]	; (800399c <DMA_CalcBaseAndBitshift+0x118>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d04a      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a41      	ldr	r2, [pc, #260]	; (80039a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d045      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a3f      	ldr	r2, [pc, #252]	; (80039a4 <DMA_CalcBaseAndBitshift+0x120>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d040      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a3e      	ldr	r2, [pc, #248]	; (80039a8 <DMA_CalcBaseAndBitshift+0x124>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d03b      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a3c      	ldr	r2, [pc, #240]	; (80039ac <DMA_CalcBaseAndBitshift+0x128>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d036      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a3b      	ldr	r2, [pc, #236]	; (80039b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d031      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a39      	ldr	r2, [pc, #228]	; (80039b4 <DMA_CalcBaseAndBitshift+0x130>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d02c      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a38      	ldr	r2, [pc, #224]	; (80039b8 <DMA_CalcBaseAndBitshift+0x134>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d027      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a36      	ldr	r2, [pc, #216]	; (80039bc <DMA_CalcBaseAndBitshift+0x138>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d022      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a35      	ldr	r2, [pc, #212]	; (80039c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d01d      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a33      	ldr	r2, [pc, #204]	; (80039c4 <DMA_CalcBaseAndBitshift+0x140>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d018      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a32      	ldr	r2, [pc, #200]	; (80039c8 <DMA_CalcBaseAndBitshift+0x144>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d013      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a30      	ldr	r2, [pc, #192]	; (80039cc <DMA_CalcBaseAndBitshift+0x148>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00e      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2f      	ldr	r2, [pc, #188]	; (80039d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d009      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2d      	ldr	r2, [pc, #180]	; (80039d4 <DMA_CalcBaseAndBitshift+0x150>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <DMA_CalcBaseAndBitshift+0xa8>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2c      	ldr	r2, [pc, #176]	; (80039d8 <DMA_CalcBaseAndBitshift+0x154>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <DMA_CalcBaseAndBitshift+0xac>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <DMA_CalcBaseAndBitshift+0xae>
 8003930:	2300      	movs	r3, #0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d024      	beq.n	8003980 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	3b10      	subs	r3, #16
 800393e:	4a27      	ldr	r2, [pc, #156]	; (80039dc <DMA_CalcBaseAndBitshift+0x158>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	4a24      	ldr	r2, [pc, #144]	; (80039e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003950:	5cd3      	ldrb	r3, [r2, r3]
 8003952:	461a      	mov	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b03      	cmp	r3, #3
 800395c:	d908      	bls.n	8003970 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	4b1f      	ldr	r3, [pc, #124]	; (80039e4 <DMA_CalcBaseAndBitshift+0x160>)
 8003966:	4013      	ands	r3, r2
 8003968:	1d1a      	adds	r2, r3, #4
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	659a      	str	r2, [r3, #88]	; 0x58
 800396e:	e00d      	b.n	800398c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <DMA_CalcBaseAndBitshift+0x160>)
 8003978:	4013      	ands	r3, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6593      	str	r3, [r2, #88]	; 0x58
 800397e:	e005      	b.n	800398c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40020010 	.word	0x40020010
 80039a0:	40020028 	.word	0x40020028
 80039a4:	40020040 	.word	0x40020040
 80039a8:	40020058 	.word	0x40020058
 80039ac:	40020070 	.word	0x40020070
 80039b0:	40020088 	.word	0x40020088
 80039b4:	400200a0 	.word	0x400200a0
 80039b8:	400200b8 	.word	0x400200b8
 80039bc:	40020410 	.word	0x40020410
 80039c0:	40020428 	.word	0x40020428
 80039c4:	40020440 	.word	0x40020440
 80039c8:	40020458 	.word	0x40020458
 80039cc:	40020470 	.word	0x40020470
 80039d0:	40020488 	.word	0x40020488
 80039d4:	400204a0 	.word	0x400204a0
 80039d8:	400204b8 	.word	0x400204b8
 80039dc:	aaaaaaab 	.word	0xaaaaaaab
 80039e0:	0800c9f0 	.word	0x0800c9f0
 80039e4:	fffffc00 	.word	0xfffffc00

080039e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d120      	bne.n	8003a3e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d858      	bhi.n	8003ab6 <DMA_CheckFifoParam+0xce>
 8003a04:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <DMA_CheckFifoParam+0x24>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003a1d 	.word	0x08003a1d
 8003a10:	08003a2f 	.word	0x08003a2f
 8003a14:	08003a1d 	.word	0x08003a1d
 8003a18:	08003ab7 	.word	0x08003ab7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d048      	beq.n	8003aba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a2c:	e045      	b.n	8003aba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a36:	d142      	bne.n	8003abe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a3c:	e03f      	b.n	8003abe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a46:	d123      	bne.n	8003a90 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d838      	bhi.n	8003ac2 <DMA_CheckFifoParam+0xda>
 8003a50:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <DMA_CheckFifoParam+0x70>)
 8003a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a56:	bf00      	nop
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a6f 	.word	0x08003a6f
 8003a60:	08003a69 	.word	0x08003a69
 8003a64:	08003a81 	.word	0x08003a81
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
        break;
 8003a6c:	e030      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d025      	beq.n	8003ac6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a7e:	e022      	b.n	8003ac6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a88:	d11f      	bne.n	8003aca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a8e:	e01c      	b.n	8003aca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d902      	bls.n	8003a9e <DMA_CheckFifoParam+0xb6>
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d003      	beq.n	8003aa4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003a9c:	e018      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	73fb      	strb	r3, [r7, #15]
        break;
 8003aa2:	e015      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00e      	beq.n	8003ace <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8003ab4:	e00b      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
        break;
 8003ab6:	bf00      	nop
 8003ab8:	e00a      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
        break;
 8003aba:	bf00      	nop
 8003abc:	e008      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
        break;
 8003abe:	bf00      	nop
 8003ac0:	e006      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
        break;
 8003ac2:	bf00      	nop
 8003ac4:	e004      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
        break;
 8003ac6:	bf00      	nop
 8003ac8:	e002      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
        break;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
    break;
 8003ace:	bf00      	nop
    }
  }

  return status;
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop

08003ae0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a38      	ldr	r2, [pc, #224]	; (8003bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d022      	beq.n	8003b3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a36      	ldr	r2, [pc, #216]	; (8003bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01d      	beq.n	8003b3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a35      	ldr	r2, [pc, #212]	; (8003bdc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d018      	beq.n	8003b3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a33      	ldr	r2, [pc, #204]	; (8003be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a32      	ldr	r2, [pc, #200]	; (8003be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00e      	beq.n	8003b3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a30      	ldr	r2, [pc, #192]	; (8003be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d009      	beq.n	8003b3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2f      	ldr	r2, [pc, #188]	; (8003bec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d004      	beq.n	8003b3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01a      	beq.n	8003b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	3b08      	subs	r3, #8
 8003b50:	4a28      	ldr	r2, [pc, #160]	; (8003bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4b26      	ldr	r3, [pc, #152]	; (8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	461a      	mov	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a24      	ldr	r2, [pc, #144]	; (8003bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003b6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	2201      	movs	r2, #1
 8003b76:	409a      	lsls	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003b7c:	e024      	b.n	8003bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	3b10      	subs	r3, #16
 8003b86:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4a1c      	ldr	r2, [pc, #112]	; (8003c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d806      	bhi.n	8003ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d902      	bls.n	8003ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	461a      	mov	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a16      	ldr	r2, [pc, #88]	; (8003c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003bb8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	58025408 	.word	0x58025408
 8003bd8:	5802541c 	.word	0x5802541c
 8003bdc:	58025430 	.word	0x58025430
 8003be0:	58025444 	.word	0x58025444
 8003be4:	58025458 	.word	0x58025458
 8003be8:	5802546c 	.word	0x5802546c
 8003bec:	58025480 	.word	0x58025480
 8003bf0:	58025494 	.word	0x58025494
 8003bf4:	cccccccd 	.word	0xcccccccd
 8003bf8:	16009600 	.word	0x16009600
 8003bfc:	58025880 	.word	0x58025880
 8003c00:	aaaaaaab 	.word	0xaaaaaaab
 8003c04:	400204b8 	.word	0x400204b8
 8003c08:	4002040f 	.word	0x4002040f
 8003c0c:	10008200 	.word	0x10008200
 8003c10:	40020880 	.word	0x40020880

08003c14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d04a      	beq.n	8003cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d847      	bhi.n	8003cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a25      	ldr	r2, [pc, #148]	; (8003ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d022      	beq.n	8003c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a24      	ldr	r2, [pc, #144]	; (8003cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d01d      	beq.n	8003c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d018      	beq.n	8003c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a21      	ldr	r2, [pc, #132]	; (8003cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d013      	beq.n	8003c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00e      	beq.n	8003c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1e      	ldr	r2, [pc, #120]	; (8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d009      	beq.n	8003c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1c      	ldr	r2, [pc, #112]	; (8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d004      	beq.n	8003c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d101      	bne.n	8003c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003c84:	2300      	movs	r3, #0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4b17      	ldr	r3, [pc, #92]	; (8003cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	461a      	mov	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003c9c:	671a      	str	r2, [r3, #112]	; 0x70
 8003c9e:	e009      	b.n	8003cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	461a      	mov	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003cb2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	2201      	movs	r2, #1
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	58025408 	.word	0x58025408
 8003cd0:	5802541c 	.word	0x5802541c
 8003cd4:	58025430 	.word	0x58025430
 8003cd8:	58025444 	.word	0x58025444
 8003cdc:	58025458 	.word	0x58025458
 8003ce0:	5802546c 	.word	0x5802546c
 8003ce4:	58025480 	.word	0x58025480
 8003ce8:	58025494 	.word	0x58025494
 8003cec:	1600963f 	.word	0x1600963f
 8003cf0:	58025940 	.word	0x58025940
 8003cf4:	1000823f 	.word	0x1000823f
 8003cf8:	40020940 	.word	0x40020940

08003cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b089      	sub	sp, #36	; 0x24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003d0a:	4b89      	ldr	r3, [pc, #548]	; (8003f30 <HAL_GPIO_Init+0x234>)
 8003d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d0e:	e194      	b.n	800403a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2101      	movs	r1, #1
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8186 	beq.w	8004034 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d005      	beq.n	8003d40 <HAL_GPIO_Init+0x44>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d130      	bne.n	8003da2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d76:	2201      	movs	r2, #1
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	f003 0201 	and.w	r2, r3, #1
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d017      	beq.n	8003dde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d123      	bne.n	8003e32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	08da      	lsrs	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3208      	adds	r2, #8
 8003df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	220f      	movs	r2, #15
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	08da      	lsrs	r2, r3, #3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3208      	adds	r2, #8
 8003e2c:	69b9      	ldr	r1, [r7, #24]
 8003e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43db      	mvns	r3, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4013      	ands	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 0203 	and.w	r2, r3, #3
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 80e0 	beq.w	8004034 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e74:	4b2f      	ldr	r3, [pc, #188]	; (8003f34 <HAL_GPIO_Init+0x238>)
 8003e76:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003e7a:	4a2e      	ldr	r2, [pc, #184]	; (8003f34 <HAL_GPIO_Init+0x238>)
 8003e7c:	f043 0302 	orr.w	r3, r3, #2
 8003e80:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003e84:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <HAL_GPIO_Init+0x238>)
 8003e86:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e92:	4a29      	ldr	r2, [pc, #164]	; (8003f38 <HAL_GPIO_Init+0x23c>)
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	089b      	lsrs	r3, r3, #2
 8003e98:	3302      	adds	r3, #2
 8003e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	220f      	movs	r2, #15
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a20      	ldr	r2, [pc, #128]	; (8003f3c <HAL_GPIO_Init+0x240>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d052      	beq.n	8003f64 <HAL_GPIO_Init+0x268>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <HAL_GPIO_Init+0x244>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d031      	beq.n	8003f2a <HAL_GPIO_Init+0x22e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a1e      	ldr	r2, [pc, #120]	; (8003f44 <HAL_GPIO_Init+0x248>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d02b      	beq.n	8003f26 <HAL_GPIO_Init+0x22a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <HAL_GPIO_Init+0x24c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d025      	beq.n	8003f22 <HAL_GPIO_Init+0x226>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <HAL_GPIO_Init+0x250>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01f      	beq.n	8003f1e <HAL_GPIO_Init+0x222>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <HAL_GPIO_Init+0x254>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d019      	beq.n	8003f1a <HAL_GPIO_Init+0x21e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <HAL_GPIO_Init+0x258>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <HAL_GPIO_Init+0x21a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a19      	ldr	r2, [pc, #100]	; (8003f58 <HAL_GPIO_Init+0x25c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00d      	beq.n	8003f12 <HAL_GPIO_Init+0x216>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <HAL_GPIO_Init+0x260>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <HAL_GPIO_Init+0x212>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a17      	ldr	r2, [pc, #92]	; (8003f60 <HAL_GPIO_Init+0x264>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d101      	bne.n	8003f0a <HAL_GPIO_Init+0x20e>
 8003f06:	2309      	movs	r3, #9
 8003f08:	e02d      	b.n	8003f66 <HAL_GPIO_Init+0x26a>
 8003f0a:	230a      	movs	r3, #10
 8003f0c:	e02b      	b.n	8003f66 <HAL_GPIO_Init+0x26a>
 8003f0e:	2308      	movs	r3, #8
 8003f10:	e029      	b.n	8003f66 <HAL_GPIO_Init+0x26a>
 8003f12:	2307      	movs	r3, #7
 8003f14:	e027      	b.n	8003f66 <HAL_GPIO_Init+0x26a>
 8003f16:	2306      	movs	r3, #6
 8003f18:	e025      	b.n	8003f66 <HAL_GPIO_Init+0x26a>
 8003f1a:	2305      	movs	r3, #5
 8003f1c:	e023      	b.n	8003f66 <HAL_GPIO_Init+0x26a>
 8003f1e:	2304      	movs	r3, #4
 8003f20:	e021      	b.n	8003f66 <HAL_GPIO_Init+0x26a>
 8003f22:	2303      	movs	r3, #3
 8003f24:	e01f      	b.n	8003f66 <HAL_GPIO_Init+0x26a>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e01d      	b.n	8003f66 <HAL_GPIO_Init+0x26a>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e01b      	b.n	8003f66 <HAL_GPIO_Init+0x26a>
 8003f2e:	bf00      	nop
 8003f30:	58000080 	.word	0x58000080
 8003f34:	58024400 	.word	0x58024400
 8003f38:	58000400 	.word	0x58000400
 8003f3c:	58020000 	.word	0x58020000
 8003f40:	58020400 	.word	0x58020400
 8003f44:	58020800 	.word	0x58020800
 8003f48:	58020c00 	.word	0x58020c00
 8003f4c:	58021000 	.word	0x58021000
 8003f50:	58021400 	.word	0x58021400
 8003f54:	58021800 	.word	0x58021800
 8003f58:	58021c00 	.word	0x58021c00
 8003f5c:	58022000 	.word	0x58022000
 8003f60:	58022400 	.word	0x58022400
 8003f64:	2300      	movs	r3, #0
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	f002 0203 	and.w	r2, r2, #3
 8003f6c:	0092      	lsls	r2, r2, #2
 8003f6e:	4093      	lsls	r3, r2
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f76:	4938      	ldr	r1, [pc, #224]	; (8004058 <HAL_GPIO_Init+0x35c>)
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	089b      	lsrs	r3, r3, #2
 8003f7c:	3302      	adds	r3, #2
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4013      	ands	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	43db      	mvns	r3, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4013      	ands	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	3301      	adds	r3, #1
 8004038:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	f47f ae63 	bne.w	8003d10 <HAL_GPIO_Init+0x14>
  }
}
 800404a:	bf00      	nop
 800404c:	bf00      	nop
 800404e:	3724      	adds	r7, #36	; 0x24
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	58000400 	.word	0x58000400

0800405c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	887b      	ldrh	r3, [r7, #2]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
 8004078:	e001      	b.n	800407e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800407a:	2300      	movs	r3, #0
 800407c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	807b      	strh	r3, [r7, #2]
 8004098:	4613      	mov	r3, r2
 800409a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800409c:	787b      	ldrb	r3, [r7, #1]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040a2:	887a      	ldrh	r2, [r7, #2]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80040a8:	e003      	b.n	80040b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	041a      	lsls	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	619a      	str	r2, [r3, #24]
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	460b      	mov	r3, r1
 80040c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040d0:	887a      	ldrh	r2, [r7, #2]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4013      	ands	r3, r2
 80040d6:	041a      	lsls	r2, r3, #16
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	43d9      	mvns	r1, r3
 80040dc:	887b      	ldrh	r3, [r7, #2]
 80040de:	400b      	ands	r3, r1
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	619a      	str	r2, [r3, #24]
}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80040fc:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <HAL_PWREx_ConfigSupply+0xb0>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	2b06      	cmp	r3, #6
 8004106:	d00a      	beq.n	800411e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004108:	4b26      	ldr	r3, [pc, #152]	; (80041a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	429a      	cmp	r2, r3
 8004114:	d001      	beq.n	800411a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e040      	b.n	800419c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	e03e      	b.n	800419c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800411e:	4b21      	ldr	r3, [pc, #132]	; (80041a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004126:	491f      	ldr	r1, [pc, #124]	; (80041a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4313      	orrs	r3, r2
 800412c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800412e:	f7fd ff77 	bl	8002020 <HAL_GetTick>
 8004132:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004134:	e009      	b.n	800414a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004136:	f7fd ff73 	bl	8002020 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004144:	d901      	bls.n	800414a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e028      	b.n	800419c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800414a:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004156:	d1ee      	bne.n	8004136 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b1e      	cmp	r3, #30
 800415c:	d008      	beq.n	8004170 <HAL_PWREx_ConfigSupply+0x7c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b2e      	cmp	r3, #46	; 0x2e
 8004162:	d005      	beq.n	8004170 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b1d      	cmp	r3, #29
 8004168:	d002      	beq.n	8004170 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b2d      	cmp	r3, #45	; 0x2d
 800416e:	d114      	bne.n	800419a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004170:	f7fd ff56 	bl	8002020 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004176:	e009      	b.n	800418c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004178:	f7fd ff52 	bl	8002020 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004186:	d901      	bls.n	800418c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e007      	b.n	800419c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004198:	d1ee      	bne.n	8004178 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	58024800 	.word	0x58024800

080041a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08c      	sub	sp, #48	; 0x30
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e3f4      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 80b3 	beq.w	800432e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041c8:	4b95      	ldr	r3, [pc, #596]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041d2:	4b93      	ldr	r3, [pc, #588]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041da:	2b10      	cmp	r3, #16
 80041dc:	d007      	beq.n	80041ee <HAL_RCC_OscConfig+0x46>
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	2b18      	cmp	r3, #24
 80041e2:	d112      	bne.n	800420a <HAL_RCC_OscConfig+0x62>
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d10d      	bne.n	800420a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ee:	4b8c      	ldr	r3, [pc, #560]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 8098 	beq.w	800432c <HAL_RCC_OscConfig+0x184>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f040 8093 	bne.w	800432c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e3cc      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004212:	d106      	bne.n	8004222 <HAL_RCC_OscConfig+0x7a>
 8004214:	4b82      	ldr	r3, [pc, #520]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a81      	ldr	r2, [pc, #516]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 800421a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	e058      	b.n	80042d4 <HAL_RCC_OscConfig+0x12c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d112      	bne.n	8004250 <HAL_RCC_OscConfig+0xa8>
 800422a:	4b7d      	ldr	r3, [pc, #500]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a7c      	ldr	r2, [pc, #496]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b7a      	ldr	r3, [pc, #488]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a79      	ldr	r2, [pc, #484]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 800423c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	4b77      	ldr	r3, [pc, #476]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a76      	ldr	r2, [pc, #472]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e041      	b.n	80042d4 <HAL_RCC_OscConfig+0x12c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004258:	d112      	bne.n	8004280 <HAL_RCC_OscConfig+0xd8>
 800425a:	4b71      	ldr	r3, [pc, #452]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a70      	ldr	r2, [pc, #448]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	4b6e      	ldr	r3, [pc, #440]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a6d      	ldr	r2, [pc, #436]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 800426c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	4b6b      	ldr	r3, [pc, #428]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a6a      	ldr	r2, [pc, #424]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e029      	b.n	80042d4 <HAL_RCC_OscConfig+0x12c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004288:	d112      	bne.n	80042b0 <HAL_RCC_OscConfig+0x108>
 800428a:	4b65      	ldr	r3, [pc, #404]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a64      	ldr	r2, [pc, #400]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4b62      	ldr	r3, [pc, #392]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a61      	ldr	r2, [pc, #388]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 800429c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	4b5f      	ldr	r3, [pc, #380]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a5e      	ldr	r2, [pc, #376]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80042a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e011      	b.n	80042d4 <HAL_RCC_OscConfig+0x12c>
 80042b0:	4b5b      	ldr	r3, [pc, #364]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a5a      	ldr	r2, [pc, #360]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80042b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	4b58      	ldr	r3, [pc, #352]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a57      	ldr	r2, [pc, #348]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80042c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	4b55      	ldr	r3, [pc, #340]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a54      	ldr	r2, [pc, #336]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80042ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80042d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d013      	beq.n	8004304 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fd fea0 	bl	8002020 <HAL_GetTick>
 80042e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fd fe9c 	bl	8002020 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e356      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042f6:	4b4a      	ldr	r3, [pc, #296]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x13c>
 8004302:	e014      	b.n	800432e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fd fe8c 	bl	8002020 <HAL_GetTick>
 8004308:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800430c:	f7fd fe88 	bl	8002020 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b64      	cmp	r3, #100	; 0x64
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e342      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800431e:	4b40      	ldr	r3, [pc, #256]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x164>
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 808d 	beq.w	8004456 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800433c:	4b38      	ldr	r3, [pc, #224]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004344:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004346:	4b36      	ldr	r3, [pc, #216]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <HAL_RCC_OscConfig+0x1ba>
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	2b18      	cmp	r3, #24
 8004356:	d137      	bne.n	80043c8 <HAL_RCC_OscConfig+0x220>
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d132      	bne.n	80043c8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004362:	4b2f      	ldr	r3, [pc, #188]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <HAL_RCC_OscConfig+0x1d2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e314      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800437a:	4b29      	ldr	r3, [pc, #164]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 0219 	bic.w	r2, r3, #25
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4926      	ldr	r1, [pc, #152]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004388:	4313      	orrs	r3, r2
 800438a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800438c:	f7fd fe48 	bl	8002020 <HAL_GetTick>
 8004390:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004394:	f7fd fe44 	bl	8002020 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e2fe      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043a6:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b2:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	061b      	lsls	r3, r3, #24
 80043c0:	4917      	ldr	r1, [pc, #92]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043c6:	e046      	b.n	8004456 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d029      	beq.n	8004424 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f023 0219 	bic.w	r2, r3, #25
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4910      	ldr	r1, [pc, #64]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e2:	f7fd fe1d 	bl	8002020 <HAL_GetTick>
 80043e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ea:	f7fd fe19 	bl	8002020 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e2d3      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043fc:	4b08      	ldr	r3, [pc, #32]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	4902      	ldr	r1, [pc, #8]	; (8004420 <HAL_RCC_OscConfig+0x278>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
 800441c:	e01b      	b.n	8004456 <HAL_RCC_OscConfig+0x2ae>
 800441e:	bf00      	nop
 8004420:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004424:	4b97      	ldr	r3, [pc, #604]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a96      	ldr	r2, [pc, #600]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fd fdf6 	bl	8002020 <HAL_GetTick>
 8004434:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004438:	f7fd fdf2 	bl	8002020 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e2ac      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800444a:	4b8e      	ldr	r3, [pc, #568]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b00      	cmp	r3, #0
 8004460:	d06a      	beq.n	8004538 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004462:	4b88      	ldr	r3, [pc, #544]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800446a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800446c:	4b85      	ldr	r3, [pc, #532]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b08      	cmp	r3, #8
 8004476:	d007      	beq.n	8004488 <HAL_RCC_OscConfig+0x2e0>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b18      	cmp	r3, #24
 800447c:	d11b      	bne.n	80044b6 <HAL_RCC_OscConfig+0x30e>
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d116      	bne.n	80044b6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004488:	4b7e      	ldr	r3, [pc, #504]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_RCC_OscConfig+0x2f8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	2b80      	cmp	r3, #128	; 0x80
 800449a:	d001      	beq.n	80044a0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e281      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044a0:	4b78      	ldr	r3, [pc, #480]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	061b      	lsls	r3, r3, #24
 80044ae:	4975      	ldr	r1, [pc, #468]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044b4:	e040      	b.n	8004538 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d023      	beq.n	8004506 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80044be:	4b71      	ldr	r3, [pc, #452]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a70      	ldr	r2, [pc, #448]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 80044c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ca:	f7fd fda9 	bl	8002020 <HAL_GetTick>
 80044ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80044d2:	f7fd fda5 	bl	8002020 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e25f      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044e4:	4b67      	ldr	r3, [pc, #412]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044f0:	4b64      	ldr	r3, [pc, #400]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	061b      	lsls	r3, r3, #24
 80044fe:	4961      	ldr	r1, [pc, #388]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 8004500:	4313      	orrs	r3, r2
 8004502:	60cb      	str	r3, [r1, #12]
 8004504:	e018      	b.n	8004538 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004506:	4b5f      	ldr	r3, [pc, #380]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a5e      	ldr	r2, [pc, #376]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 800450c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7fd fd85 	bl	8002020 <HAL_GetTick>
 8004516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800451a:	f7fd fd81 	bl	8002020 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e23b      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800452c:	4b55      	ldr	r3, [pc, #340]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f0      	bne.n	800451a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b00      	cmp	r3, #0
 8004542:	d036      	beq.n	80045b2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d019      	beq.n	8004580 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800454c:	4b4d      	ldr	r3, [pc, #308]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 800454e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004550:	4a4c      	ldr	r2, [pc, #304]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fd fd62 	bl	8002020 <HAL_GetTick>
 800455c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004560:	f7fd fd5e 	bl	8002020 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e218      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004572:	4b44      	ldr	r3, [pc, #272]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 8004574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x3b8>
 800457e:	e018      	b.n	80045b2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004580:	4b40      	ldr	r3, [pc, #256]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 8004582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004584:	4a3f      	ldr	r2, [pc, #252]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fd fd48 	bl	8002020 <HAL_GetTick>
 8004590:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004594:	f7fd fd44 	bl	8002020 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e1fe      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045a6:	4b37      	ldr	r3, [pc, #220]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 80045a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d036      	beq.n	800462c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d019      	beq.n	80045fa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045c6:	4b2f      	ldr	r3, [pc, #188]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a2e      	ldr	r2, [pc, #184]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 80045cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045d2:	f7fd fd25 	bl	8002020 <HAL_GetTick>
 80045d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80045da:	f7fd fd21 	bl	8002020 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e1db      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045ec:	4b25      	ldr	r3, [pc, #148]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x432>
 80045f8:	e018      	b.n	800462c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045fa:	4b22      	ldr	r3, [pc, #136]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a21      	ldr	r2, [pc, #132]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 8004600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004604:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004606:	f7fd fd0b 	bl	8002020 <HAL_GetTick>
 800460a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800460e:	f7fd fd07 	bl	8002020 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e1c1      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004620:	4b18      	ldr	r3, [pc, #96]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f0      	bne.n	800460e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80af 	beq.w	8004798 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800463a:	4b13      	ldr	r3, [pc, #76]	; (8004688 <HAL_RCC_OscConfig+0x4e0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a12      	ldr	r2, [pc, #72]	; (8004688 <HAL_RCC_OscConfig+0x4e0>)
 8004640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004644:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004646:	f7fd fceb 	bl	8002020 <HAL_GetTick>
 800464a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800464e:	f7fd fce7 	bl	8002020 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b64      	cmp	r3, #100	; 0x64
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e1a1      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004660:	4b09      	ldr	r3, [pc, #36]	; (8004688 <HAL_RCC_OscConfig+0x4e0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d10b      	bne.n	800468c <HAL_RCC_OscConfig+0x4e4>
 8004674:	4b03      	ldr	r3, [pc, #12]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a02      	ldr	r2, [pc, #8]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
 8004680:	e05b      	b.n	800473a <HAL_RCC_OscConfig+0x592>
 8004682:	bf00      	nop
 8004684:	58024400 	.word	0x58024400
 8004688:	58024800 	.word	0x58024800
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d112      	bne.n	80046ba <HAL_RCC_OscConfig+0x512>
 8004694:	4b9d      	ldr	r3, [pc, #628]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	4a9c      	ldr	r2, [pc, #624]	; (800490c <HAL_RCC_OscConfig+0x764>)
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	6713      	str	r3, [r2, #112]	; 0x70
 80046a0:	4b9a      	ldr	r3, [pc, #616]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4a99      	ldr	r2, [pc, #612]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80046a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
 80046ac:	4b97      	ldr	r3, [pc, #604]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	4a96      	ldr	r2, [pc, #600]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80046b2:	f023 0304 	bic.w	r3, r3, #4
 80046b6:	6713      	str	r3, [r2, #112]	; 0x70
 80046b8:	e03f      	b.n	800473a <HAL_RCC_OscConfig+0x592>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d112      	bne.n	80046e8 <HAL_RCC_OscConfig+0x540>
 80046c2:	4b92      	ldr	r3, [pc, #584]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	4a91      	ldr	r2, [pc, #580]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80046c8:	f043 0304 	orr.w	r3, r3, #4
 80046cc:	6713      	str	r3, [r2, #112]	; 0x70
 80046ce:	4b8f      	ldr	r3, [pc, #572]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	4a8e      	ldr	r2, [pc, #568]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80046d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d8:	6713      	str	r3, [r2, #112]	; 0x70
 80046da:	4b8c      	ldr	r3, [pc, #560]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	4a8b      	ldr	r2, [pc, #556]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	6713      	str	r3, [r2, #112]	; 0x70
 80046e6:	e028      	b.n	800473a <HAL_RCC_OscConfig+0x592>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b85      	cmp	r3, #133	; 0x85
 80046ee:	d112      	bne.n	8004716 <HAL_RCC_OscConfig+0x56e>
 80046f0:	4b86      	ldr	r3, [pc, #536]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	4a85      	ldr	r2, [pc, #532]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80046f6:	f043 0304 	orr.w	r3, r3, #4
 80046fa:	6713      	str	r3, [r2, #112]	; 0x70
 80046fc:	4b83      	ldr	r3, [pc, #524]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	4a82      	ldr	r2, [pc, #520]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004706:	6713      	str	r3, [r2, #112]	; 0x70
 8004708:	4b80      	ldr	r3, [pc, #512]	; (800490c <HAL_RCC_OscConfig+0x764>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	4a7f      	ldr	r2, [pc, #508]	; (800490c <HAL_RCC_OscConfig+0x764>)
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	6713      	str	r3, [r2, #112]	; 0x70
 8004714:	e011      	b.n	800473a <HAL_RCC_OscConfig+0x592>
 8004716:	4b7d      	ldr	r3, [pc, #500]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	4a7c      	ldr	r2, [pc, #496]	; (800490c <HAL_RCC_OscConfig+0x764>)
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	6713      	str	r3, [r2, #112]	; 0x70
 8004722:	4b7a      	ldr	r3, [pc, #488]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	4a79      	ldr	r2, [pc, #484]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004728:	f023 0304 	bic.w	r3, r3, #4
 800472c:	6713      	str	r3, [r2, #112]	; 0x70
 800472e:	4b77      	ldr	r3, [pc, #476]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	4a76      	ldr	r2, [pc, #472]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004738:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d015      	beq.n	800476e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004742:	f7fd fc6d 	bl	8002020 <HAL_GetTick>
 8004746:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004748:	e00a      	b.n	8004760 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800474a:	f7fd fc69 	bl	8002020 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f241 3288 	movw	r2, #5000	; 0x1388
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e121      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004760:	4b6a      	ldr	r3, [pc, #424]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0ee      	beq.n	800474a <HAL_RCC_OscConfig+0x5a2>
 800476c:	e014      	b.n	8004798 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476e:	f7fd fc57 	bl	8002020 <HAL_GetTick>
 8004772:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004774:	e00a      	b.n	800478c <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004776:	f7fd fc53 	bl	8002020 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	f241 3288 	movw	r2, #5000	; 0x1388
 8004784:	4293      	cmp	r3, r2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e10b      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800478c:	4b5f      	ldr	r3, [pc, #380]	; (800490c <HAL_RCC_OscConfig+0x764>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1ee      	bne.n	8004776 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8100 	beq.w	80049a2 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80047a2:	4b5a      	ldr	r3, [pc, #360]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047aa:	2b18      	cmp	r3, #24
 80047ac:	f000 80bb 	beq.w	8004926 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	f040 8095 	bne.w	80048e4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ba:	4b54      	ldr	r3, [pc, #336]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a53      	ldr	r2, [pc, #332]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80047c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c6:	f7fd fc2b 	bl	8002020 <HAL_GetTick>
 80047ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ce:	f7fd fc27 	bl	8002020 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e0e1      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047e0:	4b4a      	ldr	r3, [pc, #296]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f0      	bne.n	80047ce <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ec:	4b47      	ldr	r3, [pc, #284]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80047ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047f0:	4b47      	ldr	r3, [pc, #284]	; (8004910 <HAL_RCC_OscConfig+0x768>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047fc:	0112      	lsls	r2, r2, #4
 80047fe:	430a      	orrs	r2, r1
 8004800:	4942      	ldr	r1, [pc, #264]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004802:	4313      	orrs	r3, r2
 8004804:	628b      	str	r3, [r1, #40]	; 0x28
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	3b01      	subs	r3, #1
 800480c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	3b01      	subs	r3, #1
 8004816:	025b      	lsls	r3, r3, #9
 8004818:	b29b      	uxth	r3, r3
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	3b01      	subs	r3, #1
 8004822:	041b      	lsls	r3, r3, #16
 8004824:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482e:	3b01      	subs	r3, #1
 8004830:	061b      	lsls	r3, r3, #24
 8004832:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004836:	4935      	ldr	r1, [pc, #212]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004838:	4313      	orrs	r3, r2
 800483a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800483c:	4b33      	ldr	r3, [pc, #204]	; (800490c <HAL_RCC_OscConfig+0x764>)
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4a32      	ldr	r2, [pc, #200]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004848:	4b30      	ldr	r3, [pc, #192]	; (800490c <HAL_RCC_OscConfig+0x764>)
 800484a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800484c:	4b31      	ldr	r3, [pc, #196]	; (8004914 <HAL_RCC_OscConfig+0x76c>)
 800484e:	4013      	ands	r3, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004854:	00d2      	lsls	r2, r2, #3
 8004856:	492d      	ldr	r1, [pc, #180]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004858:	4313      	orrs	r3, r2
 800485a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800485c:	4b2b      	ldr	r3, [pc, #172]	; (800490c <HAL_RCC_OscConfig+0x764>)
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	f023 020c 	bic.w	r2, r3, #12
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	4928      	ldr	r1, [pc, #160]	; (800490c <HAL_RCC_OscConfig+0x764>)
 800486a:	4313      	orrs	r3, r2
 800486c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800486e:	4b27      	ldr	r3, [pc, #156]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	f023 0202 	bic.w	r2, r3, #2
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	4924      	ldr	r1, [pc, #144]	; (800490c <HAL_RCC_OscConfig+0x764>)
 800487c:	4313      	orrs	r3, r2
 800487e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004880:	4b22      	ldr	r3, [pc, #136]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	4a21      	ldr	r2, [pc, #132]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800488a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800488c:	4b1f      	ldr	r3, [pc, #124]	; (800490c <HAL_RCC_OscConfig+0x764>)
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	4a1e      	ldr	r2, [pc, #120]	; (800490c <HAL_RCC_OscConfig+0x764>)
 8004892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004898:	4b1c      	ldr	r3, [pc, #112]	; (800490c <HAL_RCC_OscConfig+0x764>)
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	4a1b      	ldr	r2, [pc, #108]	; (800490c <HAL_RCC_OscConfig+0x764>)
 800489e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80048a4:	4b19      	ldr	r3, [pc, #100]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4a18      	ldr	r2, [pc, #96]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b0:	4b16      	ldr	r3, [pc, #88]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a15      	ldr	r2, [pc, #84]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80048b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fd fbb0 	bl	8002020 <HAL_GetTick>
 80048c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fd fbac 	bl	8002020 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e066      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048d6:	4b0d      	ldr	r3, [pc, #52]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0x71c>
 80048e2:	e05e      	b.n	80049a2 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e4:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a08      	ldr	r2, [pc, #32]	; (800490c <HAL_RCC_OscConfig+0x764>)
 80048ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fd fb96 	bl	8002020 <HAL_GetTick>
 80048f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048f6:	e00f      	b.n	8004918 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f8:	f7fd fb92 	bl	8002020 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d908      	bls.n	8004918 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e04c      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
 800490a:	bf00      	nop
 800490c:	58024400 	.word	0x58024400
 8004910:	fffffc0c 	.word	0xfffffc0c
 8004914:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004918:	4b24      	ldr	r3, [pc, #144]	; (80049ac <HAL_RCC_OscConfig+0x804>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e9      	bne.n	80048f8 <HAL_RCC_OscConfig+0x750>
 8004924:	e03d      	b.n	80049a2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004926:	4b21      	ldr	r3, [pc, #132]	; (80049ac <HAL_RCC_OscConfig+0x804>)
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800492c:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <HAL_RCC_OscConfig+0x804>)
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	2b01      	cmp	r3, #1
 8004938:	d031      	beq.n	800499e <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f003 0203 	and.w	r2, r3, #3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d12a      	bne.n	800499e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d122      	bne.n	800499e <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d11a      	bne.n	800499e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	0a5b      	lsrs	r3, r3, #9
 800496c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d111      	bne.n	800499e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004988:	429a      	cmp	r2, r3
 800498a:	d108      	bne.n	800499e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	0e1b      	lsrs	r3, r3, #24
 8004990:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004998:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3730      	adds	r7, #48	; 0x30
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	58024400 	.word	0x58024400

080049b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e19c      	b.n	8004cfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049c4:	4b8a      	ldr	r3, [pc, #552]	; (8004bf0 <HAL_RCC_ClockConfig+0x240>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d910      	bls.n	80049f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d2:	4b87      	ldr	r3, [pc, #540]	; (8004bf0 <HAL_RCC_ClockConfig+0x240>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f023 020f 	bic.w	r2, r3, #15
 80049da:	4985      	ldr	r1, [pc, #532]	; (8004bf0 <HAL_RCC_ClockConfig+0x240>)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	4313      	orrs	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e2:	4b83      	ldr	r3, [pc, #524]	; (8004bf0 <HAL_RCC_ClockConfig+0x240>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e184      	b.n	8004cfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d010      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	4b7b      	ldr	r3, [pc, #492]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d908      	bls.n	8004a22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a10:	4b78      	ldr	r3, [pc, #480]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	4975      	ldr	r1, [pc, #468]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d010      	beq.n	8004a50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	4b70      	ldr	r3, [pc, #448]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d908      	bls.n	8004a50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a3e:	4b6d      	ldr	r3, [pc, #436]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	496a      	ldr	r1, [pc, #424]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d010      	beq.n	8004a7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699a      	ldr	r2, [r3, #24]
 8004a60:	4b64      	ldr	r3, [pc, #400]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d908      	bls.n	8004a7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a6c:	4b61      	ldr	r3, [pc, #388]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	495e      	ldr	r1, [pc, #376]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d010      	beq.n	8004aac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69da      	ldr	r2, [r3, #28]
 8004a8e:	4b59      	ldr	r3, [pc, #356]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d908      	bls.n	8004aac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a9a:	4b56      	ldr	r3, [pc, #344]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	4953      	ldr	r1, [pc, #332]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d010      	beq.n	8004ada <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	4b4d      	ldr	r3, [pc, #308]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d908      	bls.n	8004ada <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac8:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f023 020f 	bic.w	r2, r3, #15
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4947      	ldr	r1, [pc, #284]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d055      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ae6:	4b43      	ldr	r3, [pc, #268]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	4940      	ldr	r1, [pc, #256]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d107      	bne.n	8004b10 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b00:	4b3c      	ldr	r3, [pc, #240]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d121      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0f6      	b.n	8004cfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d107      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b18:	4b36      	ldr	r3, [pc, #216]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d115      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0ea      	b.n	8004cfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d107      	bne.n	8004b40 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b30:	4b30      	ldr	r3, [pc, #192]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0de      	b.n	8004cfe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b40:	4b2c      	ldr	r3, [pc, #176]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0d6      	b.n	8004cfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b50:	4b28      	ldr	r3, [pc, #160]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f023 0207 	bic.w	r2, r3, #7
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	4925      	ldr	r1, [pc, #148]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b62:	f7fd fa5d 	bl	8002020 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b68:	e00a      	b.n	8004b80 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6a:	f7fd fa59 	bl	8002020 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e0be      	b.n	8004cfe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b80:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d1eb      	bne.n	8004b6a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d010      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d208      	bcs.n	8004bc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bae:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f023 020f 	bic.w	r2, r3, #15
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	490e      	ldr	r1, [pc, #56]	; (8004bf4 <HAL_RCC_ClockConfig+0x244>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCC_ClockConfig+0x240>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d214      	bcs.n	8004bf8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bce:	4b08      	ldr	r3, [pc, #32]	; (8004bf0 <HAL_RCC_ClockConfig+0x240>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f023 020f 	bic.w	r2, r3, #15
 8004bd6:	4906      	ldr	r1, [pc, #24]	; (8004bf0 <HAL_RCC_ClockConfig+0x240>)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bde:	4b04      	ldr	r3, [pc, #16]	; (8004bf0 <HAL_RCC_ClockConfig+0x240>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d005      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e086      	b.n	8004cfe <HAL_RCC_ClockConfig+0x34e>
 8004bf0:	52002000 	.word	0x52002000
 8004bf4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d010      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	4b3f      	ldr	r3, [pc, #252]	; (8004d08 <HAL_RCC_ClockConfig+0x358>)
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d208      	bcs.n	8004c26 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c14:	4b3c      	ldr	r3, [pc, #240]	; (8004d08 <HAL_RCC_ClockConfig+0x358>)
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	4939      	ldr	r1, [pc, #228]	; (8004d08 <HAL_RCC_ClockConfig+0x358>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d010      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	4b34      	ldr	r3, [pc, #208]	; (8004d08 <HAL_RCC_ClockConfig+0x358>)
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d208      	bcs.n	8004c54 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c42:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <HAL_RCC_ClockConfig+0x358>)
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	492e      	ldr	r1, [pc, #184]	; (8004d08 <HAL_RCC_ClockConfig+0x358>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d010      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	4b28      	ldr	r3, [pc, #160]	; (8004d08 <HAL_RCC_ClockConfig+0x358>)
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d208      	bcs.n	8004c82 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c70:	4b25      	ldr	r3, [pc, #148]	; (8004d08 <HAL_RCC_ClockConfig+0x358>)
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	4922      	ldr	r1, [pc, #136]	; (8004d08 <HAL_RCC_ClockConfig+0x358>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d010      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69da      	ldr	r2, [r3, #28]
 8004c92:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <HAL_RCC_ClockConfig+0x358>)
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d208      	bcs.n	8004cb0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c9e:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <HAL_RCC_ClockConfig+0x358>)
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	4917      	ldr	r1, [pc, #92]	; (8004d08 <HAL_RCC_ClockConfig+0x358>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004cb0:	f000 f834 	bl	8004d1c <HAL_RCC_GetSysClockFreq>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <HAL_RCC_ClockConfig+0x358>)
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	4912      	ldr	r1, [pc, #72]	; (8004d0c <HAL_RCC_ClockConfig+0x35c>)
 8004cc2:	5ccb      	ldrb	r3, [r1, r3]
 8004cc4:	f003 031f 	and.w	r3, r3, #31
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ccc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004cce:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <HAL_RCC_ClockConfig+0x358>)
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <HAL_RCC_ClockConfig+0x35c>)
 8004cd8:	5cd3      	ldrb	r3, [r2, r3]
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce4:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <HAL_RCC_ClockConfig+0x360>)
 8004ce6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ce8:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <HAL_RCC_ClockConfig+0x364>)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004cee:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <HAL_RCC_ClockConfig+0x368>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fd f94a 	bl	8001f8c <HAL_InitTick>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	58024400 	.word	0x58024400
 8004d0c:	0800c9e0 	.word	0x0800c9e0
 8004d10:	24000004 	.word	0x24000004
 8004d14:	24000000 	.word	0x24000000
 8004d18:	24000008 	.word	0x24000008

08004d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b089      	sub	sp, #36	; 0x24
 8004d20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d22:	4bb3      	ldr	r3, [pc, #716]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d2a:	2b18      	cmp	r3, #24
 8004d2c:	f200 8155 	bhi.w	8004fda <HAL_RCC_GetSysClockFreq+0x2be>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d9d 	.word	0x08004d9d
 8004d3c:	08004fdb 	.word	0x08004fdb
 8004d40:	08004fdb 	.word	0x08004fdb
 8004d44:	08004fdb 	.word	0x08004fdb
 8004d48:	08004fdb 	.word	0x08004fdb
 8004d4c:	08004fdb 	.word	0x08004fdb
 8004d50:	08004fdb 	.word	0x08004fdb
 8004d54:	08004fdb 	.word	0x08004fdb
 8004d58:	08004dc3 	.word	0x08004dc3
 8004d5c:	08004fdb 	.word	0x08004fdb
 8004d60:	08004fdb 	.word	0x08004fdb
 8004d64:	08004fdb 	.word	0x08004fdb
 8004d68:	08004fdb 	.word	0x08004fdb
 8004d6c:	08004fdb 	.word	0x08004fdb
 8004d70:	08004fdb 	.word	0x08004fdb
 8004d74:	08004fdb 	.word	0x08004fdb
 8004d78:	08004dc9 	.word	0x08004dc9
 8004d7c:	08004fdb 	.word	0x08004fdb
 8004d80:	08004fdb 	.word	0x08004fdb
 8004d84:	08004fdb 	.word	0x08004fdb
 8004d88:	08004fdb 	.word	0x08004fdb
 8004d8c:	08004fdb 	.word	0x08004fdb
 8004d90:	08004fdb 	.word	0x08004fdb
 8004d94:	08004fdb 	.word	0x08004fdb
 8004d98:	08004dcf 	.word	0x08004dcf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d9c:	4b94      	ldr	r3, [pc, #592]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0320 	and.w	r3, r3, #32
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d009      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004da8:	4b91      	ldr	r3, [pc, #580]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	08db      	lsrs	r3, r3, #3
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	4a90      	ldr	r2, [pc, #576]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
 8004db8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004dba:	e111      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004dbc:	4b8d      	ldr	r3, [pc, #564]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dbe:	61bb      	str	r3, [r7, #24]
    break;
 8004dc0:	e10e      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004dc2:	4b8d      	ldr	r3, [pc, #564]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004dc4:	61bb      	str	r3, [r7, #24]
    break;
 8004dc6:	e10b      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004dc8:	4b8c      	ldr	r3, [pc, #560]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004dca:	61bb      	str	r3, [r7, #24]
    break;
 8004dcc:	e108      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dce:	4b88      	ldr	r3, [pc, #544]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004dd8:	4b85      	ldr	r3, [pc, #532]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004de4:	4b82      	ldr	r3, [pc, #520]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004dee:	4b80      	ldr	r3, [pc, #512]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	08db      	lsrs	r3, r3, #3
 8004df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80e1 	beq.w	8004fd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	f000 8083 	beq.w	8004f20 <HAL_RCC_GetSysClockFreq+0x204>
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	f200 80a1 	bhi.w	8004f64 <HAL_RCC_GetSysClockFreq+0x248>
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_RCC_GetSysClockFreq+0x114>
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d056      	beq.n	8004edc <HAL_RCC_GetSysClockFreq+0x1c0>
 8004e2e:	e099      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e30:	4b6f      	ldr	r3, [pc, #444]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02d      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e3c:	4b6c      	ldr	r3, [pc, #432]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	08db      	lsrs	r3, r3, #3
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	4a6b      	ldr	r2, [pc, #428]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e66:	4b62      	ldr	r3, [pc, #392]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004e96:	e087      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005004 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eaa:	4b51      	ldr	r3, [pc, #324]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ebe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eda:	e065      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eee:	4b40      	ldr	r3, [pc, #256]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f1e:	e043      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800500c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f32:	4b2f      	ldr	r3, [pc, #188]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f62:	e021      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f76:	4b1e      	ldr	r3, [pc, #120]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fa6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004fa8:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	0a5b      	lsrs	r3, r3, #9
 8004fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fcc:	ee17 3a90 	vmov	r3, s15
 8004fd0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004fd2:	e005      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61bb      	str	r3, [r7, #24]
    break;
 8004fd8:	e002      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004fda:	4b07      	ldr	r3, [pc, #28]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fdc:	61bb      	str	r3, [r7, #24]
    break;
 8004fde:	bf00      	nop
  }

  return sysclockfreq;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3724      	adds	r7, #36	; 0x24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	03d09000 	.word	0x03d09000
 8004ff8:	003d0900 	.word	0x003d0900
 8004ffc:	007a1200 	.word	0x007a1200
 8005000:	46000000 	.word	0x46000000
 8005004:	4c742400 	.word	0x4c742400
 8005008:	4a742400 	.word	0x4a742400
 800500c:	4af42400 	.word	0x4af42400

08005010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005016:	f7ff fe81 	bl	8004d1c <HAL_RCC_GetSysClockFreq>
 800501a:	4602      	mov	r2, r0
 800501c:	4b10      	ldr	r3, [pc, #64]	; (8005060 <HAL_RCC_GetHCLKFreq+0x50>)
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	490f      	ldr	r1, [pc, #60]	; (8005064 <HAL_RCC_GetHCLKFreq+0x54>)
 8005028:	5ccb      	ldrb	r3, [r1, r3]
 800502a:	f003 031f 	and.w	r3, r3, #31
 800502e:	fa22 f303 	lsr.w	r3, r2, r3
 8005032:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005034:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <HAL_RCC_GetHCLKFreq+0x50>)
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	4a09      	ldr	r2, [pc, #36]	; (8005064 <HAL_RCC_GetHCLKFreq+0x54>)
 800503e:	5cd3      	ldrb	r3, [r2, r3]
 8005040:	f003 031f 	and.w	r3, r3, #31
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	fa22 f303 	lsr.w	r3, r2, r3
 800504a:	4a07      	ldr	r2, [pc, #28]	; (8005068 <HAL_RCC_GetHCLKFreq+0x58>)
 800504c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800504e:	4a07      	ldr	r2, [pc, #28]	; (800506c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <HAL_RCC_GetHCLKFreq+0x58>)
 8005056:	681b      	ldr	r3, [r3, #0]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	58024400 	.word	0x58024400
 8005064:	0800c9e0 	.word	0x0800c9e0
 8005068:	24000004 	.word	0x24000004
 800506c:	24000000 	.word	0x24000000

08005070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005074:	f7ff ffcc 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 8005078:	4602      	mov	r2, r0
 800507a:	4b06      	ldr	r3, [pc, #24]	; (8005094 <HAL_RCC_GetPCLK1Freq+0x24>)
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	091b      	lsrs	r3, r3, #4
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	4904      	ldr	r1, [pc, #16]	; (8005098 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005086:	5ccb      	ldrb	r3, [r1, r3]
 8005088:	f003 031f 	and.w	r3, r3, #31
 800508c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005090:	4618      	mov	r0, r3
 8005092:	bd80      	pop	{r7, pc}
 8005094:	58024400 	.word	0x58024400
 8005098:	0800c9e0 	.word	0x0800c9e0

0800509c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80050a0:	f7ff ffb6 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 80050a4:	4602      	mov	r2, r0
 80050a6:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	0a1b      	lsrs	r3, r3, #8
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	4904      	ldr	r1, [pc, #16]	; (80050c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050b2:	5ccb      	ldrb	r3, [r1, r3]
 80050b4:	f003 031f 	and.w	r3, r3, #31
 80050b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80050bc:	4618      	mov	r0, r3
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	58024400 	.word	0x58024400
 80050c4:	0800c9e0 	.word	0x0800c9e0

080050c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050d0:	2300      	movs	r3, #0
 80050d2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050d4:	2300      	movs	r3, #0
 80050d6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d03f      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050ec:	d02a      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050f2:	d824      	bhi.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050f8:	d018      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050fe:	d81e      	bhi.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005108:	d007      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800510a:	e018      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800510c:	4b9f      	ldr	r3, [pc, #636]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	4a9e      	ldr	r2, [pc, #632]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005118:	e015      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3304      	adds	r3, #4
 800511e:	2102      	movs	r1, #2
 8005120:	4618      	mov	r0, r3
 8005122:	f001 ff1b 	bl	8006f5c <RCCEx_PLL2_Config>
 8005126:	4603      	mov	r3, r0
 8005128:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800512a:	e00c      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3324      	adds	r3, #36	; 0x24
 8005130:	2102      	movs	r1, #2
 8005132:	4618      	mov	r0, r3
 8005134:	f001 ffc4 	bl	80070c0 <RCCEx_PLL3_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800513c:	e003      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	75fb      	strb	r3, [r7, #23]
      break;
 8005142:	e000      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005146:	7dfb      	ldrb	r3, [r7, #23]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d109      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800514c:	4b8f      	ldr	r3, [pc, #572]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800514e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005150:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005158:	498c      	ldr	r1, [pc, #560]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800515a:	4313      	orrs	r3, r2
 800515c:	650b      	str	r3, [r1, #80]	; 0x50
 800515e:	e001      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005160:	7dfb      	ldrb	r3, [r7, #23]
 8005162:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	d03d      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005174:	2b04      	cmp	r3, #4
 8005176:	d826      	bhi.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005178:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	08005195 	.word	0x08005195
 8005184:	080051a3 	.word	0x080051a3
 8005188:	080051b5 	.word	0x080051b5
 800518c:	080051cd 	.word	0x080051cd
 8005190:	080051cd 	.word	0x080051cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005194:	4b7d      	ldr	r3, [pc, #500]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	4a7c      	ldr	r2, [pc, #496]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800519a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800519e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051a0:	e015      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3304      	adds	r3, #4
 80051a6:	2100      	movs	r1, #0
 80051a8:	4618      	mov	r0, r3
 80051aa:	f001 fed7 	bl	8006f5c <RCCEx_PLL2_Config>
 80051ae:	4603      	mov	r3, r0
 80051b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051b2:	e00c      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3324      	adds	r3, #36	; 0x24
 80051b8:	2100      	movs	r1, #0
 80051ba:	4618      	mov	r0, r3
 80051bc:	f001 ff80 	bl	80070c0 <RCCEx_PLL3_Config>
 80051c0:	4603      	mov	r3, r0
 80051c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051c4:	e003      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	75fb      	strb	r3, [r7, #23]
      break;
 80051ca:	e000      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80051cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d109      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051d4:	4b6d      	ldr	r3, [pc, #436]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d8:	f023 0207 	bic.w	r2, r3, #7
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e0:	496a      	ldr	r1, [pc, #424]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	650b      	str	r3, [r1, #80]	; 0x50
 80051e6:	e001      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d04a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005200:	d031      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005202:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005206:	d82b      	bhi.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520c:	d02d      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800520e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005212:	d825      	bhi.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005214:	2bc0      	cmp	r3, #192	; 0xc0
 8005216:	d02a      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005218:	2bc0      	cmp	r3, #192	; 0xc0
 800521a:	d821      	bhi.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800521c:	2b80      	cmp	r3, #128	; 0x80
 800521e:	d016      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005220:	2b80      	cmp	r3, #128	; 0x80
 8005222:	d81d      	bhi.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d007      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x174>
 800522c:	e018      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800522e:	4b57      	ldr	r3, [pc, #348]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	4a56      	ldr	r2, [pc, #344]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005238:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800523a:	e019      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3304      	adds	r3, #4
 8005240:	2100      	movs	r1, #0
 8005242:	4618      	mov	r0, r3
 8005244:	f001 fe8a 	bl	8006f5c <RCCEx_PLL2_Config>
 8005248:	4603      	mov	r3, r0
 800524a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800524c:	e010      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3324      	adds	r3, #36	; 0x24
 8005252:	2100      	movs	r1, #0
 8005254:	4618      	mov	r0, r3
 8005256:	f001 ff33 	bl	80070c0 <RCCEx_PLL3_Config>
 800525a:	4603      	mov	r3, r0
 800525c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800525e:	e007      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	75fb      	strb	r3, [r7, #23]
      break;
 8005264:	e004      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005266:	bf00      	nop
 8005268:	e002      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800526a:	bf00      	nop
 800526c:	e000      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800526e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005270:	7dfb      	ldrb	r3, [r7, #23]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005276:	4b45      	ldr	r3, [pc, #276]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005282:	4942      	ldr	r1, [pc, #264]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005284:	4313      	orrs	r3, r2
 8005286:	650b      	str	r3, [r1, #80]	; 0x50
 8005288:	e001      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528a:	7dfb      	ldrb	r3, [r7, #23]
 800528c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005296:	2b00      	cmp	r3, #0
 8005298:	d04f      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80052a2:	d036      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80052a4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80052a8:	d830      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80052aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ae:	d032      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80052b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b4:	d82a      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80052b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80052ba:	d02e      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x252>
 80052bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80052c0:	d824      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80052c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c6:	d018      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x232>
 80052c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052cc:	d81e      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x212>
 80052d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d6:	d007      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80052d8:	e018      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052da:	4b2c      	ldr	r3, [pc, #176]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	4a2b      	ldr	r2, [pc, #172]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80052e6:	e019      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	2100      	movs	r1, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 fe34 	bl	8006f5c <RCCEx_PLL2_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80052f8:	e010      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3324      	adds	r3, #36	; 0x24
 80052fe:	2100      	movs	r1, #0
 8005300:	4618      	mov	r0, r3
 8005302:	f001 fedd 	bl	80070c0 <RCCEx_PLL3_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800530a:	e007      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
      break;
 8005310:	e004      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005312:	bf00      	nop
 8005314:	e002      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005316:	bf00      	nop
 8005318:	e000      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800531a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800531c:	7dfb      	ldrb	r3, [r7, #23]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005322:	4b1a      	ldr	r3, [pc, #104]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005326:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532e:	4917      	ldr	r1, [pc, #92]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005330:	4313      	orrs	r3, r2
 8005332:	650b      	str	r3, [r1, #80]	; 0x50
 8005334:	e001      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d034      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800534a:	2b30      	cmp	r3, #48	; 0x30
 800534c:	d01c      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800534e:	2b30      	cmp	r3, #48	; 0x30
 8005350:	d817      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005352:	2b20      	cmp	r3, #32
 8005354:	d00c      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005356:	2b20      	cmp	r3, #32
 8005358:	d813      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800535a:	2b00      	cmp	r3, #0
 800535c:	d018      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800535e:	2b10      	cmp	r3, #16
 8005360:	d10f      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	4a09      	ldr	r2, [pc, #36]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800536e:	e010      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3304      	adds	r3, #4
 8005374:	2102      	movs	r1, #2
 8005376:	4618      	mov	r0, r3
 8005378:	f001 fdf0 	bl	8006f5c <RCCEx_PLL2_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005380:	e007      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	75fb      	strb	r3, [r7, #23]
      break;
 8005386:	e004      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8005388:	bf00      	nop
 800538a:	e002      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800538c:	58024400 	.word	0x58024400
      break;
 8005390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d109      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005398:	4b9b      	ldr	r3, [pc, #620]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800539a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a4:	4998      	ldr	r1, [pc, #608]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80053aa:	e001      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
 80053ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d047      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c4:	d030      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80053c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ca:	d82a      	bhi.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80053cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053d0:	d02c      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x364>
 80053d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053d6:	d824      	bhi.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80053d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053dc:	d018      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80053de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e2:	d81e      	bhi.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80053e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ec:	d007      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x336>
 80053ee:	e018      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053f0:	4b85      	ldr	r3, [pc, #532]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	4a84      	ldr	r2, [pc, #528]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80053f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80053fc:	e017      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3304      	adds	r3, #4
 8005402:	2100      	movs	r1, #0
 8005404:	4618      	mov	r0, r3
 8005406:	f001 fda9 	bl	8006f5c <RCCEx_PLL2_Config>
 800540a:	4603      	mov	r3, r0
 800540c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800540e:	e00e      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3324      	adds	r3, #36	; 0x24
 8005414:	2100      	movs	r1, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f001 fe52 	bl	80070c0 <RCCEx_PLL3_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005420:	e005      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	75fb      	strb	r3, [r7, #23]
      break;
 8005426:	e002      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005428:	bf00      	nop
 800542a:	e000      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800542c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d109      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005434:	4b74      	ldr	r3, [pc, #464]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005438:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005440:	4971      	ldr	r1, [pc, #452]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005442:	4313      	orrs	r3, r2
 8005444:	650b      	str	r3, [r1, #80]	; 0x50
 8005446:	e001      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d049      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800545c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005460:	d02e      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005466:	d828      	bhi.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005468:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800546c:	d02a      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800546e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005472:	d822      	bhi.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005474:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005478:	d026      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800547a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800547e:	d81c      	bhi.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005484:	d010      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005486:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800548a:	d816      	bhi.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01d      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005494:	d111      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3304      	adds	r3, #4
 800549a:	2101      	movs	r1, #1
 800549c:	4618      	mov	r0, r3
 800549e:	f001 fd5d 	bl	8006f5c <RCCEx_PLL2_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80054a6:	e012      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3324      	adds	r3, #36	; 0x24
 80054ac:	2101      	movs	r1, #1
 80054ae:	4618      	mov	r0, r3
 80054b0:	f001 fe06 	bl	80070c0 <RCCEx_PLL3_Config>
 80054b4:	4603      	mov	r3, r0
 80054b6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80054b8:	e009      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	75fb      	strb	r3, [r7, #23]
      break;
 80054be:	e006      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80054c0:	bf00      	nop
 80054c2:	e004      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80054c4:	bf00      	nop
 80054c6:	e002      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80054c8:	bf00      	nop
 80054ca:	e000      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80054cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80054d4:	4b4c      	ldr	r3, [pc, #304]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80054d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e0:	4949      	ldr	r1, [pc, #292]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	650b      	str	r3, [r1, #80]	; 0x50
 80054e6:	e001      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d053      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054fe:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005502:	d034      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005504:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005508:	d82e      	bhi.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800550a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800550e:	d030      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005514:	d828      	bhi.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551a:	d02c      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800551c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005520:	d822      	bhi.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005522:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005526:	d028      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005528:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800552c:	d81c      	bhi.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800552e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005532:	d010      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005538:	d816      	bhi.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d01f      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800553e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005542:	d111      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3304      	adds	r3, #4
 8005548:	2101      	movs	r1, #1
 800554a:	4618      	mov	r0, r3
 800554c:	f001 fd06 	bl	8006f5c <RCCEx_PLL2_Config>
 8005550:	4603      	mov	r3, r0
 8005552:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005554:	e014      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3324      	adds	r3, #36	; 0x24
 800555a:	2101      	movs	r1, #1
 800555c:	4618      	mov	r0, r3
 800555e:	f001 fdaf 	bl	80070c0 <RCCEx_PLL3_Config>
 8005562:	4603      	mov	r3, r0
 8005564:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005566:	e00b      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	75fb      	strb	r3, [r7, #23]
      break;
 800556c:	e008      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800556e:	bf00      	nop
 8005570:	e006      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005572:	bf00      	nop
 8005574:	e004      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005576:	bf00      	nop
 8005578:	e002      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800557a:	bf00      	nop
 800557c:	e000      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800557e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005586:	4b20      	ldr	r3, [pc, #128]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005594:	491c      	ldr	r1, [pc, #112]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005596:	4313      	orrs	r3, r2
 8005598:	658b      	str	r3, [r1, #88]	; 0x58
 800559a:	e001      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559c:	7dfb      	ldrb	r3, [r7, #23]
 800559e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d031      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055b4:	d00e      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80055b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ba:	d814      	bhi.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d015      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x524>
 80055c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055c4:	d10f      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c6:	4b10      	ldr	r3, [pc, #64]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	4a0f      	ldr	r2, [pc, #60]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80055cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80055d2:	e00c      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3304      	adds	r3, #4
 80055d8:	2101      	movs	r1, #1
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 fcbe 	bl	8006f5c <RCCEx_PLL2_Config>
 80055e0:	4603      	mov	r3, r0
 80055e2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80055e4:	e003      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
      break;
 80055ea:	e000      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80055ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10b      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055f4:	4b04      	ldr	r3, [pc, #16]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80055f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005600:	4901      	ldr	r1, [pc, #4]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005602:	4313      	orrs	r3, r2
 8005604:	650b      	str	r3, [r1, #80]	; 0x50
 8005606:	e003      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8005608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560c:	7dfb      	ldrb	r3, [r7, #23]
 800560e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d032      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005620:	2b03      	cmp	r3, #3
 8005622:	d81b      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005624:	a201      	add	r2, pc, #4	; (adr r2, 800562c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562a:	bf00      	nop
 800562c:	08005663 	.word	0x08005663
 8005630:	0800563d 	.word	0x0800563d
 8005634:	0800564b 	.word	0x0800564b
 8005638:	08005663 	.word	0x08005663
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800563c:	4bb2      	ldr	r3, [pc, #712]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	4ab1      	ldr	r2, [pc, #708]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005646:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005648:	e00c      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3304      	adds	r3, #4
 800564e:	2102      	movs	r1, #2
 8005650:	4618      	mov	r0, r3
 8005652:	f001 fc83 	bl	8006f5c <RCCEx_PLL2_Config>
 8005656:	4603      	mov	r3, r0
 8005658:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800565a:	e003      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	75fb      	strb	r3, [r7, #23]
      break;
 8005660:	e000      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800566a:	4ba7      	ldr	r3, [pc, #668]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800566c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566e:	f023 0203 	bic.w	r2, r3, #3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005676:	49a4      	ldr	r1, [pc, #656]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005678:	4313      	orrs	r3, r2
 800567a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800567c:	e001      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567e:	7dfb      	ldrb	r3, [r7, #23]
 8005680:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8086 	beq.w	800579c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005690:	4b9e      	ldr	r3, [pc, #632]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a9d      	ldr	r2, [pc, #628]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800569a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800569c:	f7fc fcc0 	bl	8002020 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056a2:	e009      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a4:	f7fc fcbc 	bl	8002020 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b64      	cmp	r3, #100	; 0x64
 80056b0:	d902      	bls.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	75fb      	strb	r3, [r7, #23]
        break;
 80056b6:	e005      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056b8:	4b94      	ldr	r3, [pc, #592]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0ef      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d166      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80056ca:	4b8f      	ldr	r3, [pc, #572]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80056cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056d4:	4053      	eors	r3, r2
 80056d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d013      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056de:	4b8a      	ldr	r3, [pc, #552]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80056e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056e8:	4b87      	ldr	r3, [pc, #540]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80056ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ec:	4a86      	ldr	r2, [pc, #536]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80056ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056f4:	4b84      	ldr	r3, [pc, #528]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80056f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f8:	4a83      	ldr	r2, [pc, #524]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80056fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005700:	4a81      	ldr	r2, [pc, #516]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800570c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005710:	d115      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005712:	f7fc fc85 	bl	8002020 <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005718:	e00b      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571a:	f7fc fc81 	bl	8002020 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f241 3288 	movw	r2, #5000	; 0x1388
 8005728:	4293      	cmp	r3, r2
 800572a:	d902      	bls.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	75fb      	strb	r3, [r7, #23]
            break;
 8005730:	e005      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005732:	4b75      	ldr	r3, [pc, #468]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0ed      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800573e:	7dfb      	ldrb	r3, [r7, #23]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d126      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800574a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005752:	d10d      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8005754:	4b6c      	ldr	r3, [pc, #432]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005762:	0919      	lsrs	r1, r3, #4
 8005764:	4b6a      	ldr	r3, [pc, #424]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005766:	400b      	ands	r3, r1
 8005768:	4967      	ldr	r1, [pc, #412]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800576a:	4313      	orrs	r3, r2
 800576c:	610b      	str	r3, [r1, #16]
 800576e:	e005      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8005770:	4b65      	ldr	r3, [pc, #404]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	4a64      	ldr	r2, [pc, #400]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005776:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800577a:	6113      	str	r3, [r2, #16]
 800577c:	4b62      	ldr	r3, [pc, #392]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800577e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800578a:	495f      	ldr	r1, [pc, #380]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800578c:	4313      	orrs	r3, r2
 800578e:	670b      	str	r3, [r1, #112]	; 0x70
 8005790:	e004      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005792:	7dfb      	ldrb	r3, [r7, #23]
 8005794:	75bb      	strb	r3, [r7, #22]
 8005796:	e001      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005798:	7dfb      	ldrb	r3, [r7, #23]
 800579a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d07f      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ae:	2b28      	cmp	r3, #40	; 0x28
 80057b0:	d866      	bhi.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80057b2:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	08005887 	.word	0x08005887
 80057bc:	08005881 	.word	0x08005881
 80057c0:	08005881 	.word	0x08005881
 80057c4:	08005881 	.word	0x08005881
 80057c8:	08005881 	.word	0x08005881
 80057cc:	08005881 	.word	0x08005881
 80057d0:	08005881 	.word	0x08005881
 80057d4:	08005881 	.word	0x08005881
 80057d8:	0800585d 	.word	0x0800585d
 80057dc:	08005881 	.word	0x08005881
 80057e0:	08005881 	.word	0x08005881
 80057e4:	08005881 	.word	0x08005881
 80057e8:	08005881 	.word	0x08005881
 80057ec:	08005881 	.word	0x08005881
 80057f0:	08005881 	.word	0x08005881
 80057f4:	08005881 	.word	0x08005881
 80057f8:	0800586f 	.word	0x0800586f
 80057fc:	08005881 	.word	0x08005881
 8005800:	08005881 	.word	0x08005881
 8005804:	08005881 	.word	0x08005881
 8005808:	08005881 	.word	0x08005881
 800580c:	08005881 	.word	0x08005881
 8005810:	08005881 	.word	0x08005881
 8005814:	08005881 	.word	0x08005881
 8005818:	08005887 	.word	0x08005887
 800581c:	08005881 	.word	0x08005881
 8005820:	08005881 	.word	0x08005881
 8005824:	08005881 	.word	0x08005881
 8005828:	08005881 	.word	0x08005881
 800582c:	08005881 	.word	0x08005881
 8005830:	08005881 	.word	0x08005881
 8005834:	08005881 	.word	0x08005881
 8005838:	08005887 	.word	0x08005887
 800583c:	08005881 	.word	0x08005881
 8005840:	08005881 	.word	0x08005881
 8005844:	08005881 	.word	0x08005881
 8005848:	08005881 	.word	0x08005881
 800584c:	08005881 	.word	0x08005881
 8005850:	08005881 	.word	0x08005881
 8005854:	08005881 	.word	0x08005881
 8005858:	08005887 	.word	0x08005887
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	2101      	movs	r1, #1
 8005862:	4618      	mov	r0, r3
 8005864:	f001 fb7a 	bl	8006f5c <RCCEx_PLL2_Config>
 8005868:	4603      	mov	r3, r0
 800586a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800586c:	e00c      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3324      	adds	r3, #36	; 0x24
 8005872:	2101      	movs	r1, #1
 8005874:	4618      	mov	r0, r3
 8005876:	f001 fc23 	bl	80070c0 <RCCEx_PLL3_Config>
 800587a:	4603      	mov	r3, r0
 800587c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800587e:	e003      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	75fb      	strb	r3, [r7, #23]
      break;
 8005884:	e000      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8005886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800588e:	4b1e      	ldr	r3, [pc, #120]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005892:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800589c:	491a      	ldr	r1, [pc, #104]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	654b      	str	r3, [r1, #84]	; 0x54
 80058a2:	e001      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d03f      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058b8:	2b05      	cmp	r3, #5
 80058ba:	d821      	bhi.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	08005915 	.word	0x08005915
 80058c8:	080058dd 	.word	0x080058dd
 80058cc:	080058ef 	.word	0x080058ef
 80058d0:	08005915 	.word	0x08005915
 80058d4:	08005915 	.word	0x08005915
 80058d8:	08005915 	.word	0x08005915
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3304      	adds	r3, #4
 80058e0:	2101      	movs	r1, #1
 80058e2:	4618      	mov	r0, r3
 80058e4:	f001 fb3a 	bl	8006f5c <RCCEx_PLL2_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80058ec:	e013      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3324      	adds	r3, #36	; 0x24
 80058f2:	2101      	movs	r1, #1
 80058f4:	4618      	mov	r0, r3
 80058f6:	f001 fbe3 	bl	80070c0 <RCCEx_PLL3_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80058fe:	e00a      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	75fb      	strb	r3, [r7, #23]
      break;
 8005904:	e007      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8005906:	bf00      	nop
 8005908:	58024400 	.word	0x58024400
 800590c:	58024800 	.word	0x58024800
 8005910:	00ffffcf 	.word	0x00ffffcf
      break;
 8005914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005916:	7dfb      	ldrb	r3, [r7, #23]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d109      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800591c:	4b9f      	ldr	r3, [pc, #636]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800591e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005920:	f023 0207 	bic.w	r2, r3, #7
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005928:	499c      	ldr	r1, [pc, #624]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800592a:	4313      	orrs	r3, r2
 800592c:	654b      	str	r3, [r1, #84]	; 0x54
 800592e:	e001      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d039      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005946:	2b05      	cmp	r3, #5
 8005948:	d820      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800594a:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005950:	08005993 	.word	0x08005993
 8005954:	08005969 	.word	0x08005969
 8005958:	0800597b 	.word	0x0800597b
 800595c:	08005993 	.word	0x08005993
 8005960:	08005993 	.word	0x08005993
 8005964:	08005993 	.word	0x08005993
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3304      	adds	r3, #4
 800596c:	2101      	movs	r1, #1
 800596e:	4618      	mov	r0, r3
 8005970:	f001 faf4 	bl	8006f5c <RCCEx_PLL2_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005978:	e00c      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3324      	adds	r3, #36	; 0x24
 800597e:	2101      	movs	r1, #1
 8005980:	4618      	mov	r0, r3
 8005982:	f001 fb9d 	bl	80070c0 <RCCEx_PLL3_Config>
 8005986:	4603      	mov	r3, r0
 8005988:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800598a:	e003      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	75fb      	strb	r3, [r7, #23]
      break;
 8005990:	e000      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8005992:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10a      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800599a:	4b80      	ldr	r3, [pc, #512]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800599c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599e:	f023 0207 	bic.w	r2, r3, #7
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059a8:	497c      	ldr	r1, [pc, #496]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	658b      	str	r3, [r1, #88]	; 0x58
 80059ae:	e001      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d04b      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059ca:	d02e      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x962>
 80059cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059d0:	d828      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d6:	d02a      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059dc:	d822      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80059de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059e2:	d026      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80059e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059e8:	d81c      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80059ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ee:	d010      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80059f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f4:	d816      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01d      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80059fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059fe:	d111      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 faa8 	bl	8006f5c <RCCEx_PLL2_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005a10:	e012      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3324      	adds	r3, #36	; 0x24
 8005a16:	2102      	movs	r1, #2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f001 fb51 	bl	80070c0 <RCCEx_PLL3_Config>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005a22:	e009      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	75fb      	strb	r3, [r7, #23]
      break;
 8005a28:	e006      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005a2a:	bf00      	nop
 8005a2c:	e004      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005a2e:	bf00      	nop
 8005a30:	e002      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a3e:	4b57      	ldr	r3, [pc, #348]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a4c:	4953      	ldr	r1, [pc, #332]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	654b      	str	r3, [r1, #84]	; 0x54
 8005a52:	e001      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d04b      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a6e:	d02e      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005a70:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a74:	d828      	bhi.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7a:	d02a      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a80:	d822      	bhi.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005a82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a86:	d026      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005a88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a8c:	d81c      	bhi.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a92:	d010      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a98:	d816      	bhi.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01d      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa2:	d111      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f001 fa56 	bl	8006f5c <RCCEx_PLL2_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005ab4:	e012      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3324      	adds	r3, #36	; 0x24
 8005aba:	2102      	movs	r1, #2
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 faff 	bl	80070c0 <RCCEx_PLL3_Config>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005ac6:	e009      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	75fb      	strb	r3, [r7, #23]
      break;
 8005acc:	e006      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005ace:	bf00      	nop
 8005ad0:	e004      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005ad2:	bf00      	nop
 8005ad4:	e002      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005ad6:	bf00      	nop
 8005ad8:	e000      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ae2:	4b2e      	ldr	r3, [pc, #184]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005af0:	492a      	ldr	r1, [pc, #168]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	658b      	str	r3, [r1, #88]	; 0x58
 8005af6:	e001      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d04d      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b0e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005b12:	d02e      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005b14:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005b18:	d828      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b1e:	d02a      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b24:	d822      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005b26:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005b2a:	d026      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005b2c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005b30:	d81c      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b36:	d010      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8005b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b3c:	d816      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01d      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b46:	d111      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 fa04 	bl	8006f5c <RCCEx_PLL2_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005b58:	e012      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3324      	adds	r3, #36	; 0x24
 8005b5e:	2102      	movs	r1, #2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 faad 	bl	80070c0 <RCCEx_PLL3_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005b6a:	e009      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b70:	e006      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005b72:	bf00      	nop
 8005b74:	e004      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005b76:	bf00      	nop
 8005b78:	e002      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005b7a:	bf00      	nop
 8005b7c:	e000      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b86:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b94:	4901      	ldr	r1, [pc, #4]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	658b      	str	r3, [r1, #88]	; 0x58
 8005b9a:	e003      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005b9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01a      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bba:	d10a      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3324      	adds	r3, #36	; 0x24
 8005bc0:	2102      	movs	r1, #2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 fa7c 	bl	80070c0 <RCCEx_PLL3_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005bd2:	4b8c      	ldr	r3, [pc, #560]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be0:	4988      	ldr	r1, [pc, #544]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d01a      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfc:	d10a      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3324      	adds	r3, #36	; 0x24
 8005c02:	2102      	movs	r1, #2
 8005c04:	4618      	mov	r0, r3
 8005c06:	f001 fa5b 	bl	80070c0 <RCCEx_PLL3_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c14:	4b7b      	ldr	r3, [pc, #492]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c22:	4978      	ldr	r1, [pc, #480]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d034      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c3e:	d01d      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8005c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c44:	d817      	bhi.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8005c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4e:	d009      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005c50:	e011      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3304      	adds	r3, #4
 8005c56:	2100      	movs	r1, #0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 f97f 	bl	8006f5c <RCCEx_PLL2_Config>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005c62:	e00c      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3324      	adds	r3, #36	; 0x24
 8005c68:	2102      	movs	r1, #2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f001 fa28 	bl	80070c0 <RCCEx_PLL3_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005c74:	e003      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7a:	e000      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8005c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c84:	4b5f      	ldr	r3, [pc, #380]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c92:	495c      	ldr	r1, [pc, #368]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	658b      	str	r3, [r1, #88]	; 0x58
 8005c98:	e001      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
 8005c9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d033      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cb4:	d01c      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005cb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cba:	d816      	bhi.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005cbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cc0:	d003      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005cc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cc6:	d007      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005cc8:	e00f      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cca:	4b4e      	ldr	r3, [pc, #312]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	4a4d      	ldr	r2, [pc, #308]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005cd6:	e00c      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3324      	adds	r3, #36	; 0x24
 8005cdc:	2101      	movs	r1, #1
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 f9ee 	bl	80070c0 <RCCEx_PLL3_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005ce8:	e003      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	75fb      	strb	r3, [r7, #23]
      break;
 8005cee:	e000      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10a      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cf8:	4b42      	ldr	r3, [pc, #264]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d06:	493f      	ldr	r1, [pc, #252]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	654b      	str	r3, [r1, #84]	; 0x54
 8005d0c:	e001      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
 8005d10:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d029      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8005d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2a:	d007      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005d2c:	e00f      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d2e:	4b35      	ldr	r3, [pc, #212]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	4a34      	ldr	r2, [pc, #208]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005d3a:	e00b      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	2102      	movs	r1, #2
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 f90a 	bl	8006f5c <RCCEx_PLL2_Config>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005d4c:	e002      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	75fb      	strb	r3, [r7, #23]
      break;
 8005d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005d5a:	4b2a      	ldr	r3, [pc, #168]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d66:	4927      	ldr	r1, [pc, #156]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d6c:	e001      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
 8005d70:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3324      	adds	r3, #36	; 0x24
 8005d82:	2102      	movs	r1, #2
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 f99b 	bl	80070c0 <RCCEx_PLL3_Config>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d035      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005daa:	d017      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db0:	d811      	bhi.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db6:	d013      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8005db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dbc:	d80b      	bhi.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d010      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8005dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc6:	d106      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc8:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	4a0d      	ldr	r2, [pc, #52]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005dd4:	e007      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dda:	e004      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005ddc:	bf00      	nop
 8005dde:	e002      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005de0:	bf00      	nop
 8005de2:	e000      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10d      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005dec:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfa:	4902      	ldr	r1, [pc, #8]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	654b      	str	r3, [r1, #84]	; 0x54
 8005e00:	e004      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005e02:	bf00      	nop
 8005e04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
 8005e0a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e18:	4b30      	ldr	r3, [pc, #192]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e24:	492d      	ldr	r1, [pc, #180]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e36:	4b29      	ldr	r3, [pc, #164]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e42:	4926      	ldr	r1, [pc, #152]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005e54:	4b21      	ldr	r3, [pc, #132]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e60:	491e      	ldr	r1, [pc, #120]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00d      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e72:	4b1a      	ldr	r3, [pc, #104]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	4a19      	ldr	r2, [pc, #100]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e7c:	6113      	str	r3, [r2, #16]
 8005e7e:	4b17      	ldr	r3, [pc, #92]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e88:	4914      	ldr	r1, [pc, #80]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	da08      	bge.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005e96:	4b11      	ldr	r3, [pc, #68]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea2:	490e      	ldr	r1, [pc, #56]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d009      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005eb4:	4b09      	ldr	r3, [pc, #36]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec2:	4906      	ldr	r1, [pc, #24]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005ec8:	7dbb      	ldrb	r3, [r7, #22]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e000      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	58024400 	.word	0x58024400

08005ee0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b090      	sub	sp, #64	; 0x40
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eee:	f040 8089 	bne.w	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005ef2:	4b91      	ldr	r3, [pc, #580]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d87d      	bhi.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f1d 	.word	0x08005f1d
 8005f0c:	08005f41 	.word	0x08005f41
 8005f10:	08005f65 	.word	0x08005f65
 8005f14:	08005ff9 	.word	0x08005ff9
 8005f18:	08005f89 	.word	0x08005f89
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f1c:	4b86      	ldr	r3, [pc, #536]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f28:	d107      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fec2 	bl	8006cb8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f38:	e3f4      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f3e:	e3f1      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f40:	4b7d      	ldr	r3, [pc, #500]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f4c:	d107      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f4e:	f107 0318 	add.w	r3, r7, #24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fc08 	bl	8006768 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f5c:	e3e2      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f62:	e3df      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f64:	4b74      	ldr	r3, [pc, #464]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f70:	d107      	bne.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f72:	f107 030c 	add.w	r3, r7, #12
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fd4a 	bl	8006a10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f80:	e3d0      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f86:	e3cd      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f88:	4b6b      	ldr	r3, [pc, #428]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f90:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f92:	4b69      	ldr	r3, [pc, #420]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d109      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fa4:	4b64      	ldr	r3, [pc, #400]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	08db      	lsrs	r3, r3, #3
 8005faa:	f003 0303 	and.w	r3, r3, #3
 8005fae:	4a63      	ldr	r2, [pc, #396]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb6:	e01e      	b.n	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fb8:	4b5f      	ldr	r3, [pc, #380]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc4:	d106      	bne.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fcc:	d102      	bne.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005fce:	4b5c      	ldr	r3, [pc, #368]	; (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd2:	e010      	b.n	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fd4:	4b58      	ldr	r3, [pc, #352]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fe0:	d106      	bne.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fe8:	d102      	bne.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005fea:	4b56      	ldr	r3, [pc, #344]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fee:	e002      	b.n	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005ff4:	e396      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005ff6:	e395      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ff8:	4b53      	ldr	r3, [pc, #332]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ffc:	e392      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006002:	e38f      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800600a:	f040 809f 	bne.w	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800600e:	4b4a      	ldr	r3, [pc, #296]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006012:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006016:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800601e:	d04d      	beq.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006026:	f200 8084 	bhi.w	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	2bc0      	cmp	r3, #192	; 0xc0
 800602e:	d07d      	beq.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	2bc0      	cmp	r3, #192	; 0xc0
 8006034:	d87d      	bhi.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	2b80      	cmp	r3, #128	; 0x80
 800603a:	d02d      	beq.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	2b80      	cmp	r3, #128	; 0x80
 8006040:	d877      	bhi.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	2b40      	cmp	r3, #64	; 0x40
 800604c:	d012      	beq.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800604e:	e070      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006050:	4b39      	ldr	r3, [pc, #228]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006058:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800605c:	d107      	bne.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800605e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fe28 	bl	8006cb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800606c:	e35a      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006072:	e357      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006074:	4b30      	ldr	r3, [pc, #192]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800607c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006080:	d107      	bne.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006082:	f107 0318 	add.w	r3, r7, #24
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fb6e 	bl	8006768 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006090:	e348      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8006092:	2300      	movs	r3, #0
 8006094:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006096:	e345      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006098:	4b27      	ldr	r3, [pc, #156]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060a4:	d107      	bne.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060a6:	f107 030c 	add.w	r3, r7, #12
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fcb0 	bl	8006a10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80060b4:	e336      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80060b6:	2300      	movs	r3, #0
 80060b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060ba:	e333      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80060bc:	4b1e      	ldr	r3, [pc, #120]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060c4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060c6:	4b1c      	ldr	r3, [pc, #112]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d10c      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 80060d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d109      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060d8:	4b17      	ldr	r3, [pc, #92]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	08db      	lsrs	r3, r3, #3
 80060de:	f003 0303 	and.w	r3, r3, #3
 80060e2:	4a16      	ldr	r2, [pc, #88]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80060e4:	fa22 f303 	lsr.w	r3, r2, r3
 80060e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060ea:	e01e      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060ec:	4b12      	ldr	r3, [pc, #72]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f8:	d106      	bne.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80060fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006100:	d102      	bne.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006102:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006106:	e010      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006108:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006114:	d106      	bne.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800611c:	d102      	bne.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800611e:	4b09      	ldr	r3, [pc, #36]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006122:	e002      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006128:	e2fc      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800612a:	e2fb      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800612e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006130:	e2f8      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8006132:	2300      	movs	r3, #0
 8006134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006136:	e2f5      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006138:	58024400 	.word	0x58024400
 800613c:	03d09000 	.word	0x03d09000
 8006140:	003d0900 	.word	0x003d0900
 8006144:	007a1200 	.word	0x007a1200
 8006148:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006152:	f040 809c 	bne.w	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8006156:	4b9d      	ldr	r3, [pc, #628]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800615e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006166:	d054      	beq.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800616e:	f200 808b 	bhi.w	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006178:	f000 8083 	beq.w	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006182:	f200 8081 	bhi.w	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618c:	d02f      	beq.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006194:	d878      	bhi.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	2b00      	cmp	r3, #0
 800619a:	d004      	beq.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a2:	d012      	beq.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80061a4:	e070      	b.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061a6:	4b89      	ldr	r3, [pc, #548]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061b2:	d107      	bne.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fd7d 	bl	8006cb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061c2:	e2af      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061c8:	e2ac      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061ca:	4b80      	ldr	r3, [pc, #512]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061d6:	d107      	bne.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061d8:	f107 0318 	add.w	r3, r7, #24
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fac3 	bl	8006768 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061e6:	e29d      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061ec:	e29a      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061ee:	4b77      	ldr	r3, [pc, #476]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061fa:	d107      	bne.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061fc:	f107 030c 	add.w	r3, r7, #12
 8006200:	4618      	mov	r0, r3
 8006202:	f000 fc05 	bl	8006a10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800620a:	e28b      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800620c:	2300      	movs	r3, #0
 800620e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006210:	e288      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006212:	4b6e      	ldr	r3, [pc, #440]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006216:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800621a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800621c:	4b6b      	ldr	r3, [pc, #428]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b04      	cmp	r3, #4
 8006226:	d10c      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8006228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622a:	2b00      	cmp	r3, #0
 800622c:	d109      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800622e:	4b67      	ldr	r3, [pc, #412]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	08db      	lsrs	r3, r3, #3
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	4a65      	ldr	r2, [pc, #404]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 800623a:	fa22 f303 	lsr.w	r3, r2, r3
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006240:	e01e      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006242:	4b62      	ldr	r3, [pc, #392]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800624e:	d106      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8006250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006256:	d102      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006258:	4b5e      	ldr	r3, [pc, #376]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800625a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800625c:	e010      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800625e:	4b5b      	ldr	r3, [pc, #364]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800626a:	d106      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006272:	d102      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006274:	4b58      	ldr	r3, [pc, #352]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8006276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006278:	e002      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 800627e:	e251      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006280:	e250      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006282:	4b56      	ldr	r3, [pc, #344]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006284:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006286:	e24d      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800628c:	e24a      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006294:	f040 80a7 	bne.w	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006298:	4b4c      	ldr	r3, [pc, #304]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800629a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800629c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80062a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062a8:	d055      	beq.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062b0:	f200 8096 	bhi.w	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062ba:	f000 8084 	beq.w	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 80062be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062c4:	f200 808c 	bhi.w	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80062c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ce:	d030      	beq.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80062d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d6:	f200 8083 	bhi.w	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d004      	beq.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 80062e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e6:	d012      	beq.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 80062e8:	e07a      	b.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062ea:	4b38      	ldr	r3, [pc, #224]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062f6:	d107      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fcdb 	bl	8006cb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006306:	e20d      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800630c:	e20a      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800630e:	4b2f      	ldr	r3, [pc, #188]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800631a:	d107      	bne.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800631c:	f107 0318 	add.w	r3, r7, #24
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fa21 	bl	8006768 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800632a:	e1fb      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006330:	e1f8      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006332:	4b26      	ldr	r3, [pc, #152]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800633a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800633e:	d107      	bne.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006340:	f107 030c 	add.w	r3, r7, #12
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fb63 	bl	8006a10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800634e:	e1e9      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8006350:	2300      	movs	r3, #0
 8006352:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006354:	e1e6      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800635e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006360:	4b1a      	ldr	r3, [pc, #104]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b04      	cmp	r3, #4
 800636a:	d10c      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 800636c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636e:	2b00      	cmp	r3, #0
 8006370:	d109      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006372:	4b16      	ldr	r3, [pc, #88]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	08db      	lsrs	r3, r3, #3
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	4a14      	ldr	r2, [pc, #80]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 800637e:	fa22 f303 	lsr.w	r3, r2, r3
 8006382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006384:	e01e      	b.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006386:	4b11      	ldr	r3, [pc, #68]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006392:	d106      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8006394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800639a:	d102      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800639c:	4b0d      	ldr	r3, [pc, #52]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800639e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063a0:	e010      	b.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063a2:	4b0a      	ldr	r3, [pc, #40]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ae:	d106      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80063b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063b6:	d102      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80063b8:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063bc:	e002      	b.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80063c2:	e1af      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80063c4:	e1ae      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80063c6:	4b05      	ldr	r3, [pc, #20]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80063c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063ca:	e1ab      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80063cc:	58024400 	.word	0x58024400
 80063d0:	03d09000 	.word	0x03d09000
 80063d4:	003d0900 	.word	0x003d0900
 80063d8:	007a1200 	.word	0x007a1200
 80063dc:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 80063e0:	2300      	movs	r3, #0
 80063e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063e4:	e19e      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063ec:	d173      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80063ee:	4b9d      	ldr	r3, [pc, #628]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80063f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063f6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80063f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063fe:	d02f      	beq.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006406:	d863      	bhi.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	2b00      	cmp	r3, #0
 800640c:	d004      	beq.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006414:	d012      	beq.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8006416:	e05b      	b.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006418:	4b92      	ldr	r3, [pc, #584]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006424:	d107      	bne.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006426:	f107 0318 	add.w	r3, r7, #24
 800642a:	4618      	mov	r0, r3
 800642c:	f000 f99c 	bl	8006768 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006434:	e176      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800643a:	e173      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800643c:	4b89      	ldr	r3, [pc, #548]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006448:	d107      	bne.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800644a:	f107 030c 	add.w	r3, r7, #12
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fade 	bl	8006a10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006458:	e164      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800645e:	e161      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006460:	4b80      	ldr	r3, [pc, #512]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8006462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006464:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006468:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800646a:	4b7e      	ldr	r3, [pc, #504]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b04      	cmp	r3, #4
 8006474:	d10c      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8006476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006478:	2b00      	cmp	r3, #0
 800647a:	d109      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800647c:	4b79      	ldr	r3, [pc, #484]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	08db      	lsrs	r3, r3, #3
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	4a78      	ldr	r2, [pc, #480]	; (8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006488:	fa22 f303 	lsr.w	r3, r2, r3
 800648c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800648e:	e01e      	b.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006490:	4b74      	ldr	r3, [pc, #464]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800649c:	d106      	bne.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800649e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064a4:	d102      	bne.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80064a6:	4b71      	ldr	r3, [pc, #452]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80064a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064aa:	e010      	b.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064ac:	4b6d      	ldr	r3, [pc, #436]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064b8:	d106      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80064ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064c0:	d102      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80064c2:	4b6b      	ldr	r3, [pc, #428]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80064c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064c6:	e002      	b.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80064c8:	2300      	movs	r3, #0
 80064ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80064cc:	e12a      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80064ce:	e129      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064d4:	e126      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064dc:	d133      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80064de:	4b61      	ldr	r3, [pc, #388]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80064e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80064e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d004      	beq.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80064ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f4:	d012      	beq.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80064f6:	e023      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064f8:	4b5a      	ldr	r3, [pc, #360]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006504:	d107      	bne.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fbd4 	bl	8006cb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006514:	e106      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800651a:	e103      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800651c:	4b51      	ldr	r3, [pc, #324]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006528:	d107      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800652a:	f107 0318 	add.w	r3, r7, #24
 800652e:	4618      	mov	r0, r3
 8006530:	f000 f91a 	bl	8006768 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006538:	e0f4      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800653a:	2300      	movs	r3, #0
 800653c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800653e:	e0f1      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006544:	e0ee      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800654c:	f040 809b 	bne.w	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006550:	4b44      	ldr	r3, [pc, #272]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8006552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006554:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006558:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006560:	f000 808b 	beq.w	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800656a:	f200 8089 	bhi.w	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006574:	d06c      	beq.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800657c:	f200 8080 	bhi.w	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8006580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006586:	d056      	beq.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800658e:	d877      	bhi.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8006590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006592:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006596:	d03b      	beq.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800659e:	d86f      	bhi.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80065a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065a6:	d021      	beq.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 80065a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ae:	d867      	bhi.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d004      	beq.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065bc:	d004      	beq.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 80065be:	e05f      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80065c0:	f000 f8bc 	bl	800673c <HAL_RCCEx_GetD3PCLK1Freq>
 80065c4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80065c6:	e0ad      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065c8:	4b26      	ldr	r3, [pc, #152]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065d4:	d107      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065d6:	f107 0318 	add.w	r3, r7, #24
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 f8c4 	bl	8006768 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80065e4:	e09e      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ea:	e09b      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065ec:	4b1d      	ldr	r3, [pc, #116]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065f8:	d107      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065fa:	f107 030c 	add.w	r3, r7, #12
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fa06 	bl	8006a10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006608:	e08c      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800660a:	2300      	movs	r3, #0
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800660e:	e089      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006610:	4b14      	ldr	r3, [pc, #80]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b04      	cmp	r3, #4
 800661a:	d109      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800661c:	4b11      	ldr	r3, [pc, #68]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	08db      	lsrs	r3, r3, #3
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	4a10      	ldr	r2, [pc, #64]	; (8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
 800662c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800662e:	e079      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006634:	e076      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006636:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006642:	d102      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8006644:	4b09      	ldr	r3, [pc, #36]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006646:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006648:	e06c      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800664e:	e069      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006650:	4b04      	ldr	r3, [pc, #16]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800665c:	d10a      	bne.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 800665e:	4b04      	ldr	r3, [pc, #16]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006660:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006662:	e05f      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006664:	58024400 	.word	0x58024400
 8006668:	03d09000 	.word	0x03d09000
 800666c:	003d0900 	.word	0x003d0900
 8006670:	007a1200 	.word	0x007a1200
          frequency = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006678:	e054      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800667a:	4b2d      	ldr	r3, [pc, #180]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800667c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800667e:	e051      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006684:	e04e      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800668c:	d148      	bne.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800668e:	4b29      	ldr	r3, [pc, #164]	; (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8006690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006692:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006696:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800669e:	d02a      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a6:	d838      	bhi.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80066a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 80066ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066b4:	d00d      	beq.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80066b6:	e030      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80066b8:	4b1e      	ldr	r3, [pc, #120]	; (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066c4:	d102      	bne.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 80066c6:	4b1c      	ldr	r3, [pc, #112]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80066c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80066ca:	e02b      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066d0:	e028      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066d2:	4b18      	ldr	r3, [pc, #96]	; (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066de:	d107      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 fae7 	bl	8006cb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80066ee:	e019      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80066f0:	2300      	movs	r3, #0
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066f4:	e016      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066f6:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006702:	d107      	bne.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006704:	f107 0318 	add.w	r3, r7, #24
 8006708:	4618      	mov	r0, r3
 800670a:	f000 f82d 	bl	8006768 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006712:	e007      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006718:	e004      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 800671a:	2300      	movs	r3, #0
 800671c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800671e:	e001      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8006720:	2300      	movs	r3, #0
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006726:	4618      	mov	r0, r3
 8006728:	3740      	adds	r7, #64	; 0x40
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	00bb8000 	.word	0x00bb8000
 8006734:	58024400 	.word	0x58024400
 8006738:	007a1200 	.word	0x007a1200

0800673c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006740:	f7fe fc66 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 8006744:	4602      	mov	r2, r0
 8006746:	4b06      	ldr	r3, [pc, #24]	; (8006760 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	091b      	lsrs	r3, r3, #4
 800674c:	f003 0307 	and.w	r3, r3, #7
 8006750:	4904      	ldr	r1, [pc, #16]	; (8006764 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006752:	5ccb      	ldrb	r3, [r1, r3]
 8006754:	f003 031f 	and.w	r3, r3, #31
 8006758:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800675c:	4618      	mov	r0, r3
 800675e:	bd80      	pop	{r7, pc}
 8006760:	58024400 	.word	0x58024400
 8006764:	0800c9e0 	.word	0x0800c9e0

08006768 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006768:	b480      	push	{r7}
 800676a:	b089      	sub	sp, #36	; 0x24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006770:	4ba1      	ldr	r3, [pc, #644]	; (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006774:	f003 0303 	and.w	r3, r3, #3
 8006778:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800677a:	4b9f      	ldr	r3, [pc, #636]	; (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800677c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677e:	0b1b      	lsrs	r3, r3, #12
 8006780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006784:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006786:	4b9c      	ldr	r3, [pc, #624]	; (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	091b      	lsrs	r3, r3, #4
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006792:	4b99      	ldr	r3, [pc, #612]	; (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006796:	08db      	lsrs	r3, r3, #3
 8006798:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	fb02 f303 	mul.w	r3, r2, r3
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8111 	beq.w	80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	f000 8083 	beq.w	80068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	f200 80a1 	bhi.w	8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d056      	beq.n	8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067d2:	e099      	b.n	8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067d4:	4b88      	ldr	r3, [pc, #544]	; (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d02d      	beq.n	800683c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067e0:	4b85      	ldr	r3, [pc, #532]	; (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	08db      	lsrs	r3, r3, #3
 80067e6:	f003 0303 	and.w	r3, r3, #3
 80067ea:	4a84      	ldr	r2, [pc, #528]	; (80069fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067ec:	fa22 f303 	lsr.w	r3, r2, r3
 80067f0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	ee07 3a90 	vmov	s15, r3
 80067f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800680a:	4b7b      	ldr	r3, [pc, #492]	; (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800680c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681a:	ed97 6a03 	vldr	s12, [r7, #12]
 800681e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800682e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006836:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800683a:	e087      	b.n	800694c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006846:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800684a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800684e:	4b6a      	ldr	r3, [pc, #424]	; (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006862:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800686a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800686e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800687e:	e065      	b.n	800694c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800688e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006892:	4b59      	ldr	r3, [pc, #356]	; (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068c2:	e043      	b.n	800694c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d6:	4b48      	ldr	r3, [pc, #288]	; (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068de:	ee07 3a90 	vmov	s15, r3
 80068e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006902:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006906:	e021      	b.n	800694c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006912:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691a:	4b37      	ldr	r3, [pc, #220]	; (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692a:	ed97 6a03 	vldr	s12, [r7, #12]
 800692e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800693e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006946:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800694a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800694c:	4b2a      	ldr	r3, [pc, #168]	; (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	0a5b      	lsrs	r3, r3, #9
 8006952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006962:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006966:	edd7 6a07 	vldr	s13, [r7, #28]
 800696a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800696e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006972:	ee17 2a90 	vmov	r2, s15
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800697a:	4b1f      	ldr	r3, [pc, #124]	; (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	0c1b      	lsrs	r3, r3, #16
 8006980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006984:	ee07 3a90 	vmov	s15, r3
 8006988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006990:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006994:	edd7 6a07 	vldr	s13, [r7, #28]
 8006998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800699c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069a0:	ee17 2a90 	vmov	r2, s15
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80069a8:	4b13      	ldr	r3, [pc, #76]	; (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	0e1b      	lsrs	r3, r3, #24
 80069ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b2:	ee07 3a90 	vmov	s15, r3
 80069b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80069c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ce:	ee17 2a90 	vmov	r2, s15
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069d6:	e008      	b.n	80069ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	609a      	str	r2, [r3, #8]
}
 80069ea:	bf00      	nop
 80069ec:	3724      	adds	r7, #36	; 0x24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	58024400 	.word	0x58024400
 80069fc:	03d09000 	.word	0x03d09000
 8006a00:	46000000 	.word	0x46000000
 8006a04:	4c742400 	.word	0x4c742400
 8006a08:	4a742400 	.word	0x4a742400
 8006a0c:	4af42400 	.word	0x4af42400

08006a10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b089      	sub	sp, #36	; 0x24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a18:	4ba1      	ldr	r3, [pc, #644]	; (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1c:	f003 0303 	and.w	r3, r3, #3
 8006a20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006a22:	4b9f      	ldr	r3, [pc, #636]	; (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	0d1b      	lsrs	r3, r3, #20
 8006a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a2e:	4b9c      	ldr	r3, [pc, #624]	; (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a32:	0a1b      	lsrs	r3, r3, #8
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006a3a:	4b99      	ldr	r3, [pc, #612]	; (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3e:	08db      	lsrs	r3, r3, #3
 8006a40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	fb02 f303 	mul.w	r3, r2, r3
 8006a4a:	ee07 3a90 	vmov	s15, r3
 8006a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8111 	beq.w	8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	f000 8083 	beq.w	8006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	f200 80a1 	bhi.w	8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d056      	beq.n	8006b28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a7a:	e099      	b.n	8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a7c:	4b88      	ldr	r3, [pc, #544]	; (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d02d      	beq.n	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a88:	4b85      	ldr	r3, [pc, #532]	; (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	08db      	lsrs	r3, r3, #3
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	4a84      	ldr	r2, [pc, #528]	; (8006ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a94:	fa22 f303 	lsr.w	r3, r2, r3
 8006a98:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	ee07 3a90 	vmov	s15, r3
 8006aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab2:	4b7b      	ldr	r3, [pc, #492]	; (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aba:	ee07 3a90 	vmov	s15, r3
 8006abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ac6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ade:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006ae2:	e087      	b.n	8006bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af6:	4b6a      	ldr	r3, [pc, #424]	; (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afe:	ee07 3a90 	vmov	s15, r3
 8006b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b26:	e065      	b.n	8006bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3a:	4b59      	ldr	r3, [pc, #356]	; (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b42:	ee07 3a90 	vmov	s15, r3
 8006b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b6a:	e043      	b.n	8006bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7e:	4b48      	ldr	r3, [pc, #288]	; (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006baa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bae:	e021      	b.n	8006bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc2:	4b37      	ldr	r3, [pc, #220]	; (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bf2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006bf4:	4b2a      	ldr	r3, [pc, #168]	; (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	0a5b      	lsrs	r3, r3, #9
 8006bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c1a:	ee17 2a90 	vmov	r2, s15
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006c22:	4b1f      	ldr	r3, [pc, #124]	; (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	0c1b      	lsrs	r3, r3, #16
 8006c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c2c:	ee07 3a90 	vmov	s15, r3
 8006c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c48:	ee17 2a90 	vmov	r2, s15
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006c50:	4b13      	ldr	r3, [pc, #76]	; (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c54:	0e1b      	lsrs	r3, r3, #24
 8006c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c76:	ee17 2a90 	vmov	r2, s15
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c7e:	e008      	b.n	8006c92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	609a      	str	r2, [r3, #8]
}
 8006c92:	bf00      	nop
 8006c94:	3724      	adds	r7, #36	; 0x24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	58024400 	.word	0x58024400
 8006ca4:	03d09000 	.word	0x03d09000
 8006ca8:	46000000 	.word	0x46000000
 8006cac:	4c742400 	.word	0x4c742400
 8006cb0:	4a742400 	.word	0x4a742400
 8006cb4:	4af42400 	.word	0x4af42400

08006cb8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b089      	sub	sp, #36	; 0x24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cc0:	4ba0      	ldr	r3, [pc, #640]	; (8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006cca:	4b9e      	ldr	r3, [pc, #632]	; (8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cce:	091b      	lsrs	r3, r3, #4
 8006cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cd4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006cd6:	4b9b      	ldr	r3, [pc, #620]	; (8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006ce0:	4b98      	ldr	r3, [pc, #608]	; (8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce4:	08db      	lsrs	r3, r3, #3
 8006ce6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	fb02 f303 	mul.w	r3, r2, r3
 8006cf0:	ee07 3a90 	vmov	s15, r3
 8006cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 8111 	beq.w	8006f26 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	f000 8083 	beq.w	8006e12 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	f200 80a1 	bhi.w	8006e56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d056      	beq.n	8006dce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006d20:	e099      	b.n	8006e56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d22:	4b88      	ldr	r3, [pc, #544]	; (8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d02d      	beq.n	8006d8a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d2e:	4b85      	ldr	r3, [pc, #532]	; (8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	08db      	lsrs	r3, r3, #3
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	4a83      	ldr	r2, [pc, #524]	; (8006f48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	ee07 3a90 	vmov	s15, r3
 8006d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d58:	4b7a      	ldr	r3, [pc, #488]	; (8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d60:	ee07 3a90 	vmov	s15, r3
 8006d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d68:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d6c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006f4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d84:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006d88:	e087      	b.n	8006e9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	ee07 3a90 	vmov	s15, r3
 8006d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d94:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006d98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d9c:	4b69      	ldr	r3, [pc, #420]	; (8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da4:	ee07 3a90 	vmov	s15, r3
 8006da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dac:	ed97 6a03 	vldr	s12, [r7, #12]
 8006db0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006f4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006db4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dcc:	e065      	b.n	8006e9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	ee07 3a90 	vmov	s15, r3
 8006dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006f54 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de0:	4b58      	ldr	r3, [pc, #352]	; (8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de8:	ee07 3a90 	vmov	s15, r3
 8006dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006df4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006f4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006df8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e10:	e043      	b.n	8006e9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	ee07 3a90 	vmov	s15, r3
 8006e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006f58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e24:	4b47      	ldr	r3, [pc, #284]	; (8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2c:	ee07 3a90 	vmov	s15, r3
 8006e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e34:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e38:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006f4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e54:	e021      	b.n	8006e9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	ee07 3a90 	vmov	s15, r3
 8006e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e60:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006e64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e68:	4b36      	ldr	r3, [pc, #216]	; (8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e70:	ee07 3a90 	vmov	s15, r3
 8006e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e78:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e7c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006f4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e98:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006e9a:	4b2a      	ldr	r3, [pc, #168]	; (8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	0a5b      	lsrs	r3, r3, #9
 8006ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea4:	ee07 3a90 	vmov	s15, r3
 8006ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ec0:	ee17 2a90 	vmov	r2, s15
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006ec8:	4b1e      	ldr	r3, [pc, #120]	; (8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ecc:	0c1b      	lsrs	r3, r3, #16
 8006ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eee:	ee17 2a90 	vmov	r2, s15
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006ef6:	4b13      	ldr	r3, [pc, #76]	; (8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	0e1b      	lsrs	r3, r3, #24
 8006efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f00:	ee07 3a90 	vmov	s15, r3
 8006f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f10:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f1c:	ee17 2a90 	vmov	r2, s15
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006f24:	e008      	b.n	8006f38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	609a      	str	r2, [r3, #8]
}
 8006f38:	bf00      	nop
 8006f3a:	3724      	adds	r7, #36	; 0x24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	58024400 	.word	0x58024400
 8006f48:	03d09000 	.word	0x03d09000
 8006f4c:	46000000 	.word	0x46000000
 8006f50:	4c742400 	.word	0x4c742400
 8006f54:	4a742400 	.word	0x4a742400
 8006f58:	4af42400 	.word	0x4af42400

08006f5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f6a:	4b53      	ldr	r3, [pc, #332]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d101      	bne.n	8006f7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e099      	b.n	80070ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f7a:	4b4f      	ldr	r3, [pc, #316]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a4e      	ldr	r2, [pc, #312]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006f80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f86:	f7fb f84b 	bl	8002020 <HAL_GetTick>
 8006f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f8c:	e008      	b.n	8006fa0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006f8e:	f7fb f847 	bl	8002020 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e086      	b.n	80070ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fa0:	4b45      	ldr	r3, [pc, #276]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1f0      	bne.n	8006f8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fac:	4b42      	ldr	r3, [pc, #264]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	031b      	lsls	r3, r3, #12
 8006fba:	493f      	ldr	r1, [pc, #252]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	628b      	str	r3, [r1, #40]	; 0x28
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	025b      	lsls	r3, r3, #9
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	041b      	lsls	r3, r3, #16
 8006fde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	061b      	lsls	r3, r3, #24
 8006fec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ff0:	4931      	ldr	r1, [pc, #196]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ff6:	4b30      	ldr	r3, [pc, #192]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	492d      	ldr	r1, [pc, #180]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007004:	4313      	orrs	r3, r2
 8007006:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007008:	4b2b      	ldr	r3, [pc, #172]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	f023 0220 	bic.w	r2, r3, #32
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	4928      	ldr	r1, [pc, #160]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007016:	4313      	orrs	r3, r2
 8007018:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800701a:	4b27      	ldr	r3, [pc, #156]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 800701c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701e:	4a26      	ldr	r2, [pc, #152]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007020:	f023 0310 	bic.w	r3, r3, #16
 8007024:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007026:	4b24      	ldr	r3, [pc, #144]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800702a:	4b24      	ldr	r3, [pc, #144]	; (80070bc <RCCEx_PLL2_Config+0x160>)
 800702c:	4013      	ands	r3, r2
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	69d2      	ldr	r2, [r2, #28]
 8007032:	00d2      	lsls	r2, r2, #3
 8007034:	4920      	ldr	r1, [pc, #128]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007036:	4313      	orrs	r3, r2
 8007038:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800703a:	4b1f      	ldr	r3, [pc, #124]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	4a1e      	ldr	r2, [pc, #120]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007040:	f043 0310 	orr.w	r3, r3, #16
 8007044:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d106      	bne.n	800705a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800704c:	4b1a      	ldr	r3, [pc, #104]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007050:	4a19      	ldr	r2, [pc, #100]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007056:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007058:	e00f      	b.n	800707a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d106      	bne.n	800706e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007060:	4b15      	ldr	r3, [pc, #84]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	4a14      	ldr	r2, [pc, #80]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800706a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800706c:	e005      	b.n	800707a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800706e:	4b12      	ldr	r3, [pc, #72]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	4a11      	ldr	r2, [pc, #68]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007074:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007078:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800707a:	4b0f      	ldr	r3, [pc, #60]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a0e      	ldr	r2, [pc, #56]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007080:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007086:	f7fa ffcb 	bl	8002020 <HAL_GetTick>
 800708a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800708c:	e008      	b.n	80070a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800708e:	f7fa ffc7 	bl	8002020 <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d901      	bls.n	80070a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e006      	b.n	80070ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <RCCEx_PLL2_Config+0x15c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0f0      	beq.n	800708e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	58024400 	.word	0x58024400
 80070bc:	ffff0007 	.word	0xffff0007

080070c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070ce:	4b53      	ldr	r3, [pc, #332]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 80070d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d2:	f003 0303 	and.w	r3, r3, #3
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d101      	bne.n	80070de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e099      	b.n	8007212 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070de:	4b4f      	ldr	r3, [pc, #316]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a4e      	ldr	r2, [pc, #312]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 80070e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ea:	f7fa ff99 	bl	8002020 <HAL_GetTick>
 80070ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070f0:	e008      	b.n	8007104 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80070f2:	f7fa ff95 	bl	8002020 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d901      	bls.n	8007104 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e086      	b.n	8007212 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007104:	4b45      	ldr	r3, [pc, #276]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1f0      	bne.n	80070f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007110:	4b42      	ldr	r3, [pc, #264]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 8007112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007114:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	051b      	lsls	r3, r3, #20
 800711e:	493f      	ldr	r1, [pc, #252]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 8007120:	4313      	orrs	r3, r2
 8007122:	628b      	str	r3, [r1, #40]	; 0x28
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	3b01      	subs	r3, #1
 800712a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	3b01      	subs	r3, #1
 8007134:	025b      	lsls	r3, r3, #9
 8007136:	b29b      	uxth	r3, r3
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	3b01      	subs	r3, #1
 8007140:	041b      	lsls	r3, r3, #16
 8007142:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	3b01      	subs	r3, #1
 800714e:	061b      	lsls	r3, r3, #24
 8007150:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007154:	4931      	ldr	r1, [pc, #196]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 8007156:	4313      	orrs	r3, r2
 8007158:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800715a:	4b30      	ldr	r3, [pc, #192]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	492d      	ldr	r1, [pc, #180]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 8007168:	4313      	orrs	r3, r2
 800716a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800716c:	4b2b      	ldr	r3, [pc, #172]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	4928      	ldr	r1, [pc, #160]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 800717a:	4313      	orrs	r3, r2
 800717c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800717e:	4b27      	ldr	r3, [pc, #156]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	4a26      	ldr	r2, [pc, #152]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 8007184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007188:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800718a:	4b24      	ldr	r3, [pc, #144]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 800718c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800718e:	4b24      	ldr	r3, [pc, #144]	; (8007220 <RCCEx_PLL3_Config+0x160>)
 8007190:	4013      	ands	r3, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	69d2      	ldr	r2, [r2, #28]
 8007196:	00d2      	lsls	r2, r2, #3
 8007198:	4920      	ldr	r1, [pc, #128]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 800719a:	4313      	orrs	r3, r2
 800719c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800719e:	4b1f      	ldr	r3, [pc, #124]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	4a1e      	ldr	r2, [pc, #120]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 80071a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071b0:	4b1a      	ldr	r3, [pc, #104]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	4a19      	ldr	r2, [pc, #100]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 80071b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071bc:	e00f      	b.n	80071de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d106      	bne.n	80071d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071c4:	4b15      	ldr	r3, [pc, #84]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	4a14      	ldr	r2, [pc, #80]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 80071ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071d0:	e005      	b.n	80071de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071d2:	4b12      	ldr	r3, [pc, #72]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	4a11      	ldr	r2, [pc, #68]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 80071d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071de:	4b0f      	ldr	r3, [pc, #60]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a0e      	ldr	r2, [pc, #56]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 80071e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ea:	f7fa ff19 	bl	8002020 <HAL_GetTick>
 80071ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071f0:	e008      	b.n	8007204 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80071f2:	f7fa ff15 	bl	8002020 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d901      	bls.n	8007204 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e006      	b.n	8007212 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007204:	4b05      	ldr	r3, [pc, #20]	; (800721c <RCCEx_PLL3_Config+0x15c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0f0      	beq.n	80071f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007210:	7bfb      	ldrb	r3, [r7, #15]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	58024400 	.word	0x58024400
 8007220:	ffff0007 	.word	0xffff0007

08007224 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08a      	sub	sp, #40	; 0x28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e075      	b.n	8007322 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d105      	bne.n	800724e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7fa fb83 	bl	8001954 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2204      	movs	r2, #4
 8007252:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f868 	bl	800732c <HAL_SD_InitCard>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e05d      	b.n	8007322 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007266:	f107 0308 	add.w	r3, r7, #8
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fda9 	bl	8007dc4 <HAL_SD_GetCardStatus>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e052      	b.n	8007322 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800727c:	7e3b      	ldrb	r3, [r7, #24]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007282:	7e7b      	ldrb	r3, [r7, #25]
 8007284:	b2db      	uxtb	r3, r3
 8007286:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728c:	2b01      	cmp	r3, #1
 800728e:	d10a      	bne.n	80072a6 <HAL_SD_Init+0x82>
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	2b00      	cmp	r3, #0
 8007294:	d102      	bne.n	800729c <HAL_SD_Init+0x78>
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d004      	beq.n	80072a6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072a2:	659a      	str	r2, [r3, #88]	; 0x58
 80072a4:	e00b      	b.n	80072be <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d104      	bne.n	80072b8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072b4:	659a      	str	r2, [r3, #88]	; 0x58
 80072b6:	e002      	b.n	80072be <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fe67 	bl	8007f98 <HAL_SD_ConfigWideBusOperation>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e026      	b.n	8007322 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80072d4:	f7fa fea4 	bl	8002020 <HAL_GetTick>
 80072d8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80072da:	e011      	b.n	8007300 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80072dc:	f7fa fea0 	bl	8002020 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ea:	d109      	bne.n	8007300 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072f2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e010      	b.n	8007322 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 ff5b 	bl	80081bc <HAL_SD_GetCardState>
 8007306:	4603      	mov	r3, r0
 8007308:	2b04      	cmp	r3, #4
 800730a:	d1e7      	bne.n	80072dc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3728      	adds	r7, #40	; 0x28
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800732c:	b590      	push	{r4, r7, lr}
 800732e:	b08d      	sub	sp, #52	; 0x34
 8007330:	af02      	add	r7, sp, #8
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800733c:	2300      	movs	r3, #0
 800733e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007340:	2300      	movs	r3, #0
 8007342:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007344:	2300      	movs	r3, #0
 8007346:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007348:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800734c:	f7fe fdc8 	bl	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007350:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	d109      	bne.n	800736c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007366:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e06a      	b.n	8007442 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	0a1b      	lsrs	r3, r3, #8
 8007370:	4a36      	ldr	r2, [pc, #216]	; (800744c <HAL_SD_InitCard+0x120>)
 8007372:	fba2 2303 	umull	r2, r3, r2, r3
 8007376:	091b      	lsrs	r3, r3, #4
 8007378:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681c      	ldr	r4, [r3, #0]
 800737e:	466a      	mov	r2, sp
 8007380:	f107 0318 	add.w	r3, r7, #24
 8007384:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007388:	e882 0003 	stmia.w	r2, {r0, r1}
 800738c:	f107 030c 	add.w	r3, r7, #12
 8007390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007392:	4620      	mov	r0, r4
 8007394:	f003 fbb8 	bl	800ab08 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f003 fbfb 	bl	800ab98 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80073ae:	4a28      	ldr	r2, [pc, #160]	; (8007450 <HAL_SD_InitCard+0x124>)
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b6:	3301      	adds	r3, #1
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fa fe3d 	bl	8002038 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 ffea 	bl	8008398 <SD_PowerON>
 80073c4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00b      	beq.n	80073e4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e02e      	b.n	8007442 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 ff09 	bl	80081fc <SD_InitCard>
 80073ea:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00b      	beq.n	800740a <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e01b      	b.n	8007442 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007412:	4618      	mov	r0, r3
 8007414:	f003 fc56 	bl	800acc4 <SDMMC_CmdBlockLength>
 8007418:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00f      	beq.n	8007440 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a0b      	ldr	r2, [pc, #44]	; (8007454 <HAL_SD_InitCard+0x128>)
 8007426:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e000      	b.n	8007442 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	372c      	adds	r7, #44	; 0x2c
 8007446:	46bd      	mov	sp, r7
 8007448:	bd90      	pop	{r4, r7, pc}
 800744a:	bf00      	nop
 800744c:	014f8b59 	.word	0x014f8b59
 8007450:	00012110 	.word	0x00012110
 8007454:	1fe00fff 	.word	0x1fe00fff

08007458 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08c      	sub	sp, #48	; 0x30
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d107      	bne.n	8007480 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007474:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e08d      	b.n	800759c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b01      	cmp	r3, #1
 800748a:	f040 8086 	bne.w	800759a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	441a      	add	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800749e:	429a      	cmp	r2, r3
 80074a0:	d907      	bls.n	80074b2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e074      	b.n	800759c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2203      	movs	r2, #3
 80074b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2200      	movs	r2, #0
 80074c0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	025a      	lsls	r2, r3, #9
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d002      	beq.n	80074de <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80074d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074da:	025b      	lsls	r3, r3, #9
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80074de:	f04f 33ff 	mov.w	r3, #4294967295
 80074e2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	025b      	lsls	r3, r3, #9
 80074e8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80074ea:	2390      	movs	r3, #144	; 0x90
 80074ec:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80074ee:	2302      	movs	r3, #2
 80074f0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f107 0210 	add.w	r2, r7, #16
 8007502:	4611      	mov	r1, r2
 8007504:	4618      	mov	r0, r3
 8007506:	f003 fbb1 	bl	800ac6c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007518:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2201      	movs	r2, #1
 8007528:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d90a      	bls.n	8007546 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2282      	movs	r2, #130	; 0x82
 8007534:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800753c:	4618      	mov	r0, r3
 800753e:	f003 fc07 	bl	800ad50 <SDMMC_CmdReadMultiBlock>
 8007542:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007544:	e009      	b.n	800755a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2281      	movs	r2, #129	; 0x81
 800754a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007552:	4618      	mov	r0, r3
 8007554:	f003 fbd9 	bl	800ad0a <SDMMC_CmdReadSingleBlock>
 8007558:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d012      	beq.n	8007586 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a0f      	ldr	r2, [pc, #60]	; (80075a4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007566:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	431a      	orrs	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e00a      	b.n	800759c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007594:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	e000      	b.n	800759c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800759a:	2302      	movs	r3, #2
  }
}
 800759c:	4618      	mov	r0, r3
 800759e:	3730      	adds	r7, #48	; 0x30
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	1fe00fff 	.word	0x1fe00fff

080075a8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08c      	sub	sp, #48	; 0x30
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d107      	bne.n	80075d0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e08d      	b.n	80076ec <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b01      	cmp	r3, #1
 80075da:	f040 8086 	bne.w	80076ea <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80075e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	441a      	add	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d907      	bls.n	8007602 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e074      	b.n	80076ec <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2203      	movs	r2, #3
 8007606:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2200      	movs	r2, #0
 8007610:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	025a      	lsls	r2, r3, #9
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	2b01      	cmp	r3, #1
 8007626:	d002      	beq.n	800762e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762a:	025b      	lsls	r3, r3, #9
 800762c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800762e:	f04f 33ff 	mov.w	r3, #4294967295
 8007632:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	025b      	lsls	r3, r3, #9
 8007638:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800763a:	2390      	movs	r3, #144	; 0x90
 800763c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800763e:	2300      	movs	r3, #0
 8007640:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007642:	2300      	movs	r3, #0
 8007644:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007646:	2300      	movs	r3, #0
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f107 0210 	add.w	r2, r7, #16
 8007652:	4611      	mov	r1, r2
 8007654:	4618      	mov	r0, r3
 8007656:	f003 fb09 	bl	800ac6c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007668:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2201      	movs	r2, #1
 8007678:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d90a      	bls.n	8007696 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	22a0      	movs	r2, #160	; 0xa0
 8007684:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800768c:	4618      	mov	r0, r3
 800768e:	f003 fba5 	bl	800addc <SDMMC_CmdWriteMultiBlock>
 8007692:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007694:	e009      	b.n	80076aa <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2290      	movs	r2, #144	; 0x90
 800769a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076a2:	4618      	mov	r0, r3
 80076a4:	f003 fb77 	bl	800ad96 <SDMMC_CmdWriteSingleBlock>
 80076a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80076aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d012      	beq.n	80076d6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a0f      	ldr	r2, [pc, #60]	; (80076f4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076be:	431a      	orrs	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e00a      	b.n	80076ec <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80076e4:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	e000      	b.n	80076ec <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80076ea:	2302      	movs	r3, #2
  }
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3730      	adds	r7, #48	; 0x30
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	1fe00fff 	.word	0x1fe00fff

080076f8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d008      	beq.n	8007726 <HAL_SD_IRQHandler+0x2e>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f003 0308 	and.w	r3, r3, #8
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 f926 	bl	8008970 <SD_Read_IT>
 8007724:	e19a      	b.n	8007a5c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800772c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 80ac 	beq.w	800788e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800773e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	4b59      	ldr	r3, [pc, #356]	; (80078b0 <HAL_SD_IRQHandler+0x1b8>)
 800774c:	400b      	ands	r3, r1
 800774e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800775e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800776e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f003 0308 	and.w	r3, r3, #8
 8007776:	2b00      	cmp	r3, #0
 8007778:	d038      	beq.n	80077ec <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <HAL_SD_IRQHandler+0x96>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b00      	cmp	r3, #0
 800778c:	d011      	beq.n	80077b2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f003 fb46 	bl	800ae24 <SDMMC_CmdStopTransfer>
 8007798:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d008      	beq.n	80077b2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f95b 	bl	8007a68 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a3f      	ldr	r2, [pc, #252]	; (80078b4 <HAL_SD_IRQHandler+0x1bc>)
 80077b8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d104      	bne.n	80077dc <HAL_SD_IRQHandler+0xe4>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f003 ffe3 	bl	800b7a8 <HAL_SD_RxCpltCallback>
 80077e2:	e13b      	b.n	8007a5c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f003 ffd5 	bl	800b794 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80077ea:	e137      	b.n	8007a5c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 8132 	beq.w	8007a5c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2200      	movs	r2, #0
 80077fe:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2200      	movs	r2, #0
 8007806:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2200      	movs	r2, #0
 800780e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d104      	bne.n	8007824 <HAL_SD_IRQHandler+0x12c>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f003 0320 	and.w	r3, r3, #32
 8007820:	2b00      	cmp	r3, #0
 8007822:	d011      	beq.n	8007848 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4618      	mov	r0, r3
 800782a:	f003 fafb 	bl	800ae24 <SDMMC_CmdStopTransfer>
 800782e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d008      	beq.n	8007848 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	431a      	orrs	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f910 	bl	8007a68 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f003 0310 	and.w	r3, r3, #16
 800785c:	2b00      	cmp	r3, #0
 800785e:	d104      	bne.n	800786a <HAL_SD_IRQHandler+0x172>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f003 0320 	and.w	r3, r3, #32
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f003 ff92 	bl	800b794 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <HAL_SD_IRQHandler+0x18e>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 80eb 	beq.w	8007a5c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f003 ff8e 	bl	800b7a8 <HAL_SD_RxCpltCallback>
}
 800788c:	e0e6      	b.n	8007a5c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00d      	beq.n	80078b8 <HAL_SD_IRQHandler+0x1c0>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f003 0308 	and.w	r3, r3, #8
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d008      	beq.n	80078b8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 f8a8 	bl	80089fc <SD_Write_IT>
 80078ac:	e0d6      	b.n	8007a5c <HAL_SD_IRQHandler+0x364>
 80078ae:	bf00      	nop
 80078b0:	ffff3ec5 	.word	0xffff3ec5
 80078b4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078be:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 809d 	beq.w	8007a02 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d005      	beq.n	80078e2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078da:	f043 0202 	orr.w	r2, r3, #2
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e8:	f003 0308 	and.w	r3, r3, #8
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f4:	f043 0208 	orr.w	r2, r3, #8
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d005      	beq.n	8007916 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790e:	f043 0220 	orr.w	r2, r3, #32
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007928:	f043 0210 	orr.w	r2, r3, #16
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a4b      	ldr	r2, [pc, #300]	; (8007a64 <HAL_SD_IRQHandler+0x36c>)
 8007936:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007946:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007956:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007966:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007976:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4618      	mov	r0, r3
 800797e:	f003 fa51 	bl	800ae24 <SDMMC_CmdStopTransfer>
 8007982:	4602      	mov	r2, r0
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68da      	ldr	r2, [r3, #12]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800799c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079a6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f003 0308 	and.w	r3, r3, #8
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f851 	bl	8007a68 <HAL_SD_ErrorCallback>
}
 80079c6:	e049      	b.n	8007a5c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d044      	beq.n	8007a5c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d040      	beq.n	8007a5c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80079e8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2200      	movs	r2, #0
 80079f0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f834 	bl	8007a68 <HAL_SD_ErrorCallback>
}
 8007a00:	e02c      	b.n	8007a5c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d025      	beq.n	8007a5c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a18:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a20:	f003 0304 	and.w	r3, r3, #4
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10c      	bne.n	8007a42 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f003 0320 	and.w	r3, r3, #32
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f001 f84a 	bl	8008acc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8007a38:	e010      	b.n	8007a5c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f001 f832 	bl	8008aa4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8007a40:	e00c      	b.n	8007a5c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 f833 	bl	8008ab8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8007a52:	e003      	b.n	8007a5c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 f81b 	bl	8008a90 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8007a5a:	e7ff      	b.n	8007a5c <HAL_SD_IRQHandler+0x364>
 8007a5c:	bf00      	nop
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	18000f3a 	.word	0x18000f3a

08007a68 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a8a:	0f9b      	lsrs	r3, r3, #30
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a96:	0e9b      	lsrs	r3, r3, #26
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa8:	0e1b      	lsrs	r3, r3, #24
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	f003 0303 	and.w	r3, r3, #3
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aba:	0c1b      	lsrs	r3, r3, #16
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac6:	0a1b      	lsrs	r3, r3, #8
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007adc:	0d1b      	lsrs	r3, r3, #20
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae8:	0c1b      	lsrs	r3, r3, #16
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	f003 030f 	and.w	r3, r3, #15
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007afa:	0bdb      	lsrs	r3, r3, #15
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b0c:	0b9b      	lsrs	r3, r3, #14
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b1e:	0b5b      	lsrs	r3, r3, #13
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b30:	0b1b      	lsrs	r3, r3, #12
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2200      	movs	r2, #0
 8007b42:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d163      	bne.n	8007c14 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b50:	009a      	lsls	r2, r3, #2
 8007b52:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007b56:	4013      	ands	r3, r2
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007b5c:	0f92      	lsrs	r2, r2, #30
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b68:	0edb      	lsrs	r3, r3, #27
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b7a:	0e1b      	lsrs	r3, r3, #24
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	f003 0307 	and.w	r3, r3, #7
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b8c:	0d5b      	lsrs	r3, r3, #21
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	f003 0307 	and.w	r3, r3, #7
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b9e:	0c9b      	lsrs	r3, r3, #18
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	f003 0307 	and.w	r3, r3, #7
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bb0:	0bdb      	lsrs	r3, r3, #15
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	f003 0307 	and.w	r3, r3, #7
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	7e1b      	ldrb	r3, [r3, #24]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	f003 0307 	and.w	r3, r3, #7
 8007bd2:	3302      	adds	r3, #2
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007bde:	fb03 f202 	mul.w	r2, r3, r2
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	7a1b      	ldrb	r3, [r3, #8]
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	f003 030f 	and.w	r3, r3, #15
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	409a      	lsls	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007c00:	0a52      	lsrs	r2, r2, #9
 8007c02:	fb03 f202 	mul.w	r2, r3, r2
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c10:	655a      	str	r2, [r3, #84]	; 0x54
 8007c12:	e031      	b.n	8007c78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d11d      	bne.n	8007c58 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c20:	041b      	lsls	r3, r3, #16
 8007c22:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c2a:	0c1b      	lsrs	r3, r3, #16
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	3301      	adds	r3, #1
 8007c38:	029a      	lsls	r2, r3, #10
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c4c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	655a      	str	r2, [r3, #84]	; 0x54
 8007c56:	e00f      	b.n	8007c78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a58      	ldr	r2, [pc, #352]	; (8007dc0 <HAL_SD_GetCardCSD+0x344>)
 8007c5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e09d      	b.n	8007db4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c7c:	0b9b      	lsrs	r3, r3, #14
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c8e:	09db      	lsrs	r3, r3, #7
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cb0:	0fdb      	lsrs	r3, r3, #31
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cbc:	0f5b      	lsrs	r3, r3, #29
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	f003 0303 	and.w	r3, r3, #3
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cce:	0e9b      	lsrs	r3, r3, #26
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ce0:	0d9b      	lsrs	r3, r3, #22
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	f003 030f 	and.w	r3, r3, #15
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cf2:	0d5b      	lsrs	r3, r3, #21
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d0e:	0c1b      	lsrs	r3, r3, #16
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d22:	0bdb      	lsrs	r3, r3, #15
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d36:	0b9b      	lsrs	r3, r3, #14
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d4a:	0b5b      	lsrs	r3, r3, #13
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d5e:	0b1b      	lsrs	r3, r3, #12
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d72:	0a9b      	lsrs	r3, r3, #10
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d86:	0a1b      	lsrs	r3, r3, #8
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d9a:	085b      	lsrs	r3, r3, #1
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	1fe00fff 	.word	0x1fe00fff

08007dc4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b094      	sub	sp, #80	; 0x50
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d101      	bne.n	8007de4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e0a7      	b.n	8007f34 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007de4:	f107 0308 	add.w	r3, r7, #8
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fb62 	bl	80084b4 <SD_SendSDStatus>
 8007df0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d011      	beq.n	8007e1c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a4f      	ldr	r2, [pc, #316]	; (8007f3c <HAL_SD_GetCardStatus+0x178>)
 8007dfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e06:	431a      	orrs	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007e1a:	e070      	b.n	8007efe <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	099b      	lsrs	r3, r3, #6
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	095b      	lsrs	r3, r3, #5
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	0a1b      	lsrs	r3, r3, #8
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	0e1b      	lsrs	r3, r3, #24
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	061a      	lsls	r2, r3, #24
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e62:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	0a1b      	lsrs	r3, r3, #8
 8007e68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007e6c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	0e1b      	lsrs	r3, r3, #24
 8007e72:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	0a1b      	lsrs	r3, r3, #8
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	0d1b      	lsrs	r3, r3, #20
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	f003 030f 	and.w	r3, r3, #15
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	0c1b      	lsrs	r3, r3, #16
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	0a9b      	lsrs	r3, r3, #10
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	0a1b      	lsrs	r3, r3, #8
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	f003 0303 	and.w	r3, r3, #3
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	091b      	lsrs	r3, r3, #4
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	f003 030f 	and.w	r3, r3, #15
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	f003 030f 	and.w	r3, r3, #15
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	0e1b      	lsrs	r3, r3, #24
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f06:	4618      	mov	r0, r3
 8007f08:	f002 fedc 	bl	800acc4 <SDMMC_CmdBlockLength>
 8007f0c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00d      	beq.n	8007f30 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a08      	ldr	r2, [pc, #32]	; (8007f3c <HAL_SD_GetCardStatus+0x178>)
 8007f1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f20:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8007f30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3750      	adds	r7, #80	; 0x50
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	1fe00fff 	.word	0x1fe00fff

08007f40 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007f98:	b590      	push	{r4, r7, lr}
 8007f9a:	b08d      	sub	sp, #52	; 0x34
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2203      	movs	r2, #3
 8007fb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d02e      	beq.n	800801a <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fc2:	d106      	bne.n	8007fd2 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	635a      	str	r2, [r3, #52]	; 0x34
 8007fd0:	e029      	b.n	8008026 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fd8:	d10a      	bne.n	8007ff0 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fb62 	bl	80086a4 <SD_WideBus_Enable>
 8007fe0:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	635a      	str	r2, [r3, #52]	; 0x34
 8007fee:	e01a      	b.n	8008026 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10a      	bne.n	800800c <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fb9f 	bl	800873a <SD_WideBus_Disable>
 8007ffc:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	431a      	orrs	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	635a      	str	r2, [r3, #52]	; 0x34
 800800a:	e00c      	b.n	8008026 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008010:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	635a      	str	r2, [r3, #52]	; 0x34
 8008018:	e005      	b.n	8008026 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800802a:	2b00      	cmp	r3, #0
 800802c:	d007      	beq.n	800803e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a5e      	ldr	r2, [pc, #376]	; (80081ac <HAL_SD_ConfigWideBusOperation+0x214>)
 8008034:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800803c:	e094      	b.n	8008168 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800803e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008042:	f7fd ff4d 	bl	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008046:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 8083 	beq.w	8008156 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695a      	ldr	r2, [r3, #20]
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	4950      	ldr	r1, [pc, #320]	; (80081b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800806e:	fba1 1303 	umull	r1, r3, r1, r3
 8008072:	0e1b      	lsrs	r3, r3, #24
 8008074:	429a      	cmp	r2, r3
 8008076:	d303      	bcc.n	8008080 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	61bb      	str	r3, [r7, #24]
 800807e:	e05a      	b.n	8008136 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008088:	d103      	bne.n	8008092 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	61bb      	str	r3, [r7, #24]
 8008090:	e051      	b.n	8008136 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800809a:	d126      	bne.n	80080ea <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10e      	bne.n	80080c2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	4a43      	ldr	r2, [pc, #268]	; (80081b4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d906      	bls.n	80080ba <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	4a40      	ldr	r2, [pc, #256]	; (80081b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80080b0:	fba2 2303 	umull	r2, r3, r2, r3
 80080b4:	0e5b      	lsrs	r3, r3, #25
 80080b6:	61bb      	str	r3, [r7, #24]
 80080b8:	e03d      	b.n	8008136 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	61bb      	str	r3, [r7, #24]
 80080c0:	e039      	b.n	8008136 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	6a3a      	ldr	r2, [r7, #32]
 80080ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ce:	4a39      	ldr	r2, [pc, #228]	; (80081b4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d906      	bls.n	80080e2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80080d4:	6a3b      	ldr	r3, [r7, #32]
 80080d6:	4a36      	ldr	r2, [pc, #216]	; (80081b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80080d8:	fba2 2303 	umull	r2, r3, r2, r3
 80080dc:	0e5b      	lsrs	r3, r3, #25
 80080de:	61bb      	str	r3, [r7, #24]
 80080e0:	e029      	b.n	8008136 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	61bb      	str	r3, [r7, #24]
 80080e8:	e025      	b.n	8008136 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10e      	bne.n	8008110 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	4a30      	ldr	r2, [pc, #192]	; (80081b8 <HAL_SD_ConfigWideBusOperation+0x220>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d906      	bls.n	8008108 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	4a2c      	ldr	r2, [pc, #176]	; (80081b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80080fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008102:	0e1b      	lsrs	r3, r3, #24
 8008104:	61bb      	str	r3, [r7, #24]
 8008106:	e016      	b.n	8008136 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	61bb      	str	r3, [r7, #24]
 800810e:	e012      	b.n	8008136 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	6a3a      	ldr	r2, [r7, #32]
 8008118:	fbb2 f3f3 	udiv	r3, r2, r3
 800811c:	4a26      	ldr	r2, [pc, #152]	; (80081b8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d906      	bls.n	8008130 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	4a22      	ldr	r2, [pc, #136]	; (80081b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008126:	fba2 2303 	umull	r2, r3, r2, r3
 800812a:	0e1b      	lsrs	r3, r3, #24
 800812c:	61bb      	str	r3, [r7, #24]
 800812e:	e002      	b.n	8008136 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681c      	ldr	r4, [r3, #0]
 800813a:	466a      	mov	r2, sp
 800813c:	f107 0314 	add.w	r3, r7, #20
 8008140:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008144:	e882 0003 	stmia.w	r2, {r0, r1}
 8008148:	f107 0308 	add.w	r3, r7, #8
 800814c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800814e:	4620      	mov	r0, r4
 8008150:	f002 fcda 	bl	800ab08 <SDMMC_Init>
 8008154:	e008      	b.n	8008168 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008170:	4618      	mov	r0, r3
 8008172:	f002 fda7 	bl	800acc4 <SDMMC_CmdBlockLength>
 8008176:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00c      	beq.n	8008198 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a0a      	ldr	r2, [pc, #40]	; (80081ac <HAL_SD_ConfigWideBusOperation+0x214>)
 8008184:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	431a      	orrs	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80081a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	372c      	adds	r7, #44	; 0x2c
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd90      	pop	{r4, r7, pc}
 80081ac:	1fe00fff 	.word	0x1fe00fff
 80081b0:	55e63b89 	.word	0x55e63b89
 80081b4:	02faf080 	.word	0x02faf080
 80081b8:	017d7840 	.word	0x017d7840

080081bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80081c8:	f107 030c 	add.w	r3, r7, #12
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fa40 	bl	8008654 <SD_SendStatus>
 80081d4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d005      	beq.n	80081e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	431a      	orrs	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	0a5b      	lsrs	r3, r3, #9
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80081f2:	693b      	ldr	r3, [r7, #16]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b090      	sub	sp, #64	; 0x40
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008208:	f7f9 ff0a 	bl	8002020 <HAL_GetTick>
 800820c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4618      	mov	r0, r3
 8008214:	f002 fcd1 	bl	800abba <SDMMC_GetPowerState>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800821e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008222:	e0b5      	b.n	8008390 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008228:	2b03      	cmp	r3, #3
 800822a:	d02e      	beq.n	800828a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4618      	mov	r0, r3
 8008232:	f002 ff1c 	bl	800b06e <SDMMC_CmdSendCID>
 8008236:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <SD_InitCard+0x46>
    {
      return errorstate;
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	e0a6      	b.n	8008390 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2100      	movs	r1, #0
 8008248:	4618      	mov	r0, r3
 800824a:	f002 fcfc 	bl	800ac46 <SDMMC_GetResponse>
 800824e:	4602      	mov	r2, r0
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2104      	movs	r1, #4
 800825a:	4618      	mov	r0, r3
 800825c:	f002 fcf3 	bl	800ac46 <SDMMC_GetResponse>
 8008260:	4602      	mov	r2, r0
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2108      	movs	r1, #8
 800826c:	4618      	mov	r0, r3
 800826e:	f002 fcea 	bl	800ac46 <SDMMC_GetResponse>
 8008272:	4602      	mov	r2, r0
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	210c      	movs	r1, #12
 800827e:	4618      	mov	r0, r3
 8008280:	f002 fce1 	bl	800ac46 <SDMMC_GetResponse>
 8008284:	4602      	mov	r2, r0
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828e:	2b03      	cmp	r3, #3
 8008290:	d01d      	beq.n	80082ce <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008292:	e019      	b.n	80082c8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f107 020a 	add.w	r2, r7, #10
 800829c:	4611      	mov	r1, r2
 800829e:	4618      	mov	r0, r3
 80082a0:	f002 ff24 	bl	800b0ec <SDMMC_CmdSetRelAdd>
 80082a4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80082a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <SD_InitCard+0xb4>
      {
        return errorstate;
 80082ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ae:	e06f      	b.n	8008390 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80082b0:	f7f9 feb6 	bl	8002020 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	f241 3287 	movw	r2, #4999	; 0x1387
 80082be:	4293      	cmp	r3, r2
 80082c0:	d902      	bls.n	80082c8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80082c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082c6:	e063      	b.n	8008390 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80082c8:	897b      	ldrh	r3, [r7, #10]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0e2      	beq.n	8008294 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d036      	beq.n	8008344 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80082d6:	897b      	ldrh	r3, [r7, #10]
 80082d8:	461a      	mov	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e6:	041b      	lsls	r3, r3, #16
 80082e8:	4619      	mov	r1, r3
 80082ea:	4610      	mov	r0, r2
 80082ec:	f002 fede 	bl	800b0ac <SDMMC_CmdSendCSD>
 80082f0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80082f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <SD_InitCard+0x100>
    {
      return errorstate;
 80082f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fa:	e049      	b.n	8008390 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2100      	movs	r1, #0
 8008302:	4618      	mov	r0, r3
 8008304:	f002 fc9f 	bl	800ac46 <SDMMC_GetResponse>
 8008308:	4602      	mov	r2, r0
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2104      	movs	r1, #4
 8008314:	4618      	mov	r0, r3
 8008316:	f002 fc96 	bl	800ac46 <SDMMC_GetResponse>
 800831a:	4602      	mov	r2, r0
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2108      	movs	r1, #8
 8008326:	4618      	mov	r0, r3
 8008328:	f002 fc8d 	bl	800ac46 <SDMMC_GetResponse>
 800832c:	4602      	mov	r2, r0
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	210c      	movs	r1, #12
 8008338:	4618      	mov	r0, r3
 800833a:	f002 fc84 	bl	800ac46 <SDMMC_GetResponse>
 800833e:	4602      	mov	r2, r0
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2104      	movs	r1, #4
 800834a:	4618      	mov	r0, r3
 800834c:	f002 fc7b 	bl	800ac46 <SDMMC_GetResponse>
 8008350:	4603      	mov	r3, r0
 8008352:	0d1a      	lsrs	r2, r3, #20
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008358:	f107 030c 	add.w	r3, r7, #12
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7ff fb8c 	bl	8007a7c <HAL_SD_GetCardCSD>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800836a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800836e:	e00f      	b.n	8008390 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008378:	041b      	lsls	r3, r3, #16
 800837a:	4619      	mov	r1, r3
 800837c:	4610      	mov	r0, r2
 800837e:	f002 fd8d 	bl	800ae9c <SDMMC_CmdSelDesel>
 8008382:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <SD_InitCard+0x192>
  {
    return errorstate;
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	e000      	b.n	8008390 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3740      	adds	r7, #64	; 0x40
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083a0:	2300      	movs	r3, #0
 80083a2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f002 fd96 	bl	800aee2 <SDMMC_CmdGoIdleState>
 80083b6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	e072      	b.n	80084a8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f002 fda9 	bl	800af1e <SDMMC_CmdOperCond>
 80083cc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083d4:	d10d      	bne.n	80083f2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f002 fd7e 	bl	800aee2 <SDMMC_CmdGoIdleState>
 80083e6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d004      	beq.n	80083f8 <SD_PowerON+0x60>
    {
      return errorstate;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	e05a      	b.n	80084a8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d137      	bne.n	8008470 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2100      	movs	r1, #0
 8008406:	4618      	mov	r0, r3
 8008408:	f002 fda9 	bl	800af5e <SDMMC_CmdAppCommand>
 800840c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d02d      	beq.n	8008470 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008414:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008418:	e046      	b.n	80084a8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2100      	movs	r1, #0
 8008420:	4618      	mov	r0, r3
 8008422:	f002 fd9c 	bl	800af5e <SDMMC_CmdAppCommand>
 8008426:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <SD_PowerON+0x9a>
    {
      return errorstate;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	e03a      	b.n	80084a8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	491e      	ldr	r1, [pc, #120]	; (80084b0 <SD_PowerON+0x118>)
 8008438:	4618      	mov	r0, r3
 800843a:	f002 fdb3 	bl	800afa4 <SDMMC_CmdAppOperCommand>
 800843e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008446:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800844a:	e02d      	b.n	80084a8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2100      	movs	r1, #0
 8008452:	4618      	mov	r0, r3
 8008454:	f002 fbf7 	bl	800ac46 <SDMMC_GetResponse>
 8008458:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	0fdb      	lsrs	r3, r3, #31
 800845e:	2b01      	cmp	r3, #1
 8008460:	d101      	bne.n	8008466 <SD_PowerON+0xce>
 8008462:	2301      	movs	r3, #1
 8008464:	e000      	b.n	8008468 <SD_PowerON+0xd0>
 8008466:	2300      	movs	r3, #0
 8008468:	613b      	str	r3, [r7, #16]

    count++;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	3301      	adds	r3, #1
 800846e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008476:	4293      	cmp	r3, r2
 8008478:	d802      	bhi.n	8008480 <SD_PowerON+0xe8>
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0cc      	beq.n	800841a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008486:	4293      	cmp	r3, r2
 8008488:	d902      	bls.n	8008490 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800848a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800848e:	e00b      	b.n	80084a8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	c1100000 	.word	0xc1100000

080084b4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08c      	sub	sp, #48	; 0x30
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80084be:	f7f9 fdaf 	bl	8002020 <HAL_GetTick>
 80084c2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2100      	movs	r1, #0
 80084ce:	4618      	mov	r0, r3
 80084d0:	f002 fbb9 	bl	800ac46 <SDMMC_GetResponse>
 80084d4:	4603      	mov	r3, r0
 80084d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084de:	d102      	bne.n	80084e6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80084e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084e4:	e0b0      	b.n	8008648 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2140      	movs	r1, #64	; 0x40
 80084ec:	4618      	mov	r0, r3
 80084ee:	f002 fbe9 	bl	800acc4 <SDMMC_CmdBlockLength>
 80084f2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d005      	beq.n	8008506 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	e0a0      	b.n	8008648 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850e:	041b      	lsls	r3, r3, #16
 8008510:	4619      	mov	r1, r3
 8008512:	4610      	mov	r0, r2
 8008514:	f002 fd23 	bl	800af5e <SDMMC_CmdAppCommand>
 8008518:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d005      	beq.n	800852c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	e08d      	b.n	8008648 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800852c:	f04f 33ff 	mov.w	r3, #4294967295
 8008530:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008532:	2340      	movs	r3, #64	; 0x40
 8008534:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008536:	2360      	movs	r3, #96	; 0x60
 8008538:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800853a:	2302      	movs	r3, #2
 800853c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800853e:	2300      	movs	r3, #0
 8008540:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008542:	2301      	movs	r3, #1
 8008544:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f107 0208 	add.w	r2, r7, #8
 800854e:	4611      	mov	r1, r2
 8008550:	4618      	mov	r0, r3
 8008552:	f002 fb8b 	bl	800ac6c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4618      	mov	r0, r3
 800855c:	f002 fe0b 	bl	800b176 <SDMMC_CmdStatusRegister>
 8008560:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d02b      	beq.n	80085c0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	e069      	b.n	8008648 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d013      	beq.n	80085aa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008582:	2300      	movs	r3, #0
 8008584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008586:	e00d      	b.n	80085a4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4618      	mov	r0, r3
 800858e:	f002 fae5 	bl	800ab5c <SDMMC_ReadFIFO>
 8008592:	4602      	mov	r2, r0
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	601a      	str	r2, [r3, #0]
        pData++;
 8008598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859a:	3304      	adds	r3, #4
 800859c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800859e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a0:	3301      	adds	r3, #1
 80085a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a6:	2b07      	cmp	r3, #7
 80085a8:	d9ee      	bls.n	8008588 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80085aa:	f7f9 fd39 	bl	8002020 <HAL_GetTick>
 80085ae:	4602      	mov	r2, r0
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b8:	d102      	bne.n	80085c0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80085ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085be:	e043      	b.n	8008648 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0d2      	beq.n	8008574 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d4:	f003 0308 	and.w	r3, r3, #8
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80085dc:	2308      	movs	r3, #8
 80085de:	e033      	b.n	8008648 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e6:	f003 0302 	and.w	r3, r3, #2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80085ee:	2302      	movs	r3, #2
 80085f0:	e02a      	b.n	8008648 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f8:	f003 0320 	and.w	r3, r3, #32
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d017      	beq.n	8008630 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008600:	2320      	movs	r3, #32
 8008602:	e021      	b.n	8008648 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4618      	mov	r0, r3
 800860a:	f002 faa7 	bl	800ab5c <SDMMC_ReadFIFO>
 800860e:	4602      	mov	r2, r0
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	601a      	str	r2, [r3, #0]
    pData++;
 8008614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008616:	3304      	adds	r3, #4
 8008618:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800861a:	f7f9 fd01 	bl	8002020 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008628:	d102      	bne.n	8008630 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800862a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800862e:	e00b      	b.n	8008648 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e2      	bne.n	8008604 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a03      	ldr	r2, [pc, #12]	; (8008650 <SD_SendSDStatus+0x19c>)
 8008644:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3730      	adds	r7, #48	; 0x30
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	18000f3a 	.word	0x18000f3a

08008654 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d102      	bne.n	800866a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008664:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008668:	e018      	b.n	800869c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008672:	041b      	lsls	r3, r3, #16
 8008674:	4619      	mov	r1, r3
 8008676:	4610      	mov	r0, r2
 8008678:	f002 fd5a 	bl	800b130 <SDMMC_CmdSendStatus>
 800867c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	e009      	b.n	800869c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2100      	movs	r1, #0
 800868e:	4618      	mov	r0, r3
 8008690:	f002 fad9 	bl	800ac46 <SDMMC_GetResponse>
 8008694:	4602      	mov	r2, r0
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	2300      	movs	r3, #0
 80086b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2100      	movs	r1, #0
 80086ba:	4618      	mov	r0, r3
 80086bc:	f002 fac3 	bl	800ac46 <SDMMC_GetResponse>
 80086c0:	4603      	mov	r3, r0
 80086c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086ca:	d102      	bne.n	80086d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80086cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086d0:	e02f      	b.n	8008732 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80086d2:	f107 030c 	add.w	r3, r7, #12
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f879 	bl	80087d0 <SD_FindSCR>
 80086de:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	e023      	b.n	8008732 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d01c      	beq.n	800872e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fc:	041b      	lsls	r3, r3, #16
 80086fe:	4619      	mov	r1, r3
 8008700:	4610      	mov	r0, r2
 8008702:	f002 fc2c 	bl	800af5e <SDMMC_CmdAppCommand>
 8008706:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	e00f      	b.n	8008732 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2102      	movs	r1, #2
 8008718:	4618      	mov	r0, r3
 800871a:	f002 fc63 	bl	800afe4 <SDMMC_CmdBusWidth>
 800871e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	e003      	b.n	8008732 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800872a:	2300      	movs	r3, #0
 800872c:	e001      	b.n	8008732 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800872e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008732:	4618      	mov	r0, r3
 8008734:	3718      	adds	r7, #24
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b086      	sub	sp, #24
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008742:	2300      	movs	r3, #0
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	2300      	movs	r3, #0
 8008748:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2100      	movs	r1, #0
 8008750:	4618      	mov	r0, r3
 8008752:	f002 fa78 	bl	800ac46 <SDMMC_GetResponse>
 8008756:	4603      	mov	r3, r0
 8008758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800875c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008760:	d102      	bne.n	8008768 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008762:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008766:	e02f      	b.n	80087c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008768:	f107 030c 	add.w	r3, r7, #12
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f82e 	bl	80087d0 <SD_FindSCR>
 8008774:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	e023      	b.n	80087c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d01c      	beq.n	80087c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008792:	041b      	lsls	r3, r3, #16
 8008794:	4619      	mov	r1, r3
 8008796:	4610      	mov	r0, r2
 8008798:	f002 fbe1 	bl	800af5e <SDMMC_CmdAppCommand>
 800879c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	e00f      	b.n	80087c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2100      	movs	r1, #0
 80087ae:	4618      	mov	r0, r3
 80087b0:	f002 fc18 	bl	800afe4 <SDMMC_CmdBusWidth>
 80087b4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	e003      	b.n	80087c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80087c0:	2300      	movs	r3, #0
 80087c2:	e001      	b.n	80087c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08e      	sub	sp, #56	; 0x38
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80087da:	f7f9 fc21 	bl	8002020 <HAL_GetTick>
 80087de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80087e4:	2300      	movs	r3, #0
 80087e6:	60bb      	str	r3, [r7, #8]
 80087e8:	2300      	movs	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2108      	movs	r1, #8
 80087f6:	4618      	mov	r0, r3
 80087f8:	f002 fa64 	bl	800acc4 <SDMMC_CmdBlockLength>
 80087fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80087fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	e0ad      	b.n	8008964 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008810:	041b      	lsls	r3, r3, #16
 8008812:	4619      	mov	r1, r3
 8008814:	4610      	mov	r0, r2
 8008816:	f002 fba2 	bl	800af5e <SDMMC_CmdAppCommand>
 800881a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008824:	e09e      	b.n	8008964 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008826:	f04f 33ff 	mov.w	r3, #4294967295
 800882a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800882c:	2308      	movs	r3, #8
 800882e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008830:	2330      	movs	r3, #48	; 0x30
 8008832:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008834:	2302      	movs	r3, #2
 8008836:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008838:	2300      	movs	r3, #0
 800883a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800883c:	2301      	movs	r3, #1
 800883e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f107 0210 	add.w	r2, r7, #16
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f002 fa0e 	bl	800ac6c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4618      	mov	r0, r3
 8008856:	f002 fbe8 	bl	800b02a <SDMMC_CmdSendSCR>
 800885a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885e:	2b00      	cmp	r3, #0
 8008860:	d027      	beq.n	80088b2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	e07e      	b.n	8008964 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800886c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d113      	bne.n	800889c <SD_FindSCR+0xcc>
 8008874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008876:	2b00      	cmp	r3, #0
 8008878:	d110      	bne.n	800889c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	f002 f96c 	bl	800ab5c <SDMMC_ReadFIFO>
 8008884:	4603      	mov	r3, r0
 8008886:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4618      	mov	r0, r3
 800888e:	f002 f965 	bl	800ab5c <SDMMC_ReadFIFO>
 8008892:	4603      	mov	r3, r0
 8008894:	60fb      	str	r3, [r7, #12]
      index++;
 8008896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008898:	3301      	adds	r3, #1
 800889a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800889c:	f7f9 fbc0 	bl	8002020 <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088aa:	d102      	bne.n	80088b2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80088ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088b0:	e058      	b.n	8008964 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088b8:	f240 532a 	movw	r3, #1322	; 0x52a
 80088bc:	4013      	ands	r3, r2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0d1      	beq.n	8008866 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c8:	f003 0308 	and.w	r3, r3, #8
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d005      	beq.n	80088dc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2208      	movs	r2, #8
 80088d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80088d8:	2308      	movs	r3, #8
 80088da:	e043      	b.n	8008964 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d005      	beq.n	80088f6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2202      	movs	r2, #2
 80088f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80088f2:	2302      	movs	r3, #2
 80088f4:	e036      	b.n	8008964 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fc:	f003 0320 	and.w	r3, r3, #32
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2220      	movs	r2, #32
 800890a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800890c:	2320      	movs	r3, #32
 800890e:	e029      	b.n	8008964 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a15      	ldr	r2, [pc, #84]	; (800896c <SD_FindSCR+0x19c>)
 8008916:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	061a      	lsls	r2, r3, #24
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	021b      	lsls	r3, r3, #8
 8008920:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008924:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	0a1b      	lsrs	r3, r3, #8
 800892a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800892e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	0e1b      	lsrs	r3, r3, #24
 8008934:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008938:	601a      	str	r2, [r3, #0]
    scr++;
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893c:	3304      	adds	r3, #4
 800893e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	061a      	lsls	r2, r3, #24
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	021b      	lsls	r3, r3, #8
 8008948:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800894c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	0a1b      	lsrs	r3, r3, #8
 8008952:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008956:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	0e1b      	lsrs	r3, r3, #24
 800895c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800895e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008960:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3738      	adds	r7, #56	; 0x38
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	18000f3a 	.word	0x18000f3a

08008970 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008982:	2b1f      	cmp	r3, #31
 8008984:	d936      	bls.n	80089f4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8008986:	2300      	movs	r3, #0
 8008988:	617b      	str	r3, [r7, #20]
 800898a:	e027      	b.n	80089dc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4618      	mov	r0, r3
 8008992:	f002 f8e3 	bl	800ab5c <SDMMC_ReadFIFO>
 8008996:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	b2da      	uxtb	r2, r3
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	3301      	adds	r3, #1
 80089a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	0a1b      	lsrs	r3, r3, #8
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	3301      	adds	r3, #1
 80089b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	0c1b      	lsrs	r3, r3, #16
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	701a      	strb	r2, [r3, #0]
      tmp++;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	3301      	adds	r3, #1
 80089c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	0e1b      	lsrs	r3, r3, #24
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	3301      	adds	r3, #1
 80089d4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	3301      	adds	r3, #1
 80089da:	617b      	str	r3, [r7, #20]
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2b07      	cmp	r3, #7
 80089e0:	d9d4      	bls.n	800898c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ec:	f1a3 0220 	sub.w	r2, r3, #32
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80089f4:	bf00      	nop
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	2b1f      	cmp	r3, #31
 8008a10:	d93a      	bls.n	8008a88 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8008a12:	2300      	movs	r3, #0
 8008a14:	617b      	str	r3, [r7, #20]
 8008a16:	e02b      	b.n	8008a70 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	3301      	adds	r3, #1
 8008a22:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	021a      	lsls	r2, r3, #8
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	3301      	adds	r3, #1
 8008a34:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	041a      	lsls	r2, r3, #16
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	3301      	adds	r3, #1
 8008a46:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	061a      	lsls	r2, r3, #24
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	3301      	adds	r3, #1
 8008a58:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f107 020c 	add.w	r2, r7, #12
 8008a62:	4611      	mov	r1, r2
 8008a64:	4618      	mov	r0, r3
 8008a66:	f002 f886 	bl	800ab76 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	2b07      	cmp	r3, #7
 8008a74:	d9d0      	bls.n	8008a18 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	f1a3 0220 	sub.w	r2, r3, #32
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	621a      	str	r2, [r3, #32]
  }
}
 8008a88:	bf00      	nop
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e0f1      	b.n	8008cd6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a78      	ldr	r2, [pc, #480]	; (8008ce0 <HAL_SPI_Init+0x200>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d00f      	beq.n	8008b22 <HAL_SPI_Init+0x42>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a77      	ldr	r2, [pc, #476]	; (8008ce4 <HAL_SPI_Init+0x204>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d00a      	beq.n	8008b22 <HAL_SPI_Init+0x42>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a75      	ldr	r2, [pc, #468]	; (8008ce8 <HAL_SPI_Init+0x208>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d005      	beq.n	8008b22 <HAL_SPI_Init+0x42>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	2b0f      	cmp	r3, #15
 8008b1c:	d901      	bls.n	8008b22 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e0d9      	b.n	8008cd6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fdca 	bl	80096bc <SPI_GetPacketSize>
 8008b28:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a6c      	ldr	r2, [pc, #432]	; (8008ce0 <HAL_SPI_Init+0x200>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d00c      	beq.n	8008b4e <HAL_SPI_Init+0x6e>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a6a      	ldr	r2, [pc, #424]	; (8008ce4 <HAL_SPI_Init+0x204>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d007      	beq.n	8008b4e <HAL_SPI_Init+0x6e>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a69      	ldr	r2, [pc, #420]	; (8008ce8 <HAL_SPI_Init+0x208>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d002      	beq.n	8008b4e <HAL_SPI_Init+0x6e>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b08      	cmp	r3, #8
 8008b4c:	d811      	bhi.n	8008b72 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008b52:	4a63      	ldr	r2, [pc, #396]	; (8008ce0 <HAL_SPI_Init+0x200>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d009      	beq.n	8008b6c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a61      	ldr	r2, [pc, #388]	; (8008ce4 <HAL_SPI_Init+0x204>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d004      	beq.n	8008b6c <HAL_SPI_Init+0x8c>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a60      	ldr	r2, [pc, #384]	; (8008ce8 <HAL_SPI_Init+0x208>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d104      	bne.n	8008b76 <HAL_SPI_Init+0x96>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b10      	cmp	r3, #16
 8008b70:	d901      	bls.n	8008b76 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e0af      	b.n	8008cd6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d106      	bne.n	8008b90 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7f8 ff76 	bl	8001a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f022 0201 	bic.w	r2, r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008bb2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bbc:	d119      	bne.n	8008bf2 <HAL_SPI_Init+0x112>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bc6:	d103      	bne.n	8008bd0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d008      	beq.n	8008be2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10c      	bne.n	8008bf2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008be0:	d107      	bne.n	8008bf2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008bf0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	69da      	ldr	r2, [r3, #28]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	431a      	orrs	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c04:	ea42 0103 	orr.w	r1, r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	68da      	ldr	r2, [r3, #12]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c22:	431a      	orrs	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	431a      	orrs	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	431a      	orrs	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c46:	431a      	orrs	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	431a      	orrs	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c52:	ea42 0103 	orr.w	r1, r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d113      	bne.n	8008c92 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c7c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c90:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f022 0201 	bic.w	r2, r2, #1
 8008ca0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00a      	beq.n	8008cc4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	40013000 	.word	0x40013000
 8008ce4:	40003800 	.word	0x40003800
 8008ce8:	40003c00 	.word	0x40003c00

08008cec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08a      	sub	sp, #40	; 0x28
 8008cf0:	af02      	add	r7, sp, #8
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3320      	adds	r3, #32
 8008d02:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d101      	bne.n	8008d16 <HAL_SPI_Transmit+0x2a>
 8008d12:	2302      	movs	r3, #2
 8008d14:	e1d7      	b.n	80090c6 <HAL_SPI_Transmit+0x3da>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d1e:	f7f9 f97f 	bl	8002020 <HAL_GetTick>
 8008d22:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d007      	beq.n	8008d40 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008d30:	2302      	movs	r3, #2
 8008d32:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008d3c:	7efb      	ldrb	r3, [r7, #27]
 8008d3e:	e1c2      	b.n	80090c6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <HAL_SPI_Transmit+0x60>
 8008d46:	88fb      	ldrh	r3, [r7, #6]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d107      	bne.n	8008d5c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008d58:	7efb      	ldrb	r3, [r7, #27]
 8008d5a:	e1b4      	b.n	80090c6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2203      	movs	r2, #3
 8008d60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	88fa      	ldrh	r2, [r7, #6]
 8008d76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	88fa      	ldrh	r2, [r7, #6]
 8008d7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008dac:	d107      	bne.n	8008dbe <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	4b96      	ldr	r3, [pc, #600]	; (8009020 <HAL_SPI_Transmit+0x334>)
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	88f9      	ldrh	r1, [r7, #6]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	6812      	ldr	r2, [r2, #0]
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f042 0201 	orr.w	r2, r2, #1
 8008de0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dea:	d107      	bne.n	8008dfc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	2b0f      	cmp	r3, #15
 8008e02:	d947      	bls.n	8008e94 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008e04:	e03f      	b.n	8008e86 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	f003 0302 	and.w	r3, r3, #2
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d114      	bne.n	8008e3e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6812      	ldr	r2, [r2, #0]
 8008e1e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e24:	1d1a      	adds	r2, r3, #4
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	3b01      	subs	r3, #1
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008e3c:	e023      	b.n	8008e86 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e3e:	f7f9 f8ef 	bl	8002020 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d803      	bhi.n	8008e56 <HAL_SPI_Transmit+0x16a>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e54:	d102      	bne.n	8008e5c <HAL_SPI_Transmit+0x170>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d114      	bne.n	8008e86 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 fb5f 	bl	8009520 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e11f      	b.n	80090c6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1b9      	bne.n	8008e06 <HAL_SPI_Transmit+0x11a>
 8008e92:	e0f2      	b.n	800907a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	2b07      	cmp	r3, #7
 8008e9a:	f240 80e7 	bls.w	800906c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008e9e:	e05d      	b.n	8008f5c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d132      	bne.n	8008f14 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d918      	bls.n	8008eec <HAL_SPI_Transmit+0x200>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d014      	beq.n	8008eec <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6812      	ldr	r2, [r2, #0]
 8008ecc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed2:	1d1a      	adds	r2, r3, #4
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	3b02      	subs	r3, #2
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008eea:	e037      	b.n	8008f5c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ef0:	881a      	ldrh	r2, [r3, #0]
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008efa:	1c9a      	adds	r2, r3, #2
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008f12:	e023      	b.n	8008f5c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f14:	f7f9 f884 	bl	8002020 <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d803      	bhi.n	8008f2c <HAL_SPI_Transmit+0x240>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2a:	d102      	bne.n	8008f32 <HAL_SPI_Transmit+0x246>
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d114      	bne.n	8008f5c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f000 faf4 	bl	8009520 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e0b4      	b.n	80090c6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d19b      	bne.n	8008ea0 <HAL_SPI_Transmit+0x1b4>
 8008f68:	e087      	b.n	800907a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	695b      	ldr	r3, [r3, #20]
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d155      	bne.n	8009024 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	2b03      	cmp	r3, #3
 8008f82:	d918      	bls.n	8008fb6 <HAL_SPI_Transmit+0x2ca>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f88:	2b40      	cmp	r3, #64	; 0x40
 8008f8a:	d914      	bls.n	8008fb6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6812      	ldr	r2, [r2, #0]
 8008f96:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f9c:	1d1a      	adds	r2, r3, #4
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	3b04      	subs	r3, #4
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008fb4:	e05a      	b.n	800906c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d917      	bls.n	8008ff2 <HAL_SPI_Transmit+0x306>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d013      	beq.n	8008ff2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fce:	881a      	ldrh	r2, [r3, #0]
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fd8:	1c9a      	adds	r2, r3, #2
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	3b02      	subs	r3, #2
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008ff0:	e03c      	b.n	800906c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3320      	adds	r3, #32
 8008ffc:	7812      	ldrb	r2, [r2, #0]
 8008ffe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009010:	b29b      	uxth	r3, r3
 8009012:	3b01      	subs	r3, #1
 8009014:	b29a      	uxth	r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800901c:	e026      	b.n	800906c <HAL_SPI_Transmit+0x380>
 800901e:	bf00      	nop
 8009020:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009024:	f7f8 fffc 	bl	8002020 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	429a      	cmp	r2, r3
 8009032:	d803      	bhi.n	800903c <HAL_SPI_Transmit+0x350>
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903a:	d102      	bne.n	8009042 <HAL_SPI_Transmit+0x356>
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d114      	bne.n	800906c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 fa6c 	bl	8009520 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009056:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e02c      	b.n	80090c6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009072:	b29b      	uxth	r3, r3
 8009074:	2b00      	cmp	r3, #0
 8009076:	f47f af78 	bne.w	8008f6a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2200      	movs	r2, #0
 8009082:	2108      	movs	r1, #8
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f000 faeb 	bl	8009660 <SPI_WaitOnFlagUntilTimeout>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d007      	beq.n	80090a0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009096:	f043 0220 	orr.w	r2, r3, #32
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 fa3d 	bl	8009520 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e000      	b.n	80090c6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80090c4:	7efb      	ldrb	r3, [r7, #27]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3720      	adds	r7, #32
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop

080090d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b08e      	sub	sp, #56	; 0x38
 80090d4:	af02      	add	r7, sp, #8
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
 80090dc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3320      	adds	r3, #32
 80090ea:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3330      	adds	r3, #48	; 0x30
 80090f2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d101      	bne.n	8009102 <HAL_SPI_TransmitReceive+0x32>
 80090fe:	2302      	movs	r3, #2
 8009100:	e209      	b.n	8009516 <HAL_SPI_TransmitReceive+0x446>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2201      	movs	r2, #1
 8009106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800910a:	f7f8 ff89 	bl	8002020 <HAL_GetTick>
 800910e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8009110:	887b      	ldrh	r3, [r7, #2]
 8009112:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8009114:	887b      	ldrh	r3, [r7, #2]
 8009116:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800911e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009126:	7efb      	ldrb	r3, [r7, #27]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d014      	beq.n	8009156 <HAL_SPI_TransmitReceive+0x86>
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009132:	d106      	bne.n	8009142 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8009138:	2b00      	cmp	r3, #0
 800913a:	d102      	bne.n	8009142 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800913c:	7efb      	ldrb	r3, [r7, #27]
 800913e:	2b04      	cmp	r3, #4
 8009140:	d009      	beq.n	8009156 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8009142:	2302      	movs	r3, #2
 8009144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009150:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009154:	e1df      	b.n	8009516 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d005      	beq.n	8009168 <HAL_SPI_TransmitReceive+0x98>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <HAL_SPI_TransmitReceive+0x98>
 8009162:	887b      	ldrh	r3, [r7, #2]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d109      	bne.n	800917c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009176:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800917a:	e1cc      	b.n	8009516 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b04      	cmp	r3, #4
 8009186:	d003      	beq.n	8009190 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2205      	movs	r2, #5
 800918c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	887a      	ldrh	r2, [r7, #2]
 80091a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	887a      	ldrh	r2, [r7, #2]
 80091aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	887a      	ldrh	r2, [r7, #2]
 80091b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	887a      	ldrh	r2, [r7, #2]
 80091c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	4b82      	ldr	r3, [pc, #520]	; (80093e0 <HAL_SPI_TransmitReceive+0x310>)
 80091d8:	4013      	ands	r3, r2
 80091da:	8879      	ldrh	r1, [r7, #2]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	6812      	ldr	r2, [r2, #0]
 80091e0:	430b      	orrs	r3, r1
 80091e2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f042 0201 	orr.w	r2, r2, #1
 80091f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091fc:	d107      	bne.n	800920e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800920c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	2b0f      	cmp	r3, #15
 8009214:	d970      	bls.n	80092f8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009216:	e068      	b.n	80092ea <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b02      	cmp	r3, #2
 8009224:	d11a      	bne.n	800925c <HAL_SPI_TransmitReceive+0x18c>
 8009226:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009228:	2b00      	cmp	r3, #0
 800922a:	d017      	beq.n	800925c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6812      	ldr	r2, [r2, #0]
 8009236:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800923c:	1d1a      	adds	r2, r3, #4
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009248:	b29b      	uxth	r3, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800925a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	695a      	ldr	r2, [r3, #20]
 8009262:	f248 0308 	movw	r3, #32776	; 0x8008
 8009266:	4013      	ands	r3, r2
 8009268:	2b00      	cmp	r3, #0
 800926a:	d01a      	beq.n	80092a2 <HAL_SPI_TransmitReceive+0x1d2>
 800926c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800926e:	2b00      	cmp	r3, #0
 8009270:	d017      	beq.n	80092a2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800927a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800927c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009282:	1d1a      	adds	r2, r3, #4
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800928e:	b29b      	uxth	r3, r3
 8009290:	3b01      	subs	r3, #1
 8009292:	b29a      	uxth	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092a2:	f7f8 febd 	bl	8002020 <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d803      	bhi.n	80092ba <HAL_SPI_TransmitReceive+0x1ea>
 80092b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b8:	d102      	bne.n	80092c0 <HAL_SPI_TransmitReceive+0x1f0>
 80092ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d114      	bne.n	80092ea <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 f92d 	bl	8009520 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80092e6:	2303      	movs	r3, #3
 80092e8:	e115      	b.n	8009516 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80092ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d193      	bne.n	8009218 <HAL_SPI_TransmitReceive+0x148>
 80092f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d190      	bne.n	8009218 <HAL_SPI_TransmitReceive+0x148>
 80092f6:	e0e7      	b.n	80094c8 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	2b07      	cmp	r3, #7
 80092fe:	f240 80dd 	bls.w	80094bc <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009302:	e066      	b.n	80093d2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b02      	cmp	r3, #2
 8009310:	d119      	bne.n	8009346 <HAL_SPI_TransmitReceive+0x276>
 8009312:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009314:	2b00      	cmp	r3, #0
 8009316:	d016      	beq.n	8009346 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800931c:	881a      	ldrh	r2, [r3, #0]
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009326:	1c9a      	adds	r2, r3, #2
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009332:	b29b      	uxth	r3, r3
 8009334:	3b01      	subs	r3, #1
 8009336:	b29a      	uxth	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009344:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	2b01      	cmp	r3, #1
 8009352:	d11a      	bne.n	800938a <HAL_SPI_TransmitReceive+0x2ba>
 8009354:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009356:	2b00      	cmp	r3, #0
 8009358:	d017      	beq.n	800938a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800935e:	6a3a      	ldr	r2, [r7, #32]
 8009360:	8812      	ldrh	r2, [r2, #0]
 8009362:	b292      	uxth	r2, r2
 8009364:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800936a:	1c9a      	adds	r2, r3, #2
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009376:	b29b      	uxth	r3, r3
 8009378:	3b01      	subs	r3, #1
 800937a:	b29a      	uxth	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009388:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800938a:	f7f8 fe49 	bl	8002020 <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009396:	429a      	cmp	r2, r3
 8009398:	d803      	bhi.n	80093a2 <HAL_SPI_TransmitReceive+0x2d2>
 800939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a0:	d102      	bne.n	80093a8 <HAL_SPI_TransmitReceive+0x2d8>
 80093a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d114      	bne.n	80093d2 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 f8b9 	bl	8009520 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e0a1      	b.n	8009516 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80093d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d195      	bne.n	8009304 <HAL_SPI_TransmitReceive+0x234>
 80093d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d192      	bne.n	8009304 <HAL_SPI_TransmitReceive+0x234>
 80093de:	e073      	b.n	80094c8 <HAL_SPI_TransmitReceive+0x3f8>
 80093e0:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d11b      	bne.n	800942a <HAL_SPI_TransmitReceive+0x35a>
 80093f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d018      	beq.n	800942a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3320      	adds	r3, #32
 8009402:	7812      	ldrb	r2, [r2, #0]
 8009404:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009416:	b29b      	uxth	r3, r3
 8009418:	3b01      	subs	r3, #1
 800941a:	b29a      	uxth	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009428:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	2b01      	cmp	r3, #1
 8009436:	d11d      	bne.n	8009474 <HAL_SPI_TransmitReceive+0x3a4>
 8009438:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800943a:	2b00      	cmp	r3, #0
 800943c:	d01a      	beq.n	8009474 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800944a:	7812      	ldrb	r2, [r2, #0]
 800944c:	b2d2      	uxtb	r2, r2
 800944e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009460:	b29b      	uxth	r3, r3
 8009462:	3b01      	subs	r3, #1
 8009464:	b29a      	uxth	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009472:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009474:	f7f8 fdd4 	bl	8002020 <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009480:	429a      	cmp	r2, r3
 8009482:	d803      	bhi.n	800948c <HAL_SPI_TransmitReceive+0x3bc>
 8009484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948a:	d102      	bne.n	8009492 <HAL_SPI_TransmitReceive+0x3c2>
 800948c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948e:	2b00      	cmp	r3, #0
 8009490:	d114      	bne.n	80094bc <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f000 f844 	bl	8009520 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e02c      	b.n	8009516 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80094bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d190      	bne.n	80093e4 <HAL_SPI_TransmitReceive+0x314>
 80094c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d18d      	bne.n	80093e4 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80094c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	2200      	movs	r2, #0
 80094d0:	2108      	movs	r1, #8
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 f8c4 	bl	8009660 <SPI_WaitOnFlagUntilTimeout>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d007      	beq.n	80094ee <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094e4:	f043 0220 	orr.w	r2, r3, #32
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 f816 	bl	8009520 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	e001      	b.n	8009516 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8009512:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009516:	4618      	mov	r0, r3
 8009518:	3730      	adds	r7, #48	; 0x30
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop

08009520 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	699a      	ldr	r2, [r3, #24]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f042 0208 	orr.w	r2, r2, #8
 800953e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	699a      	ldr	r2, [r3, #24]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f042 0210 	orr.w	r2, r2, #16
 800954e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f022 0201 	bic.w	r2, r2, #1
 800955e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6919      	ldr	r1, [r3, #16]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	4b3c      	ldr	r3, [pc, #240]	; (800965c <SPI_CloseTransfer+0x13c>)
 800956c:	400b      	ands	r3, r1
 800956e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800957e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b04      	cmp	r3, #4
 800958a:	d014      	beq.n	80095b6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f003 0320 	and.w	r3, r3, #32
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00f      	beq.n	80095b6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800959c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	699a      	ldr	r2, [r3, #24]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f042 0220 	orr.w	r2, r2, #32
 80095b4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d014      	beq.n	80095ec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d00f      	beq.n	80095ec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095d2:	f043 0204 	orr.w	r2, r3, #4
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	699a      	ldr	r2, [r3, #24]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095ea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00f      	beq.n	8009616 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095fc:	f043 0201 	orr.w	r2, r3, #1
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	699a      	ldr	r2, [r3, #24]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009614:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00f      	beq.n	8009640 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009626:	f043 0208 	orr.w	r2, r3, #8
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699a      	ldr	r2, [r3, #24]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800963e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009650:	bf00      	nop
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	fffffc90 	.word	0xfffffc90

08009660 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	603b      	str	r3, [r7, #0]
 800966c:	4613      	mov	r3, r2
 800966e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009670:	e010      	b.n	8009694 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009672:	f7f8 fcd5 	bl	8002020 <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	69ba      	ldr	r2, [r7, #24]
 800967e:	429a      	cmp	r2, r3
 8009680:	d803      	bhi.n	800968a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009688:	d102      	bne.n	8009690 <SPI_WaitOnFlagUntilTimeout+0x30>
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	e00f      	b.n	80096b4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	695a      	ldr	r2, [r3, #20]
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	4013      	ands	r3, r2
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	bf0c      	ite	eq
 80096a4:	2301      	moveq	r3, #1
 80096a6:	2300      	movne	r3, #0
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	461a      	mov	r2, r3
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d0df      	beq.n	8009672 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c8:	095b      	lsrs	r3, r3, #5
 80096ca:	3301      	adds	r3, #1
 80096cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	3301      	adds	r3, #1
 80096d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	3307      	adds	r3, #7
 80096da:	08db      	lsrs	r3, r3, #3
 80096dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	fb02 f303 	mul.w	r3, r2, r3
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e042      	b.n	800978a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800970a:	2b00      	cmp	r3, #0
 800970c:	d106      	bne.n	800971c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7f8 fa14 	bl	8001b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2224      	movs	r2, #36	; 0x24
 8009720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f022 0201 	bic.w	r2, r2, #1
 8009732:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f8c3 	bl	80098c0 <UART_SetConfig>
 800973a:	4603      	mov	r3, r0
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e022      	b.n	800978a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 ff23 	bl	800a598 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009760:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	689a      	ldr	r2, [r3, #8]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009770:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f042 0201 	orr.w	r2, r2, #1
 8009780:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 ffaa 	bl	800a6dc <UART_CheckIdleState>
 8009788:	4603      	mov	r3, r0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b08a      	sub	sp, #40	; 0x28
 8009796:	af02      	add	r7, sp, #8
 8009798:	60f8      	str	r0, [r7, #12]
 800979a:	60b9      	str	r1, [r7, #8]
 800979c:	603b      	str	r3, [r7, #0]
 800979e:	4613      	mov	r3, r2
 80097a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097a8:	2b20      	cmp	r3, #32
 80097aa:	f040 8083 	bne.w	80098b4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <HAL_UART_Transmit+0x28>
 80097b4:	88fb      	ldrh	r3, [r7, #6]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e07b      	b.n	80098b6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d101      	bne.n	80097cc <HAL_UART_Transmit+0x3a>
 80097c8:	2302      	movs	r3, #2
 80097ca:	e074      	b.n	80098b6 <HAL_UART_Transmit+0x124>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2221      	movs	r2, #33	; 0x21
 80097e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097e4:	f7f8 fc1c 	bl	8002020 <HAL_GetTick>
 80097e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	88fa      	ldrh	r2, [r7, #6]
 80097ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	88fa      	ldrh	r2, [r7, #6]
 80097f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009802:	d108      	bne.n	8009816 <HAL_UART_Transmit+0x84>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d104      	bne.n	8009816 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800980c:	2300      	movs	r3, #0
 800980e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	61bb      	str	r3, [r7, #24]
 8009814:	e003      	b.n	800981e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800981a:	2300      	movs	r3, #0
 800981c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009826:	e02c      	b.n	8009882 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2200      	movs	r2, #0
 8009830:	2180      	movs	r1, #128	; 0x80
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 ff9d 	bl	800a772 <UART_WaitOnFlagUntilTimeout>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e039      	b.n	80098b6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10b      	bne.n	8009860 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	461a      	mov	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009856:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	3302      	adds	r3, #2
 800985c:	61bb      	str	r3, [r7, #24]
 800985e:	e007      	b.n	8009870 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	781a      	ldrb	r2, [r3, #0]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	3301      	adds	r3, #1
 800986e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009876:	b29b      	uxth	r3, r3
 8009878:	3b01      	subs	r3, #1
 800987a:	b29a      	uxth	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009888:	b29b      	uxth	r3, r3
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1cc      	bne.n	8009828 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2200      	movs	r2, #0
 8009896:	2140      	movs	r1, #64	; 0x40
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 ff6a 	bl	800a772 <UART_WaitOnFlagUntilTimeout>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e006      	b.n	80098b6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2220      	movs	r2, #32
 80098ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	e000      	b.n	80098b6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80098b4:	2302      	movs	r3, #2
  }
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3720      	adds	r7, #32
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098c4:	b092      	sub	sp, #72	; 0x48
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	689a      	ldr	r2, [r3, #8]
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	431a      	orrs	r2, r3
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	431a      	orrs	r2, r3
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	69db      	ldr	r3, [r3, #28]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	4bbe      	ldr	r3, [pc, #760]	; (8009be8 <UART_SetConfig+0x328>)
 80098f0:	4013      	ands	r3, r2
 80098f2:	697a      	ldr	r2, [r7, #20]
 80098f4:	6812      	ldr	r2, [r2, #0]
 80098f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80098f8:	430b      	orrs	r3, r1
 80098fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	430a      	orrs	r2, r1
 8009910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4ab3      	ldr	r2, [pc, #716]	; (8009bec <UART_SetConfig+0x32c>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d004      	beq.n	800992c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009928:	4313      	orrs	r3, r2
 800992a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689a      	ldr	r2, [r3, #8]
 8009932:	4baf      	ldr	r3, [pc, #700]	; (8009bf0 <UART_SetConfig+0x330>)
 8009934:	4013      	ands	r3, r2
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	6812      	ldr	r2, [r2, #0]
 800993a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800993c:	430b      	orrs	r3, r1
 800993e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009946:	f023 010f 	bic.w	r1, r3, #15
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	430a      	orrs	r2, r1
 8009954:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4aa6      	ldr	r2, [pc, #664]	; (8009bf4 <UART_SetConfig+0x334>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d177      	bne.n	8009a50 <UART_SetConfig+0x190>
 8009960:	4ba5      	ldr	r3, [pc, #660]	; (8009bf8 <UART_SetConfig+0x338>)
 8009962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009964:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009968:	2b28      	cmp	r3, #40	; 0x28
 800996a:	d86d      	bhi.n	8009a48 <UART_SetConfig+0x188>
 800996c:	a201      	add	r2, pc, #4	; (adr r2, 8009974 <UART_SetConfig+0xb4>)
 800996e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009972:	bf00      	nop
 8009974:	08009a19 	.word	0x08009a19
 8009978:	08009a49 	.word	0x08009a49
 800997c:	08009a49 	.word	0x08009a49
 8009980:	08009a49 	.word	0x08009a49
 8009984:	08009a49 	.word	0x08009a49
 8009988:	08009a49 	.word	0x08009a49
 800998c:	08009a49 	.word	0x08009a49
 8009990:	08009a49 	.word	0x08009a49
 8009994:	08009a21 	.word	0x08009a21
 8009998:	08009a49 	.word	0x08009a49
 800999c:	08009a49 	.word	0x08009a49
 80099a0:	08009a49 	.word	0x08009a49
 80099a4:	08009a49 	.word	0x08009a49
 80099a8:	08009a49 	.word	0x08009a49
 80099ac:	08009a49 	.word	0x08009a49
 80099b0:	08009a49 	.word	0x08009a49
 80099b4:	08009a29 	.word	0x08009a29
 80099b8:	08009a49 	.word	0x08009a49
 80099bc:	08009a49 	.word	0x08009a49
 80099c0:	08009a49 	.word	0x08009a49
 80099c4:	08009a49 	.word	0x08009a49
 80099c8:	08009a49 	.word	0x08009a49
 80099cc:	08009a49 	.word	0x08009a49
 80099d0:	08009a49 	.word	0x08009a49
 80099d4:	08009a31 	.word	0x08009a31
 80099d8:	08009a49 	.word	0x08009a49
 80099dc:	08009a49 	.word	0x08009a49
 80099e0:	08009a49 	.word	0x08009a49
 80099e4:	08009a49 	.word	0x08009a49
 80099e8:	08009a49 	.word	0x08009a49
 80099ec:	08009a49 	.word	0x08009a49
 80099f0:	08009a49 	.word	0x08009a49
 80099f4:	08009a39 	.word	0x08009a39
 80099f8:	08009a49 	.word	0x08009a49
 80099fc:	08009a49 	.word	0x08009a49
 8009a00:	08009a49 	.word	0x08009a49
 8009a04:	08009a49 	.word	0x08009a49
 8009a08:	08009a49 	.word	0x08009a49
 8009a0c:	08009a49 	.word	0x08009a49
 8009a10:	08009a49 	.word	0x08009a49
 8009a14:	08009a41 	.word	0x08009a41
 8009a18:	2301      	movs	r3, #1
 8009a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a1e:	e326      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009a20:	2304      	movs	r3, #4
 8009a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a26:	e322      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009a28:	2308      	movs	r3, #8
 8009a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2e:	e31e      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009a30:	2310      	movs	r3, #16
 8009a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a36:	e31a      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009a38:	2320      	movs	r3, #32
 8009a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a3e:	e316      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009a40:	2340      	movs	r3, #64	; 0x40
 8009a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a46:	e312      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009a48:	2380      	movs	r3, #128	; 0x80
 8009a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4e:	e30e      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a69      	ldr	r2, [pc, #420]	; (8009bfc <UART_SetConfig+0x33c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d130      	bne.n	8009abc <UART_SetConfig+0x1fc>
 8009a5a:	4b67      	ldr	r3, [pc, #412]	; (8009bf8 <UART_SetConfig+0x338>)
 8009a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5e:	f003 0307 	and.w	r3, r3, #7
 8009a62:	2b05      	cmp	r3, #5
 8009a64:	d826      	bhi.n	8009ab4 <UART_SetConfig+0x1f4>
 8009a66:	a201      	add	r2, pc, #4	; (adr r2, 8009a6c <UART_SetConfig+0x1ac>)
 8009a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6c:	08009a85 	.word	0x08009a85
 8009a70:	08009a8d 	.word	0x08009a8d
 8009a74:	08009a95 	.word	0x08009a95
 8009a78:	08009a9d 	.word	0x08009a9d
 8009a7c:	08009aa5 	.word	0x08009aa5
 8009a80:	08009aad 	.word	0x08009aad
 8009a84:	2300      	movs	r3, #0
 8009a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a8a:	e2f0      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009a8c:	2304      	movs	r3, #4
 8009a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a92:	e2ec      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009a94:	2308      	movs	r3, #8
 8009a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a9a:	e2e8      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009a9c:	2310      	movs	r3, #16
 8009a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa2:	e2e4      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009aa4:	2320      	movs	r3, #32
 8009aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aaa:	e2e0      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009aac:	2340      	movs	r3, #64	; 0x40
 8009aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ab2:	e2dc      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009ab4:	2380      	movs	r3, #128	; 0x80
 8009ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aba:	e2d8      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a4f      	ldr	r2, [pc, #316]	; (8009c00 <UART_SetConfig+0x340>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d130      	bne.n	8009b28 <UART_SetConfig+0x268>
 8009ac6:	4b4c      	ldr	r3, [pc, #304]	; (8009bf8 <UART_SetConfig+0x338>)
 8009ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aca:	f003 0307 	and.w	r3, r3, #7
 8009ace:	2b05      	cmp	r3, #5
 8009ad0:	d826      	bhi.n	8009b20 <UART_SetConfig+0x260>
 8009ad2:	a201      	add	r2, pc, #4	; (adr r2, 8009ad8 <UART_SetConfig+0x218>)
 8009ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad8:	08009af1 	.word	0x08009af1
 8009adc:	08009af9 	.word	0x08009af9
 8009ae0:	08009b01 	.word	0x08009b01
 8009ae4:	08009b09 	.word	0x08009b09
 8009ae8:	08009b11 	.word	0x08009b11
 8009aec:	08009b19 	.word	0x08009b19
 8009af0:	2300      	movs	r3, #0
 8009af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af6:	e2ba      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009af8:	2304      	movs	r3, #4
 8009afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afe:	e2b6      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009b00:	2308      	movs	r3, #8
 8009b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b06:	e2b2      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009b08:	2310      	movs	r3, #16
 8009b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0e:	e2ae      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009b10:	2320      	movs	r3, #32
 8009b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b16:	e2aa      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009b18:	2340      	movs	r3, #64	; 0x40
 8009b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1e:	e2a6      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009b20:	2380      	movs	r3, #128	; 0x80
 8009b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b26:	e2a2      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a35      	ldr	r2, [pc, #212]	; (8009c04 <UART_SetConfig+0x344>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d130      	bne.n	8009b94 <UART_SetConfig+0x2d4>
 8009b32:	4b31      	ldr	r3, [pc, #196]	; (8009bf8 <UART_SetConfig+0x338>)
 8009b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b36:	f003 0307 	and.w	r3, r3, #7
 8009b3a:	2b05      	cmp	r3, #5
 8009b3c:	d826      	bhi.n	8009b8c <UART_SetConfig+0x2cc>
 8009b3e:	a201      	add	r2, pc, #4	; (adr r2, 8009b44 <UART_SetConfig+0x284>)
 8009b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b44:	08009b5d 	.word	0x08009b5d
 8009b48:	08009b65 	.word	0x08009b65
 8009b4c:	08009b6d 	.word	0x08009b6d
 8009b50:	08009b75 	.word	0x08009b75
 8009b54:	08009b7d 	.word	0x08009b7d
 8009b58:	08009b85 	.word	0x08009b85
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b62:	e284      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009b64:	2304      	movs	r3, #4
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6a:	e280      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009b6c:	2308      	movs	r3, #8
 8009b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b72:	e27c      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009b74:	2310      	movs	r3, #16
 8009b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7a:	e278      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009b7c:	2320      	movs	r3, #32
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b82:	e274      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009b84:	2340      	movs	r3, #64	; 0x40
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8a:	e270      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009b8c:	2380      	movs	r3, #128	; 0x80
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b92:	e26c      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a1b      	ldr	r2, [pc, #108]	; (8009c08 <UART_SetConfig+0x348>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d142      	bne.n	8009c24 <UART_SetConfig+0x364>
 8009b9e:	4b16      	ldr	r3, [pc, #88]	; (8009bf8 <UART_SetConfig+0x338>)
 8009ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba2:	f003 0307 	and.w	r3, r3, #7
 8009ba6:	2b05      	cmp	r3, #5
 8009ba8:	d838      	bhi.n	8009c1c <UART_SetConfig+0x35c>
 8009baa:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <UART_SetConfig+0x2f0>)
 8009bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb0:	08009bc9 	.word	0x08009bc9
 8009bb4:	08009bd1 	.word	0x08009bd1
 8009bb8:	08009bd9 	.word	0x08009bd9
 8009bbc:	08009be1 	.word	0x08009be1
 8009bc0:	08009c0d 	.word	0x08009c0d
 8009bc4:	08009c15 	.word	0x08009c15
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bce:	e24e      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009bd0:	2304      	movs	r3, #4
 8009bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd6:	e24a      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009bd8:	2308      	movs	r3, #8
 8009bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bde:	e246      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009be0:	2310      	movs	r3, #16
 8009be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be6:	e242      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009be8:	cfff69f3 	.word	0xcfff69f3
 8009bec:	58000c00 	.word	0x58000c00
 8009bf0:	11fff4ff 	.word	0x11fff4ff
 8009bf4:	40011000 	.word	0x40011000
 8009bf8:	58024400 	.word	0x58024400
 8009bfc:	40004400 	.word	0x40004400
 8009c00:	40004800 	.word	0x40004800
 8009c04:	40004c00 	.word	0x40004c00
 8009c08:	40005000 	.word	0x40005000
 8009c0c:	2320      	movs	r3, #32
 8009c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c12:	e22c      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009c14:	2340      	movs	r3, #64	; 0x40
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c1a:	e228      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009c1c:	2380      	movs	r3, #128	; 0x80
 8009c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c22:	e224      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4ab1      	ldr	r2, [pc, #708]	; (8009ef0 <UART_SetConfig+0x630>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d176      	bne.n	8009d1c <UART_SetConfig+0x45c>
 8009c2e:	4bb1      	ldr	r3, [pc, #708]	; (8009ef4 <UART_SetConfig+0x634>)
 8009c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c36:	2b28      	cmp	r3, #40	; 0x28
 8009c38:	d86c      	bhi.n	8009d14 <UART_SetConfig+0x454>
 8009c3a:	a201      	add	r2, pc, #4	; (adr r2, 8009c40 <UART_SetConfig+0x380>)
 8009c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c40:	08009ce5 	.word	0x08009ce5
 8009c44:	08009d15 	.word	0x08009d15
 8009c48:	08009d15 	.word	0x08009d15
 8009c4c:	08009d15 	.word	0x08009d15
 8009c50:	08009d15 	.word	0x08009d15
 8009c54:	08009d15 	.word	0x08009d15
 8009c58:	08009d15 	.word	0x08009d15
 8009c5c:	08009d15 	.word	0x08009d15
 8009c60:	08009ced 	.word	0x08009ced
 8009c64:	08009d15 	.word	0x08009d15
 8009c68:	08009d15 	.word	0x08009d15
 8009c6c:	08009d15 	.word	0x08009d15
 8009c70:	08009d15 	.word	0x08009d15
 8009c74:	08009d15 	.word	0x08009d15
 8009c78:	08009d15 	.word	0x08009d15
 8009c7c:	08009d15 	.word	0x08009d15
 8009c80:	08009cf5 	.word	0x08009cf5
 8009c84:	08009d15 	.word	0x08009d15
 8009c88:	08009d15 	.word	0x08009d15
 8009c8c:	08009d15 	.word	0x08009d15
 8009c90:	08009d15 	.word	0x08009d15
 8009c94:	08009d15 	.word	0x08009d15
 8009c98:	08009d15 	.word	0x08009d15
 8009c9c:	08009d15 	.word	0x08009d15
 8009ca0:	08009cfd 	.word	0x08009cfd
 8009ca4:	08009d15 	.word	0x08009d15
 8009ca8:	08009d15 	.word	0x08009d15
 8009cac:	08009d15 	.word	0x08009d15
 8009cb0:	08009d15 	.word	0x08009d15
 8009cb4:	08009d15 	.word	0x08009d15
 8009cb8:	08009d15 	.word	0x08009d15
 8009cbc:	08009d15 	.word	0x08009d15
 8009cc0:	08009d05 	.word	0x08009d05
 8009cc4:	08009d15 	.word	0x08009d15
 8009cc8:	08009d15 	.word	0x08009d15
 8009ccc:	08009d15 	.word	0x08009d15
 8009cd0:	08009d15 	.word	0x08009d15
 8009cd4:	08009d15 	.word	0x08009d15
 8009cd8:	08009d15 	.word	0x08009d15
 8009cdc:	08009d15 	.word	0x08009d15
 8009ce0:	08009d0d 	.word	0x08009d0d
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cea:	e1c0      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009cec:	2304      	movs	r3, #4
 8009cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf2:	e1bc      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009cf4:	2308      	movs	r3, #8
 8009cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfa:	e1b8      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009cfc:	2310      	movs	r3, #16
 8009cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d02:	e1b4      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009d04:	2320      	movs	r3, #32
 8009d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d0a:	e1b0      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009d0c:	2340      	movs	r3, #64	; 0x40
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d12:	e1ac      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009d14:	2380      	movs	r3, #128	; 0x80
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d1a:	e1a8      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a75      	ldr	r2, [pc, #468]	; (8009ef8 <UART_SetConfig+0x638>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d130      	bne.n	8009d88 <UART_SetConfig+0x4c8>
 8009d26:	4b73      	ldr	r3, [pc, #460]	; (8009ef4 <UART_SetConfig+0x634>)
 8009d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d2a:	f003 0307 	and.w	r3, r3, #7
 8009d2e:	2b05      	cmp	r3, #5
 8009d30:	d826      	bhi.n	8009d80 <UART_SetConfig+0x4c0>
 8009d32:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <UART_SetConfig+0x478>)
 8009d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d38:	08009d51 	.word	0x08009d51
 8009d3c:	08009d59 	.word	0x08009d59
 8009d40:	08009d61 	.word	0x08009d61
 8009d44:	08009d69 	.word	0x08009d69
 8009d48:	08009d71 	.word	0x08009d71
 8009d4c:	08009d79 	.word	0x08009d79
 8009d50:	2300      	movs	r3, #0
 8009d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d56:	e18a      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009d58:	2304      	movs	r3, #4
 8009d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5e:	e186      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009d60:	2308      	movs	r3, #8
 8009d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d66:	e182      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009d68:	2310      	movs	r3, #16
 8009d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d6e:	e17e      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009d70:	2320      	movs	r3, #32
 8009d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d76:	e17a      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009d78:	2340      	movs	r3, #64	; 0x40
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d7e:	e176      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009d80:	2380      	movs	r3, #128	; 0x80
 8009d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d86:	e172      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a5b      	ldr	r2, [pc, #364]	; (8009efc <UART_SetConfig+0x63c>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d130      	bne.n	8009df4 <UART_SetConfig+0x534>
 8009d92:	4b58      	ldr	r3, [pc, #352]	; (8009ef4 <UART_SetConfig+0x634>)
 8009d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d96:	f003 0307 	and.w	r3, r3, #7
 8009d9a:	2b05      	cmp	r3, #5
 8009d9c:	d826      	bhi.n	8009dec <UART_SetConfig+0x52c>
 8009d9e:	a201      	add	r2, pc, #4	; (adr r2, 8009da4 <UART_SetConfig+0x4e4>)
 8009da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da4:	08009dbd 	.word	0x08009dbd
 8009da8:	08009dc5 	.word	0x08009dc5
 8009dac:	08009dcd 	.word	0x08009dcd
 8009db0:	08009dd5 	.word	0x08009dd5
 8009db4:	08009ddd 	.word	0x08009ddd
 8009db8:	08009de5 	.word	0x08009de5
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc2:	e154      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009dc4:	2304      	movs	r3, #4
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dca:	e150      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009dcc:	2308      	movs	r3, #8
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dd2:	e14c      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009dd4:	2310      	movs	r3, #16
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dda:	e148      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009ddc:	2320      	movs	r3, #32
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de2:	e144      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009de4:	2340      	movs	r3, #64	; 0x40
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dea:	e140      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009dec:	2380      	movs	r3, #128	; 0x80
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009df2:	e13c      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a41      	ldr	r2, [pc, #260]	; (8009f00 <UART_SetConfig+0x640>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	f040 8082 	bne.w	8009f04 <UART_SetConfig+0x644>
 8009e00:	4b3c      	ldr	r3, [pc, #240]	; (8009ef4 <UART_SetConfig+0x634>)
 8009e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e08:	2b28      	cmp	r3, #40	; 0x28
 8009e0a:	d86d      	bhi.n	8009ee8 <UART_SetConfig+0x628>
 8009e0c:	a201      	add	r2, pc, #4	; (adr r2, 8009e14 <UART_SetConfig+0x554>)
 8009e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e12:	bf00      	nop
 8009e14:	08009eb9 	.word	0x08009eb9
 8009e18:	08009ee9 	.word	0x08009ee9
 8009e1c:	08009ee9 	.word	0x08009ee9
 8009e20:	08009ee9 	.word	0x08009ee9
 8009e24:	08009ee9 	.word	0x08009ee9
 8009e28:	08009ee9 	.word	0x08009ee9
 8009e2c:	08009ee9 	.word	0x08009ee9
 8009e30:	08009ee9 	.word	0x08009ee9
 8009e34:	08009ec1 	.word	0x08009ec1
 8009e38:	08009ee9 	.word	0x08009ee9
 8009e3c:	08009ee9 	.word	0x08009ee9
 8009e40:	08009ee9 	.word	0x08009ee9
 8009e44:	08009ee9 	.word	0x08009ee9
 8009e48:	08009ee9 	.word	0x08009ee9
 8009e4c:	08009ee9 	.word	0x08009ee9
 8009e50:	08009ee9 	.word	0x08009ee9
 8009e54:	08009ec9 	.word	0x08009ec9
 8009e58:	08009ee9 	.word	0x08009ee9
 8009e5c:	08009ee9 	.word	0x08009ee9
 8009e60:	08009ee9 	.word	0x08009ee9
 8009e64:	08009ee9 	.word	0x08009ee9
 8009e68:	08009ee9 	.word	0x08009ee9
 8009e6c:	08009ee9 	.word	0x08009ee9
 8009e70:	08009ee9 	.word	0x08009ee9
 8009e74:	08009ed1 	.word	0x08009ed1
 8009e78:	08009ee9 	.word	0x08009ee9
 8009e7c:	08009ee9 	.word	0x08009ee9
 8009e80:	08009ee9 	.word	0x08009ee9
 8009e84:	08009ee9 	.word	0x08009ee9
 8009e88:	08009ee9 	.word	0x08009ee9
 8009e8c:	08009ee9 	.word	0x08009ee9
 8009e90:	08009ee9 	.word	0x08009ee9
 8009e94:	08009ed9 	.word	0x08009ed9
 8009e98:	08009ee9 	.word	0x08009ee9
 8009e9c:	08009ee9 	.word	0x08009ee9
 8009ea0:	08009ee9 	.word	0x08009ee9
 8009ea4:	08009ee9 	.word	0x08009ee9
 8009ea8:	08009ee9 	.word	0x08009ee9
 8009eac:	08009ee9 	.word	0x08009ee9
 8009eb0:	08009ee9 	.word	0x08009ee9
 8009eb4:	08009ee1 	.word	0x08009ee1
 8009eb8:	2301      	movs	r3, #1
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ebe:	e0d6      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009ec0:	2304      	movs	r3, #4
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec6:	e0d2      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009ec8:	2308      	movs	r3, #8
 8009eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ece:	e0ce      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009ed0:	2310      	movs	r3, #16
 8009ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ed6:	e0ca      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009ed8:	2320      	movs	r3, #32
 8009eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ede:	e0c6      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009ee0:	2340      	movs	r3, #64	; 0x40
 8009ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee6:	e0c2      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009ee8:	2380      	movs	r3, #128	; 0x80
 8009eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eee:	e0be      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009ef0:	40011400 	.word	0x40011400
 8009ef4:	58024400 	.word	0x58024400
 8009ef8:	40007800 	.word	0x40007800
 8009efc:	40007c00 	.word	0x40007c00
 8009f00:	40011800 	.word	0x40011800
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4aad      	ldr	r2, [pc, #692]	; (800a1c0 <UART_SetConfig+0x900>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d176      	bne.n	8009ffc <UART_SetConfig+0x73c>
 8009f0e:	4bad      	ldr	r3, [pc, #692]	; (800a1c4 <UART_SetConfig+0x904>)
 8009f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f16:	2b28      	cmp	r3, #40	; 0x28
 8009f18:	d86c      	bhi.n	8009ff4 <UART_SetConfig+0x734>
 8009f1a:	a201      	add	r2, pc, #4	; (adr r2, 8009f20 <UART_SetConfig+0x660>)
 8009f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f20:	08009fc5 	.word	0x08009fc5
 8009f24:	08009ff5 	.word	0x08009ff5
 8009f28:	08009ff5 	.word	0x08009ff5
 8009f2c:	08009ff5 	.word	0x08009ff5
 8009f30:	08009ff5 	.word	0x08009ff5
 8009f34:	08009ff5 	.word	0x08009ff5
 8009f38:	08009ff5 	.word	0x08009ff5
 8009f3c:	08009ff5 	.word	0x08009ff5
 8009f40:	08009fcd 	.word	0x08009fcd
 8009f44:	08009ff5 	.word	0x08009ff5
 8009f48:	08009ff5 	.word	0x08009ff5
 8009f4c:	08009ff5 	.word	0x08009ff5
 8009f50:	08009ff5 	.word	0x08009ff5
 8009f54:	08009ff5 	.word	0x08009ff5
 8009f58:	08009ff5 	.word	0x08009ff5
 8009f5c:	08009ff5 	.word	0x08009ff5
 8009f60:	08009fd5 	.word	0x08009fd5
 8009f64:	08009ff5 	.word	0x08009ff5
 8009f68:	08009ff5 	.word	0x08009ff5
 8009f6c:	08009ff5 	.word	0x08009ff5
 8009f70:	08009ff5 	.word	0x08009ff5
 8009f74:	08009ff5 	.word	0x08009ff5
 8009f78:	08009ff5 	.word	0x08009ff5
 8009f7c:	08009ff5 	.word	0x08009ff5
 8009f80:	08009fdd 	.word	0x08009fdd
 8009f84:	08009ff5 	.word	0x08009ff5
 8009f88:	08009ff5 	.word	0x08009ff5
 8009f8c:	08009ff5 	.word	0x08009ff5
 8009f90:	08009ff5 	.word	0x08009ff5
 8009f94:	08009ff5 	.word	0x08009ff5
 8009f98:	08009ff5 	.word	0x08009ff5
 8009f9c:	08009ff5 	.word	0x08009ff5
 8009fa0:	08009fe5 	.word	0x08009fe5
 8009fa4:	08009ff5 	.word	0x08009ff5
 8009fa8:	08009ff5 	.word	0x08009ff5
 8009fac:	08009ff5 	.word	0x08009ff5
 8009fb0:	08009ff5 	.word	0x08009ff5
 8009fb4:	08009ff5 	.word	0x08009ff5
 8009fb8:	08009ff5 	.word	0x08009ff5
 8009fbc:	08009ff5 	.word	0x08009ff5
 8009fc0:	08009fed 	.word	0x08009fed
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fca:	e050      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009fcc:	2304      	movs	r3, #4
 8009fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fd2:	e04c      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009fd4:	2308      	movs	r3, #8
 8009fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fda:	e048      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009fdc:	2310      	movs	r3, #16
 8009fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fe2:	e044      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009fe4:	2320      	movs	r3, #32
 8009fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fea:	e040      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009fec:	2340      	movs	r3, #64	; 0x40
 8009fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ff2:	e03c      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009ff4:	2380      	movs	r3, #128	; 0x80
 8009ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ffa:	e038      	b.n	800a06e <UART_SetConfig+0x7ae>
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a71      	ldr	r2, [pc, #452]	; (800a1c8 <UART_SetConfig+0x908>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d130      	bne.n	800a068 <UART_SetConfig+0x7a8>
 800a006:	4b6f      	ldr	r3, [pc, #444]	; (800a1c4 <UART_SetConfig+0x904>)
 800a008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a00a:	f003 0307 	and.w	r3, r3, #7
 800a00e:	2b05      	cmp	r3, #5
 800a010:	d826      	bhi.n	800a060 <UART_SetConfig+0x7a0>
 800a012:	a201      	add	r2, pc, #4	; (adr r2, 800a018 <UART_SetConfig+0x758>)
 800a014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a018:	0800a031 	.word	0x0800a031
 800a01c:	0800a039 	.word	0x0800a039
 800a020:	0800a041 	.word	0x0800a041
 800a024:	0800a049 	.word	0x0800a049
 800a028:	0800a051 	.word	0x0800a051
 800a02c:	0800a059 	.word	0x0800a059
 800a030:	2302      	movs	r3, #2
 800a032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a036:	e01a      	b.n	800a06e <UART_SetConfig+0x7ae>
 800a038:	2304      	movs	r3, #4
 800a03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a03e:	e016      	b.n	800a06e <UART_SetConfig+0x7ae>
 800a040:	2308      	movs	r3, #8
 800a042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a046:	e012      	b.n	800a06e <UART_SetConfig+0x7ae>
 800a048:	2310      	movs	r3, #16
 800a04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a04e:	e00e      	b.n	800a06e <UART_SetConfig+0x7ae>
 800a050:	2320      	movs	r3, #32
 800a052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a056:	e00a      	b.n	800a06e <UART_SetConfig+0x7ae>
 800a058:	2340      	movs	r3, #64	; 0x40
 800a05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a05e:	e006      	b.n	800a06e <UART_SetConfig+0x7ae>
 800a060:	2380      	movs	r3, #128	; 0x80
 800a062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a066:	e002      	b.n	800a06e <UART_SetConfig+0x7ae>
 800a068:	2380      	movs	r3, #128	; 0x80
 800a06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a55      	ldr	r2, [pc, #340]	; (800a1c8 <UART_SetConfig+0x908>)
 800a074:	4293      	cmp	r3, r2
 800a076:	f040 80f8 	bne.w	800a26a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a07a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a07e:	2b20      	cmp	r3, #32
 800a080:	dc46      	bgt.n	800a110 <UART_SetConfig+0x850>
 800a082:	2b02      	cmp	r3, #2
 800a084:	db75      	blt.n	800a172 <UART_SetConfig+0x8b2>
 800a086:	3b02      	subs	r3, #2
 800a088:	2b1e      	cmp	r3, #30
 800a08a:	d872      	bhi.n	800a172 <UART_SetConfig+0x8b2>
 800a08c:	a201      	add	r2, pc, #4	; (adr r2, 800a094 <UART_SetConfig+0x7d4>)
 800a08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a092:	bf00      	nop
 800a094:	0800a117 	.word	0x0800a117
 800a098:	0800a173 	.word	0x0800a173
 800a09c:	0800a11f 	.word	0x0800a11f
 800a0a0:	0800a173 	.word	0x0800a173
 800a0a4:	0800a173 	.word	0x0800a173
 800a0a8:	0800a173 	.word	0x0800a173
 800a0ac:	0800a12f 	.word	0x0800a12f
 800a0b0:	0800a173 	.word	0x0800a173
 800a0b4:	0800a173 	.word	0x0800a173
 800a0b8:	0800a173 	.word	0x0800a173
 800a0bc:	0800a173 	.word	0x0800a173
 800a0c0:	0800a173 	.word	0x0800a173
 800a0c4:	0800a173 	.word	0x0800a173
 800a0c8:	0800a173 	.word	0x0800a173
 800a0cc:	0800a13f 	.word	0x0800a13f
 800a0d0:	0800a173 	.word	0x0800a173
 800a0d4:	0800a173 	.word	0x0800a173
 800a0d8:	0800a173 	.word	0x0800a173
 800a0dc:	0800a173 	.word	0x0800a173
 800a0e0:	0800a173 	.word	0x0800a173
 800a0e4:	0800a173 	.word	0x0800a173
 800a0e8:	0800a173 	.word	0x0800a173
 800a0ec:	0800a173 	.word	0x0800a173
 800a0f0:	0800a173 	.word	0x0800a173
 800a0f4:	0800a173 	.word	0x0800a173
 800a0f8:	0800a173 	.word	0x0800a173
 800a0fc:	0800a173 	.word	0x0800a173
 800a100:	0800a173 	.word	0x0800a173
 800a104:	0800a173 	.word	0x0800a173
 800a108:	0800a173 	.word	0x0800a173
 800a10c:	0800a165 	.word	0x0800a165
 800a110:	2b40      	cmp	r3, #64	; 0x40
 800a112:	d02a      	beq.n	800a16a <UART_SetConfig+0x8aa>
 800a114:	e02d      	b.n	800a172 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a116:	f7fc fb11 	bl	800673c <HAL_RCCEx_GetD3PCLK1Freq>
 800a11a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a11c:	e02f      	b.n	800a17e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a11e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a122:	4618      	mov	r0, r3
 800a124:	f7fc fb20 	bl	8006768 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a12c:	e027      	b.n	800a17e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a12e:	f107 0318 	add.w	r3, r7, #24
 800a132:	4618      	mov	r0, r3
 800a134:	f7fc fc6c 	bl	8006a10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a13c:	e01f      	b.n	800a17e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a13e:	4b21      	ldr	r3, [pc, #132]	; (800a1c4 <UART_SetConfig+0x904>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b00      	cmp	r3, #0
 800a148:	d009      	beq.n	800a15e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a14a:	4b1e      	ldr	r3, [pc, #120]	; (800a1c4 <UART_SetConfig+0x904>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	08db      	lsrs	r3, r3, #3
 800a150:	f003 0303 	and.w	r3, r3, #3
 800a154:	4a1d      	ldr	r2, [pc, #116]	; (800a1cc <UART_SetConfig+0x90c>)
 800a156:	fa22 f303 	lsr.w	r3, r2, r3
 800a15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a15c:	e00f      	b.n	800a17e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a15e:	4b1b      	ldr	r3, [pc, #108]	; (800a1cc <UART_SetConfig+0x90c>)
 800a160:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a162:	e00c      	b.n	800a17e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a164:	4b1a      	ldr	r3, [pc, #104]	; (800a1d0 <UART_SetConfig+0x910>)
 800a166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a168:	e009      	b.n	800a17e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a16a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a170:	e005      	b.n	800a17e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a17c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 81ee 	beq.w	800a562 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18a:	4a12      	ldr	r2, [pc, #72]	; (800a1d4 <UART_SetConfig+0x914>)
 800a18c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a190:	461a      	mov	r2, r3
 800a192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a194:	fbb3 f3f2 	udiv	r3, r3, r2
 800a198:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	4413      	add	r3, r2
 800a1a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d305      	bcc.n	800a1b6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d910      	bls.n	800a1d8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1bc:	e1d1      	b.n	800a562 <UART_SetConfig+0xca2>
 800a1be:	bf00      	nop
 800a1c0:	40011c00 	.word	0x40011c00
 800a1c4:	58024400 	.word	0x58024400
 800a1c8:	58000c00 	.word	0x58000c00
 800a1cc:	03d09000 	.word	0x03d09000
 800a1d0:	003d0900 	.word	0x003d0900
 800a1d4:	0800c9f8 	.word	0x0800c9f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1da:	2200      	movs	r2, #0
 800a1dc:	60bb      	str	r3, [r7, #8]
 800a1de:	60fa      	str	r2, [r7, #12]
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e4:	4ac0      	ldr	r2, [pc, #768]	; (800a4e8 <UART_SetConfig+0xc28>)
 800a1e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	603b      	str	r3, [r7, #0]
 800a1f0:	607a      	str	r2, [r7, #4]
 800a1f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1fa:	f7f6 f8d1 	bl	80003a0 <__aeabi_uldivmod>
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	4610      	mov	r0, r2
 800a204:	4619      	mov	r1, r3
 800a206:	f04f 0200 	mov.w	r2, #0
 800a20a:	f04f 0300 	mov.w	r3, #0
 800a20e:	020b      	lsls	r3, r1, #8
 800a210:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a214:	0202      	lsls	r2, r0, #8
 800a216:	6979      	ldr	r1, [r7, #20]
 800a218:	6849      	ldr	r1, [r1, #4]
 800a21a:	0849      	lsrs	r1, r1, #1
 800a21c:	2000      	movs	r0, #0
 800a21e:	460c      	mov	r4, r1
 800a220:	4605      	mov	r5, r0
 800a222:	eb12 0804 	adds.w	r8, r2, r4
 800a226:	eb43 0905 	adc.w	r9, r3, r5
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	469a      	mov	sl, r3
 800a232:	4693      	mov	fp, r2
 800a234:	4652      	mov	r2, sl
 800a236:	465b      	mov	r3, fp
 800a238:	4640      	mov	r0, r8
 800a23a:	4649      	mov	r1, r9
 800a23c:	f7f6 f8b0 	bl	80003a0 <__aeabi_uldivmod>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	4613      	mov	r3, r2
 800a246:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a24e:	d308      	bcc.n	800a262 <UART_SetConfig+0x9a2>
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a256:	d204      	bcs.n	800a262 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a25e:	60da      	str	r2, [r3, #12]
 800a260:	e17f      	b.n	800a562 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a268:	e17b      	b.n	800a562 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	69db      	ldr	r3, [r3, #28]
 800a26e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a272:	f040 80bd 	bne.w	800a3f0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a276:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a27a:	2b20      	cmp	r3, #32
 800a27c:	dc48      	bgt.n	800a310 <UART_SetConfig+0xa50>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	db7b      	blt.n	800a37a <UART_SetConfig+0xaba>
 800a282:	2b20      	cmp	r3, #32
 800a284:	d879      	bhi.n	800a37a <UART_SetConfig+0xaba>
 800a286:	a201      	add	r2, pc, #4	; (adr r2, 800a28c <UART_SetConfig+0x9cc>)
 800a288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28c:	0800a317 	.word	0x0800a317
 800a290:	0800a31f 	.word	0x0800a31f
 800a294:	0800a37b 	.word	0x0800a37b
 800a298:	0800a37b 	.word	0x0800a37b
 800a29c:	0800a327 	.word	0x0800a327
 800a2a0:	0800a37b 	.word	0x0800a37b
 800a2a4:	0800a37b 	.word	0x0800a37b
 800a2a8:	0800a37b 	.word	0x0800a37b
 800a2ac:	0800a337 	.word	0x0800a337
 800a2b0:	0800a37b 	.word	0x0800a37b
 800a2b4:	0800a37b 	.word	0x0800a37b
 800a2b8:	0800a37b 	.word	0x0800a37b
 800a2bc:	0800a37b 	.word	0x0800a37b
 800a2c0:	0800a37b 	.word	0x0800a37b
 800a2c4:	0800a37b 	.word	0x0800a37b
 800a2c8:	0800a37b 	.word	0x0800a37b
 800a2cc:	0800a347 	.word	0x0800a347
 800a2d0:	0800a37b 	.word	0x0800a37b
 800a2d4:	0800a37b 	.word	0x0800a37b
 800a2d8:	0800a37b 	.word	0x0800a37b
 800a2dc:	0800a37b 	.word	0x0800a37b
 800a2e0:	0800a37b 	.word	0x0800a37b
 800a2e4:	0800a37b 	.word	0x0800a37b
 800a2e8:	0800a37b 	.word	0x0800a37b
 800a2ec:	0800a37b 	.word	0x0800a37b
 800a2f0:	0800a37b 	.word	0x0800a37b
 800a2f4:	0800a37b 	.word	0x0800a37b
 800a2f8:	0800a37b 	.word	0x0800a37b
 800a2fc:	0800a37b 	.word	0x0800a37b
 800a300:	0800a37b 	.word	0x0800a37b
 800a304:	0800a37b 	.word	0x0800a37b
 800a308:	0800a37b 	.word	0x0800a37b
 800a30c:	0800a36d 	.word	0x0800a36d
 800a310:	2b40      	cmp	r3, #64	; 0x40
 800a312:	d02e      	beq.n	800a372 <UART_SetConfig+0xab2>
 800a314:	e031      	b.n	800a37a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a316:	f7fa feab 	bl	8005070 <HAL_RCC_GetPCLK1Freq>
 800a31a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a31c:	e033      	b.n	800a386 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a31e:	f7fa febd 	bl	800509c <HAL_RCC_GetPCLK2Freq>
 800a322:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a324:	e02f      	b.n	800a386 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fc fa1c 	bl	8006768 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a334:	e027      	b.n	800a386 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a336:	f107 0318 	add.w	r3, r7, #24
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fc fb68 	bl	8006a10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a344:	e01f      	b.n	800a386 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a346:	4b69      	ldr	r3, [pc, #420]	; (800a4ec <UART_SetConfig+0xc2c>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 0320 	and.w	r3, r3, #32
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d009      	beq.n	800a366 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a352:	4b66      	ldr	r3, [pc, #408]	; (800a4ec <UART_SetConfig+0xc2c>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	08db      	lsrs	r3, r3, #3
 800a358:	f003 0303 	and.w	r3, r3, #3
 800a35c:	4a64      	ldr	r2, [pc, #400]	; (800a4f0 <UART_SetConfig+0xc30>)
 800a35e:	fa22 f303 	lsr.w	r3, r2, r3
 800a362:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a364:	e00f      	b.n	800a386 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a366:	4b62      	ldr	r3, [pc, #392]	; (800a4f0 <UART_SetConfig+0xc30>)
 800a368:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a36a:	e00c      	b.n	800a386 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a36c:	4b61      	ldr	r3, [pc, #388]	; (800a4f4 <UART_SetConfig+0xc34>)
 800a36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a370:	e009      	b.n	800a386 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a378:	e005      	b.n	800a386 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a37a:	2300      	movs	r3, #0
 800a37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a384:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 80ea 	beq.w	800a562 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a392:	4a55      	ldr	r2, [pc, #340]	; (800a4e8 <UART_SetConfig+0xc28>)
 800a394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a398:	461a      	mov	r2, r3
 800a39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a39c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3a0:	005a      	lsls	r2, r3, #1
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	085b      	lsrs	r3, r3, #1
 800a3a8:	441a      	add	r2, r3
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b6:	2b0f      	cmp	r3, #15
 800a3b8:	d916      	bls.n	800a3e8 <UART_SetConfig+0xb28>
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3c0:	d212      	bcs.n	800a3e8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	f023 030f 	bic.w	r3, r3, #15
 800a3ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	085b      	lsrs	r3, r3, #1
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	f003 0307 	and.w	r3, r3, #7
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a3e4:	60da      	str	r2, [r3, #12]
 800a3e6:	e0bc      	b.n	800a562 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a3ee:	e0b8      	b.n	800a562 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a3f4:	2b20      	cmp	r3, #32
 800a3f6:	dc4b      	bgt.n	800a490 <UART_SetConfig+0xbd0>
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f2c0 8087 	blt.w	800a50c <UART_SetConfig+0xc4c>
 800a3fe:	2b20      	cmp	r3, #32
 800a400:	f200 8084 	bhi.w	800a50c <UART_SetConfig+0xc4c>
 800a404:	a201      	add	r2, pc, #4	; (adr r2, 800a40c <UART_SetConfig+0xb4c>)
 800a406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40a:	bf00      	nop
 800a40c:	0800a497 	.word	0x0800a497
 800a410:	0800a49f 	.word	0x0800a49f
 800a414:	0800a50d 	.word	0x0800a50d
 800a418:	0800a50d 	.word	0x0800a50d
 800a41c:	0800a4a7 	.word	0x0800a4a7
 800a420:	0800a50d 	.word	0x0800a50d
 800a424:	0800a50d 	.word	0x0800a50d
 800a428:	0800a50d 	.word	0x0800a50d
 800a42c:	0800a4b7 	.word	0x0800a4b7
 800a430:	0800a50d 	.word	0x0800a50d
 800a434:	0800a50d 	.word	0x0800a50d
 800a438:	0800a50d 	.word	0x0800a50d
 800a43c:	0800a50d 	.word	0x0800a50d
 800a440:	0800a50d 	.word	0x0800a50d
 800a444:	0800a50d 	.word	0x0800a50d
 800a448:	0800a50d 	.word	0x0800a50d
 800a44c:	0800a4c7 	.word	0x0800a4c7
 800a450:	0800a50d 	.word	0x0800a50d
 800a454:	0800a50d 	.word	0x0800a50d
 800a458:	0800a50d 	.word	0x0800a50d
 800a45c:	0800a50d 	.word	0x0800a50d
 800a460:	0800a50d 	.word	0x0800a50d
 800a464:	0800a50d 	.word	0x0800a50d
 800a468:	0800a50d 	.word	0x0800a50d
 800a46c:	0800a50d 	.word	0x0800a50d
 800a470:	0800a50d 	.word	0x0800a50d
 800a474:	0800a50d 	.word	0x0800a50d
 800a478:	0800a50d 	.word	0x0800a50d
 800a47c:	0800a50d 	.word	0x0800a50d
 800a480:	0800a50d 	.word	0x0800a50d
 800a484:	0800a50d 	.word	0x0800a50d
 800a488:	0800a50d 	.word	0x0800a50d
 800a48c:	0800a4ff 	.word	0x0800a4ff
 800a490:	2b40      	cmp	r3, #64	; 0x40
 800a492:	d037      	beq.n	800a504 <UART_SetConfig+0xc44>
 800a494:	e03a      	b.n	800a50c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a496:	f7fa fdeb 	bl	8005070 <HAL_RCC_GetPCLK1Freq>
 800a49a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a49c:	e03c      	b.n	800a518 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a49e:	f7fa fdfd 	bl	800509c <HAL_RCC_GetPCLK2Freq>
 800a4a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a4a4:	e038      	b.n	800a518 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fc f95c 	bl	8006768 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4b4:	e030      	b.n	800a518 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4b6:	f107 0318 	add.w	r3, r7, #24
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fc faa8 	bl	8006a10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4c4:	e028      	b.n	800a518 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4c6:	4b09      	ldr	r3, [pc, #36]	; (800a4ec <UART_SetConfig+0xc2c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 0320 	and.w	r3, r3, #32
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d012      	beq.n	800a4f8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4d2:	4b06      	ldr	r3, [pc, #24]	; (800a4ec <UART_SetConfig+0xc2c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	08db      	lsrs	r3, r3, #3
 800a4d8:	f003 0303 	and.w	r3, r3, #3
 800a4dc:	4a04      	ldr	r2, [pc, #16]	; (800a4f0 <UART_SetConfig+0xc30>)
 800a4de:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4e4:	e018      	b.n	800a518 <UART_SetConfig+0xc58>
 800a4e6:	bf00      	nop
 800a4e8:	0800c9f8 	.word	0x0800c9f8
 800a4ec:	58024400 	.word	0x58024400
 800a4f0:	03d09000 	.word	0x03d09000
 800a4f4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a4f8:	4b24      	ldr	r3, [pc, #144]	; (800a58c <UART_SetConfig+0xccc>)
 800a4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4fc:	e00c      	b.n	800a518 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4fe:	4b24      	ldr	r3, [pc, #144]	; (800a590 <UART_SetConfig+0xcd0>)
 800a500:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a502:	e009      	b.n	800a518 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a50a:	e005      	b.n	800a518 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a50c:	2300      	movs	r3, #0
 800a50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a516:	bf00      	nop
    }

    if (pclk != 0U)
 800a518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d021      	beq.n	800a562 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a522:	4a1c      	ldr	r2, [pc, #112]	; (800a594 <UART_SetConfig+0xcd4>)
 800a524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a528:	461a      	mov	r2, r3
 800a52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a52c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	085b      	lsrs	r3, r3, #1
 800a536:	441a      	add	r2, r3
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a540:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a544:	2b0f      	cmp	r3, #15
 800a546:	d909      	bls.n	800a55c <UART_SetConfig+0xc9c>
 800a548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a54e:	d205      	bcs.n	800a55c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a552:	b29a      	uxth	r2, r3
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	60da      	str	r2, [r3, #12]
 800a55a:	e002      	b.n	800a562 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	2201      	movs	r2, #1
 800a566:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	2200      	movs	r2, #0
 800a576:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	2200      	movs	r2, #0
 800a57c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a57e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a582:	4618      	mov	r0, r3
 800a584:	3748      	adds	r7, #72	; 0x48
 800a586:	46bd      	mov	sp, r7
 800a588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a58c:	03d09000 	.word	0x03d09000
 800a590:	003d0900 	.word	0x003d0900
 800a594:	0800c9f8 	.word	0x0800c9f8

0800a598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00a      	beq.n	800a5c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c6:	f003 0302 	and.w	r3, r3, #2
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00a      	beq.n	800a5e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	430a      	orrs	r2, r1
 800a5e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e8:	f003 0304 	and.w	r3, r3, #4
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00a      	beq.n	800a606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60a:	f003 0308 	and.w	r3, r3, #8
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00a      	beq.n	800a628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	430a      	orrs	r2, r1
 800a626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62c:	f003 0310 	and.w	r3, r3, #16
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00a      	beq.n	800a64a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64e:	f003 0320 	and.w	r3, r3, #32
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00a      	beq.n	800a66c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	430a      	orrs	r2, r1
 800a66a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a674:	2b00      	cmp	r3, #0
 800a676:	d01a      	beq.n	800a6ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	430a      	orrs	r2, r1
 800a68c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a696:	d10a      	bne.n	800a6ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00a      	beq.n	800a6d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	430a      	orrs	r2, r1
 800a6ce:	605a      	str	r2, [r3, #4]
  }
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af02      	add	r7, sp, #8
 800a6e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6ec:	f7f7 fc98 	bl	8002020 <HAL_GetTick>
 800a6f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 0308 	and.w	r3, r3, #8
 800a6fc:	2b08      	cmp	r3, #8
 800a6fe:	d10e      	bne.n	800a71e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f82f 	bl	800a772 <UART_WaitOnFlagUntilTimeout>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a71a:	2303      	movs	r3, #3
 800a71c:	e025      	b.n	800a76a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0304 	and.w	r3, r3, #4
 800a728:	2b04      	cmp	r3, #4
 800a72a:	d10e      	bne.n	800a74a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a72c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f819 	bl	800a772 <UART_WaitOnFlagUntilTimeout>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d001      	beq.n	800a74a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a746:	2303      	movs	r3, #3
 800a748:	e00f      	b.n	800a76a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2220      	movs	r2, #32
 800a74e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2220      	movs	r2, #32
 800a756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b09c      	sub	sp, #112	; 0x70
 800a776:	af00      	add	r7, sp, #0
 800a778:	60f8      	str	r0, [r7, #12]
 800a77a:	60b9      	str	r1, [r7, #8]
 800a77c:	603b      	str	r3, [r7, #0]
 800a77e:	4613      	mov	r3, r2
 800a780:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a782:	e0a9      	b.n	800a8d8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a78a:	f000 80a5 	beq.w	800a8d8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a78e:	f7f7 fc47 	bl	8002020 <HAL_GetTick>
 800a792:	4602      	mov	r2, r0
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	1ad3      	subs	r3, r2, r3
 800a798:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d302      	bcc.n	800a7a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800a79e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d140      	bne.n	800a826 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7ac:	e853 3f00 	ldrex	r3, [r3]
 800a7b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a7b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a7b8:	667b      	str	r3, [r7, #100]	; 0x64
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a7c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a7ca:	e841 2300 	strex	r3, r2, [r1]
 800a7ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a7d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1e6      	bne.n	800a7a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3308      	adds	r3, #8
 800a7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e0:	e853 3f00 	ldrex	r3, [r3]
 800a7e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e8:	f023 0301 	bic.w	r3, r3, #1
 800a7ec:	663b      	str	r3, [r7, #96]	; 0x60
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3308      	adds	r3, #8
 800a7f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a7f6:	64ba      	str	r2, [r7, #72]	; 0x48
 800a7f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a7fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7fe:	e841 2300 	strex	r3, r2, [r1]
 800a802:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1e5      	bne.n	800a7d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2220      	movs	r2, #32
 800a80e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2220      	movs	r2, #32
 800a816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a822:	2303      	movs	r3, #3
 800a824:	e069      	b.n	800a8fa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 0304 	and.w	r3, r3, #4
 800a830:	2b00      	cmp	r3, #0
 800a832:	d051      	beq.n	800a8d8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	69db      	ldr	r3, [r3, #28]
 800a83a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a83e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a842:	d149      	bne.n	800a8d8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a84c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	e853 3f00 	ldrex	r3, [r3]
 800a85a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a862:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	461a      	mov	r2, r3
 800a86a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a86c:	637b      	str	r3, [r7, #52]	; 0x34
 800a86e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a870:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a874:	e841 2300 	strex	r3, r2, [r1]
 800a878:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1e6      	bne.n	800a84e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	3308      	adds	r3, #8
 800a886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	e853 3f00 	ldrex	r3, [r3]
 800a88e:	613b      	str	r3, [r7, #16]
   return(result);
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	f023 0301 	bic.w	r3, r3, #1
 800a896:	66bb      	str	r3, [r7, #104]	; 0x68
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	3308      	adds	r3, #8
 800a89e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a8a0:	623a      	str	r2, [r7, #32]
 800a8a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a4:	69f9      	ldr	r1, [r7, #28]
 800a8a6:	6a3a      	ldr	r2, [r7, #32]
 800a8a8:	e841 2300 	strex	r3, r2, [r1]
 800a8ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1e5      	bne.n	800a880 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2220      	movs	r2, #32
 800a8b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2220      	movs	r2, #32
 800a8c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2220      	movs	r2, #32
 800a8c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	e010      	b.n	800a8fa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	69da      	ldr	r2, [r3, #28]
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	bf0c      	ite	eq
 800a8e8:	2301      	moveq	r3, #1
 800a8ea:	2300      	movne	r3, #0
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	79fb      	ldrb	r3, [r7, #7]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	f43f af46 	beq.w	800a784 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3770      	adds	r7, #112	; 0x70
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a902:	b480      	push	{r7}
 800a904:	b085      	sub	sp, #20
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a910:	2b01      	cmp	r3, #1
 800a912:	d101      	bne.n	800a918 <HAL_UARTEx_DisableFifoMode+0x16>
 800a914:	2302      	movs	r3, #2
 800a916:	e027      	b.n	800a968 <HAL_UARTEx_DisableFifoMode+0x66>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2224      	movs	r2, #36	; 0x24
 800a924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f022 0201 	bic.w	r2, r2, #1
 800a93e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a946:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2220      	movs	r2, #32
 800a95a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3714      	adds	r7, #20
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a984:	2b01      	cmp	r3, #1
 800a986:	d101      	bne.n	800a98c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a988:	2302      	movs	r3, #2
 800a98a:	e02d      	b.n	800a9e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2224      	movs	r2, #36	; 0x24
 800a998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f022 0201 	bic.w	r2, r2, #1
 800a9b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	430a      	orrs	r2, r1
 800a9c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f84f 	bl	800aa6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2220      	movs	r2, #32
 800a9da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d101      	bne.n	800aa08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa04:	2302      	movs	r3, #2
 800aa06:	e02d      	b.n	800aa64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2224      	movs	r2, #36	; 0x24
 800aa14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f022 0201 	bic.w	r2, r2, #1
 800aa2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	430a      	orrs	r2, r1
 800aa42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f811 	bl	800aa6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2220      	movs	r2, #32
 800aa56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d108      	bne.n	800aa8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa8c:	e031      	b.n	800aaf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa8e:	2310      	movs	r3, #16
 800aa90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa92:	2310      	movs	r3, #16
 800aa94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	0e5b      	lsrs	r3, r3, #25
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	f003 0307 	and.w	r3, r3, #7
 800aaa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	0f5b      	lsrs	r3, r3, #29
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	f003 0307 	and.w	r3, r3, #7
 800aab4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aab6:	7bbb      	ldrb	r3, [r7, #14]
 800aab8:	7b3a      	ldrb	r2, [r7, #12]
 800aaba:	4911      	ldr	r1, [pc, #68]	; (800ab00 <UARTEx_SetNbDataToProcess+0x94>)
 800aabc:	5c8a      	ldrb	r2, [r1, r2]
 800aabe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aac2:	7b3a      	ldrb	r2, [r7, #12]
 800aac4:	490f      	ldr	r1, [pc, #60]	; (800ab04 <UARTEx_SetNbDataToProcess+0x98>)
 800aac6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aac8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aacc:	b29a      	uxth	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	7b7a      	ldrb	r2, [r7, #13]
 800aad8:	4909      	ldr	r1, [pc, #36]	; (800ab00 <UARTEx_SetNbDataToProcess+0x94>)
 800aada:	5c8a      	ldrb	r2, [r1, r2]
 800aadc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aae0:	7b7a      	ldrb	r2, [r7, #13]
 800aae2:	4908      	ldr	r1, [pc, #32]	; (800ab04 <UARTEx_SetNbDataToProcess+0x98>)
 800aae4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aae6:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aaf2:	bf00      	nop
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	0800ca10 	.word	0x0800ca10
 800ab04:	0800ca18 	.word	0x0800ca18

0800ab08 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ab08:	b084      	sub	sp, #16
 800ab0a:	b480      	push	{r7}
 800ab0c:	b085      	sub	sp, #20
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
 800ab12:	f107 001c 	add.w	r0, r7, #28
 800ab16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800ab1e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800ab20:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800ab22:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800ab26:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800ab2a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800ab2e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685a      	ldr	r2, [r3, #4]
 800ab3a:	4b07      	ldr	r3, [pc, #28]	; (800ab58 <SDMMC_Init+0x50>)
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	431a      	orrs	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	b004      	add	sp, #16
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	ffc02c00 	.word	0xffc02c00

0800ab5c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ab76:	b480      	push	{r7}
 800ab78:	b083      	sub	sp, #12
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f043 0203 	orr.w	r2, r3, #3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800abba:	b480      	push	{r7}
 800abbc:	b083      	sub	sp, #12
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 0303 	and.w	r3, r3, #3
}
 800abca:	4618      	mov	r0, r3
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
	...

0800abd8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abe2:	2300      	movs	r3, #0
 800abe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800abf6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800abfc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ac02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	68da      	ldr	r2, [r3, #12]
 800ac0e:	4b06      	ldr	r3, [pc, #24]	; (800ac28 <SDMMC_SendCommand+0x50>)
 800ac10:	4013      	ands	r3, r2
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	431a      	orrs	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr
 800ac28:	fffee0c0 	.word	0xfffee0c0

0800ac2c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	b2db      	uxtb	r3, r3
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b085      	sub	sp, #20
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	3314      	adds	r3, #20
 800ac54:	461a      	mov	r2, r3
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	4413      	add	r3, r2
 800ac5a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac76:	2300      	movs	r3, #0
 800ac78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	685a      	ldr	r2, [r3, #4]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ac92:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ac98:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ac9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acaa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	431a      	orrs	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800acb6:	2300      	movs	r3, #0

}
 800acb8:	4618      	mov	r0, r3
 800acba:	3714      	adds	r7, #20
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800acd2:	2310      	movs	r3, #16
 800acd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acdc:	2300      	movs	r3, #0
 800acde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ace0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ace4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ace6:	f107 0308 	add.w	r3, r7, #8
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff ff73 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800acf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800acf6:	2110      	movs	r1, #16
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 fa5f 	bl	800b1bc <SDMMC_GetCmdResp1>
 800acfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad00:	69fb      	ldr	r3, [r7, #28]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3720      	adds	r7, #32
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b088      	sub	sp, #32
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ad18:	2311      	movs	r3, #17
 800ad1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad22:	2300      	movs	r3, #0
 800ad24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad2c:	f107 0308 	add.w	r3, r7, #8
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7ff ff50 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad3c:	2111      	movs	r1, #17
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fa3c 	bl	800b1bc <SDMMC_GetCmdResp1>
 800ad44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad46:	69fb      	ldr	r3, [r7, #28]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3720      	adds	r7, #32
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b088      	sub	sp, #32
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ad5e:	2312      	movs	r3, #18
 800ad60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad72:	f107 0308 	add.w	r3, r7, #8
 800ad76:	4619      	mov	r1, r3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7ff ff2d 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad82:	2112      	movs	r1, #18
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fa19 	bl	800b1bc <SDMMC_GetCmdResp1>
 800ad8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad8c:	69fb      	ldr	r3, [r7, #28]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3720      	adds	r7, #32
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b088      	sub	sp, #32
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ada4:	2318      	movs	r3, #24
 800ada6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ada8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adae:	2300      	movs	r3, #0
 800adb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adb8:	f107 0308 	add.w	r3, r7, #8
 800adbc:	4619      	mov	r1, r3
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f7ff ff0a 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800adc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc8:	2118      	movs	r1, #24
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f9f6 	bl	800b1bc <SDMMC_GetCmdResp1>
 800add0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800add2:	69fb      	ldr	r3, [r7, #28]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3720      	adds	r7, #32
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b088      	sub	sp, #32
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800adea:	2319      	movs	r3, #25
 800adec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adf4:	2300      	movs	r3, #0
 800adf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adfe:	f107 0308 	add.w	r3, r7, #8
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f7ff fee7 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ae0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae0e:	2119      	movs	r1, #25
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 f9d3 	bl	800b1bc <SDMMC_GetCmdResp1>
 800ae16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae18:	69fb      	ldr	r3, [r7, #28]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3720      	adds	r7, #32
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b088      	sub	sp, #32
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ae30:	230c      	movs	r3, #12
 800ae32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae42:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae5c:	f107 0308 	add.w	r3, r7, #8
 800ae60:	4619      	mov	r1, r3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7ff feb8 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ae68:	4a0b      	ldr	r2, [pc, #44]	; (800ae98 <SDMMC_CmdStopTransfer+0x74>)
 800ae6a:	210c      	movs	r1, #12
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f9a5 	bl	800b1bc <SDMMC_GetCmdResp1>
 800ae72:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae86:	d101      	bne.n	800ae8c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ae8c:	69fb      	ldr	r3, [r7, #28]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3720      	adds	r7, #32
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	05f5e100 	.word	0x05f5e100

0800ae9c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aeaa:	2307      	movs	r3, #7
 800aeac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aebc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aebe:	f107 0308 	add.w	r3, r7, #8
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff fe87 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800aeca:	f241 3288 	movw	r2, #5000	; 0x1388
 800aece:	2107      	movs	r1, #7
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 f973 	bl	800b1bc <SDMMC_GetCmdResp1>
 800aed6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aed8:	69fb      	ldr	r3, [r7, #28]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3720      	adds	r7, #32
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b088      	sub	sp, #32
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800aeea:	2300      	movs	r3, #0
 800aeec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800aef2:	2300      	movs	r3, #0
 800aef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aef6:	2300      	movs	r3, #0
 800aef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aefa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aefe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af00:	f107 0308 	add.w	r3, r7, #8
 800af04:	4619      	mov	r1, r3
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f7ff fe66 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fb97 	bl	800b640 <SDMMC_GetCmdError>
 800af12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af14:	69fb      	ldr	r3, [r7, #28]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3720      	adds	r7, #32
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b088      	sub	sp, #32
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800af26:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800af2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800af2c:	2308      	movs	r3, #8
 800af2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af36:	2300      	movs	r3, #0
 800af38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af40:	f107 0308 	add.w	r3, r7, #8
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7ff fe46 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fb29 	bl	800b5a4 <SDMMC_GetCmdResp7>
 800af52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af54:	69fb      	ldr	r3, [r7, #28]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3720      	adds	r7, #32
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b088      	sub	sp, #32
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800af6c:	2337      	movs	r3, #55	; 0x37
 800af6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af76:	2300      	movs	r3, #0
 800af78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af80:	f107 0308 	add.w	r3, r7, #8
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7ff fe26 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800af8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af90:	2137      	movs	r1, #55	; 0x37
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 f912 	bl	800b1bc <SDMMC_GetCmdResp1>
 800af98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af9a:	69fb      	ldr	r3, [r7, #28]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3720      	adds	r7, #32
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b088      	sub	sp, #32
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800afb2:	2329      	movs	r3, #41	; 0x29
 800afb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afbc:	2300      	movs	r3, #0
 800afbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afc6:	f107 0308 	add.w	r3, r7, #8
 800afca:	4619      	mov	r1, r3
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7ff fe03 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fa2e 	bl	800b434 <SDMMC_GetCmdResp3>
 800afd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afda:	69fb      	ldr	r3, [r7, #28]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3720      	adds	r7, #32
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b088      	sub	sp, #32
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800aff2:	2306      	movs	r3, #6
 800aff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800affa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800affc:	2300      	movs	r3, #0
 800affe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b004:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b006:	f107 0308 	add.w	r3, r7, #8
 800b00a:	4619      	mov	r1, r3
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7ff fde3 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b012:	f241 3288 	movw	r2, #5000	; 0x1388
 800b016:	2106      	movs	r1, #6
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 f8cf 	bl	800b1bc <SDMMC_GetCmdResp1>
 800b01e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b020:	69fb      	ldr	r3, [r7, #28]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3720      	adds	r7, #32
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b088      	sub	sp, #32
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b032:	2300      	movs	r3, #0
 800b034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b036:	2333      	movs	r3, #51	; 0x33
 800b038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b03a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b03e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b040:	2300      	movs	r3, #0
 800b042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b04a:	f107 0308 	add.w	r3, r7, #8
 800b04e:	4619      	mov	r1, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7ff fdc1 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b056:	f241 3288 	movw	r2, #5000	; 0x1388
 800b05a:	2133      	movs	r1, #51	; 0x33
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f8ad 	bl	800b1bc <SDMMC_GetCmdResp1>
 800b062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b064:	69fb      	ldr	r3, [r7, #28]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3720      	adds	r7, #32
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b088      	sub	sp, #32
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b076:	2300      	movs	r3, #0
 800b078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b07a:	2302      	movs	r3, #2
 800b07c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b07e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b084:	2300      	movs	r3, #0
 800b086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b08c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b08e:	f107 0308 	add.w	r3, r7, #8
 800b092:	4619      	mov	r1, r3
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f7ff fd9f 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f980 	bl	800b3a0 <SDMMC_GetCmdResp2>
 800b0a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0a2:	69fb      	ldr	r3, [r7, #28]
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3720      	adds	r7, #32
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b088      	sub	sp, #32
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b0ba:	2309      	movs	r3, #9
 800b0bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b0be:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b0c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0ce:	f107 0308 	add.w	r3, r7, #8
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f7ff fd7f 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f960 	bl	800b3a0 <SDMMC_GetCmdResp2>
 800b0e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0e2:	69fb      	ldr	r3, [r7, #28]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3720      	adds	r7, #32
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b088      	sub	sp, #32
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b104:	2300      	movs	r3, #0
 800b106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b10c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b10e:	f107 0308 	add.w	r3, r7, #8
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f7ff fd5f 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	2103      	movs	r1, #3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f9c8 	bl	800b4b4 <SDMMC_GetCmdResp6>
 800b124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b126:	69fb      	ldr	r3, [r7, #28]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3720      	adds	r7, #32
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b088      	sub	sp, #32
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b13e:	230d      	movs	r3, #13
 800b140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b142:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b148:	2300      	movs	r3, #0
 800b14a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b14c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b150:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b152:	f107 0308 	add.w	r3, r7, #8
 800b156:	4619      	mov	r1, r3
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7ff fd3d 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b15e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b162:	210d      	movs	r1, #13
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f829 	bl	800b1bc <SDMMC_GetCmdResp1>
 800b16a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b16c:	69fb      	ldr	r3, [r7, #28]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3720      	adds	r7, #32
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b088      	sub	sp, #32
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b17e:	2300      	movs	r3, #0
 800b180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b182:	230d      	movs	r3, #13
 800b184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b18a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b18c:	2300      	movs	r3, #0
 800b18e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b194:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b196:	f107 0308 	add.w	r3, r7, #8
 800b19a:	4619      	mov	r1, r3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7ff fd1b 	bl	800abd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b1a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1a6:	210d      	movs	r1, #13
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f807 	bl	800b1bc <SDMMC_GetCmdResp1>
 800b1ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1b0:	69fb      	ldr	r3, [r7, #28]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3720      	adds	r7, #32
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
	...

0800b1bc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b088      	sub	sp, #32
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	607a      	str	r2, [r7, #4]
 800b1c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b1ca:	4b70      	ldr	r3, [pc, #448]	; (800b38c <SDMMC_GetCmdResp1+0x1d0>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a70      	ldr	r2, [pc, #448]	; (800b390 <SDMMC_GetCmdResp1+0x1d4>)
 800b1d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1d4:	0a5a      	lsrs	r2, r3, #9
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	fb02 f303 	mul.w	r3, r2, r3
 800b1dc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	1e5a      	subs	r2, r3, #1
 800b1e2:	61fa      	str	r2, [r7, #28]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d102      	bne.n	800b1ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1ec:	e0c9      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b1f4:	69ba      	ldr	r2, [r7, #24]
 800b1f6:	4b67      	ldr	r3, [pc, #412]	; (800b394 <SDMMC_GetCmdResp1+0x1d8>)
 800b1f8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d0ef      	beq.n	800b1de <SDMMC_GetCmdResp1+0x22>
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1ea      	bne.n	800b1de <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b20c:	f003 0304 	and.w	r3, r3, #4
 800b210:	2b00      	cmp	r3, #0
 800b212:	d004      	beq.n	800b21e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2204      	movs	r2, #4
 800b218:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b21a:	2304      	movs	r3, #4
 800b21c:	e0b1      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	2b00      	cmp	r3, #0
 800b228:	d004      	beq.n	800b234 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2201      	movs	r2, #1
 800b22e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b230:	2301      	movs	r3, #1
 800b232:	e0a6      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	4a58      	ldr	r2, [pc, #352]	; (800b398 <SDMMC_GetCmdResp1+0x1dc>)
 800b238:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f7ff fcf6 	bl	800ac2c <SDMMC_GetCommandResponse>
 800b240:	4603      	mov	r3, r0
 800b242:	461a      	mov	r2, r3
 800b244:	7afb      	ldrb	r3, [r7, #11]
 800b246:	4293      	cmp	r3, r2
 800b248:	d001      	beq.n	800b24e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e099      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b24e:	2100      	movs	r1, #0
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7ff fcf8 	bl	800ac46 <SDMMC_GetResponse>
 800b256:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b258:	697a      	ldr	r2, [r7, #20]
 800b25a:	4b50      	ldr	r3, [pc, #320]	; (800b39c <SDMMC_GetCmdResp1+0x1e0>)
 800b25c:	4013      	ands	r3, r2
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d101      	bne.n	800b266 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b262:	2300      	movs	r3, #0
 800b264:	e08d      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	da02      	bge.n	800b272 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b26c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b270:	e087      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d001      	beq.n	800b280 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b27c:	2340      	movs	r3, #64	; 0x40
 800b27e:	e080      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b286:	2b00      	cmp	r3, #0
 800b288:	d001      	beq.n	800b28e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b28a:	2380      	movs	r3, #128	; 0x80
 800b28c:	e079      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b29c:	e071      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b2a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2ac:	e069      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b2b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2bc:	e061      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b2c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2cc:	e059      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2dc:	e051      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2ec:	e049      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b2f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2fc:	e041      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b304:	2b00      	cmp	r3, #0
 800b306:	d002      	beq.n	800b30e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b30c:	e039      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b31c:	e031      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d002      	beq.n	800b32e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b328:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b32c:	e029      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b334:	2b00      	cmp	r3, #0
 800b336:	d002      	beq.n	800b33e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b338:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b33c:	e021      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b348:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b34c:	e019      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b358:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b35c:	e011      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b368:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b36c:	e009      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	f003 0308 	and.w	r3, r3, #8
 800b374:	2b00      	cmp	r3, #0
 800b376:	d002      	beq.n	800b37e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b378:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b37c:	e001      	b.n	800b382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b37e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b382:	4618      	mov	r0, r3
 800b384:	3720      	adds	r7, #32
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	24000000 	.word	0x24000000
 800b390:	10624dd3 	.word	0x10624dd3
 800b394:	00200045 	.word	0x00200045
 800b398:	002000c5 	.word	0x002000c5
 800b39c:	fdffe008 	.word	0xfdffe008

0800b3a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b3a8:	4b1f      	ldr	r3, [pc, #124]	; (800b428 <SDMMC_GetCmdResp2+0x88>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a1f      	ldr	r2, [pc, #124]	; (800b42c <SDMMC_GetCmdResp2+0x8c>)
 800b3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b2:	0a5b      	lsrs	r3, r3, #9
 800b3b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3b8:	fb02 f303 	mul.w	r3, r2, r3
 800b3bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	1e5a      	subs	r2, r3, #1
 800b3c2:	60fa      	str	r2, [r7, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d102      	bne.n	800b3ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3cc:	e026      	b.n	800b41c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d0ef      	beq.n	800b3be <SDMMC_GetCmdResp2+0x1e>
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1ea      	bne.n	800b3be <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ec:	f003 0304 	and.w	r3, r3, #4
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d004      	beq.n	800b3fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2204      	movs	r2, #4
 800b3f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3fa:	2304      	movs	r3, #4
 800b3fc:	e00e      	b.n	800b41c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b402:	f003 0301 	and.w	r3, r3, #1
 800b406:	2b00      	cmp	r3, #0
 800b408:	d004      	beq.n	800b414 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b410:	2301      	movs	r3, #1
 800b412:	e003      	b.n	800b41c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a06      	ldr	r2, [pc, #24]	; (800b430 <SDMMC_GetCmdResp2+0x90>)
 800b418:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr
 800b428:	24000000 	.word	0x24000000
 800b42c:	10624dd3 	.word	0x10624dd3
 800b430:	002000c5 	.word	0x002000c5

0800b434 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b43c:	4b1a      	ldr	r3, [pc, #104]	; (800b4a8 <SDMMC_GetCmdResp3+0x74>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a1a      	ldr	r2, [pc, #104]	; (800b4ac <SDMMC_GetCmdResp3+0x78>)
 800b442:	fba2 2303 	umull	r2, r3, r2, r3
 800b446:	0a5b      	lsrs	r3, r3, #9
 800b448:	f241 3288 	movw	r2, #5000	; 0x1388
 800b44c:	fb02 f303 	mul.w	r3, r2, r3
 800b450:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	1e5a      	subs	r2, r3, #1
 800b456:	60fa      	str	r2, [r7, #12]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d102      	bne.n	800b462 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b45c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b460:	e01b      	b.n	800b49a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b466:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d0ef      	beq.n	800b452 <SDMMC_GetCmdResp3+0x1e>
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1ea      	bne.n	800b452 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b480:	f003 0304 	and.w	r3, r3, #4
 800b484:	2b00      	cmp	r3, #0
 800b486:	d004      	beq.n	800b492 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2204      	movs	r2, #4
 800b48c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b48e:	2304      	movs	r3, #4
 800b490:	e003      	b.n	800b49a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a06      	ldr	r2, [pc, #24]	; (800b4b0 <SDMMC_GetCmdResp3+0x7c>)
 800b496:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	24000000 	.word	0x24000000
 800b4ac:	10624dd3 	.word	0x10624dd3
 800b4b0:	002000c5 	.word	0x002000c5

0800b4b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	607a      	str	r2, [r7, #4]
 800b4c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b4c2:	4b35      	ldr	r3, [pc, #212]	; (800b598 <SDMMC_GetCmdResp6+0xe4>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a35      	ldr	r2, [pc, #212]	; (800b59c <SDMMC_GetCmdResp6+0xe8>)
 800b4c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4cc:	0a5b      	lsrs	r3, r3, #9
 800b4ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4d2:	fb02 f303 	mul.w	r3, r2, r3
 800b4d6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	1e5a      	subs	r2, r3, #1
 800b4dc:	61fa      	str	r2, [r7, #28]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d102      	bne.n	800b4e8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4e6:	e052      	b.n	800b58e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ec:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d0ef      	beq.n	800b4d8 <SDMMC_GetCmdResp6+0x24>
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d1ea      	bne.n	800b4d8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b506:	f003 0304 	and.w	r3, r3, #4
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d004      	beq.n	800b518 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2204      	movs	r2, #4
 800b512:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b514:	2304      	movs	r3, #4
 800b516:	e03a      	b.n	800b58e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b51c:	f003 0301 	and.w	r3, r3, #1
 800b520:	2b00      	cmp	r3, #0
 800b522:	d004      	beq.n	800b52e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2201      	movs	r2, #1
 800b528:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e02f      	b.n	800b58e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f7ff fb7c 	bl	800ac2c <SDMMC_GetCommandResponse>
 800b534:	4603      	mov	r3, r0
 800b536:	461a      	mov	r2, r3
 800b538:	7afb      	ldrb	r3, [r7, #11]
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d001      	beq.n	800b542 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b53e:	2301      	movs	r3, #1
 800b540:	e025      	b.n	800b58e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	4a16      	ldr	r2, [pc, #88]	; (800b5a0 <SDMMC_GetCmdResp6+0xec>)
 800b546:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b548:	2100      	movs	r1, #0
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f7ff fb7b 	bl	800ac46 <SDMMC_GetResponse>
 800b550:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d106      	bne.n	800b56a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	0c1b      	lsrs	r3, r3, #16
 800b560:	b29a      	uxth	r2, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b566:	2300      	movs	r3, #0
 800b568:	e011      	b.n	800b58e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b578:	e009      	b.n	800b58e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b580:	2b00      	cmp	r3, #0
 800b582:	d002      	beq.n	800b58a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b588:	e001      	b.n	800b58e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b58a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3720      	adds	r7, #32
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	24000000 	.word	0x24000000
 800b59c:	10624dd3 	.word	0x10624dd3
 800b5a0:	002000c5 	.word	0x002000c5

0800b5a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b5ac:	4b22      	ldr	r3, [pc, #136]	; (800b638 <SDMMC_GetCmdResp7+0x94>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a22      	ldr	r2, [pc, #136]	; (800b63c <SDMMC_GetCmdResp7+0x98>)
 800b5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b6:	0a5b      	lsrs	r3, r3, #9
 800b5b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5bc:	fb02 f303 	mul.w	r3, r2, r3
 800b5c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	1e5a      	subs	r2, r3, #1
 800b5c6:	60fa      	str	r2, [r7, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d102      	bne.n	800b5d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5d0:	e02c      	b.n	800b62c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d0ef      	beq.n	800b5c2 <SDMMC_GetCmdResp7+0x1e>
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1ea      	bne.n	800b5c2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f0:	f003 0304 	and.w	r3, r3, #4
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d004      	beq.n	800b602 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2204      	movs	r2, #4
 800b5fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5fe:	2304      	movs	r3, #4
 800b600:	e014      	b.n	800b62c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b606:	f003 0301 	and.w	r3, r3, #1
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d004      	beq.n	800b618 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2201      	movs	r2, #1
 800b612:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b614:	2301      	movs	r3, #1
 800b616:	e009      	b.n	800b62c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2240      	movs	r2, #64	; 0x40
 800b628:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b62a:	2300      	movs	r3, #0

}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	24000000 	.word	0x24000000
 800b63c:	10624dd3 	.word	0x10624dd3

0800b640 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b648:	4b11      	ldr	r3, [pc, #68]	; (800b690 <SDMMC_GetCmdError+0x50>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a11      	ldr	r2, [pc, #68]	; (800b694 <SDMMC_GetCmdError+0x54>)
 800b64e:	fba2 2303 	umull	r2, r3, r2, r3
 800b652:	0a5b      	lsrs	r3, r3, #9
 800b654:	f241 3288 	movw	r2, #5000	; 0x1388
 800b658:	fb02 f303 	mul.w	r3, r2, r3
 800b65c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	1e5a      	subs	r2, r3, #1
 800b662:	60fa      	str	r2, [r7, #12]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d102      	bne.n	800b66e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b668:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b66c:	e009      	b.n	800b682 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b676:	2b00      	cmp	r3, #0
 800b678:	d0f1      	beq.n	800b65e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4a06      	ldr	r2, [pc, #24]	; (800b698 <SDMMC_GetCmdError+0x58>)
 800b67e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	24000000 	.word	0x24000000
 800b694:	10624dd3 	.word	0x10624dd3
 800b698:	002000c5 	.word	0x002000c5

0800b69c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b6a0:	4904      	ldr	r1, [pc, #16]	; (800b6b4 <MX_FATFS_Init+0x18>)
 800b6a2:	4805      	ldr	r0, [pc, #20]	; (800b6b8 <MX_FATFS_Init+0x1c>)
 800b6a4:	f000 fa80 	bl	800bba8 <FATFS_LinkDriver>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	4b03      	ldr	r3, [pc, #12]	; (800b6bc <MX_FATFS_Init+0x20>)
 800b6ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b6b0:	bf00      	nop
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	2400039c 	.word	0x2400039c
 800b6b8:	0800ca20 	.word	0x0800ca20
 800b6bc:	24000398 	.word	0x24000398

0800b6c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b6ca:	f000 f877 	bl	800b7bc <BSP_SD_IsDetected>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d001      	beq.n	800b6d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	e005      	b.n	800b6e4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b6d8:	4804      	ldr	r0, [pc, #16]	; (800b6ec <BSP_SD_Init+0x2c>)
 800b6da:	f7fb fda3 	bl	8007224 <HAL_SD_Init>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b6e2:	79fb      	ldrb	r3, [r7, #7]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	24000090 	.word	0x24000090

0800b6f0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	68f9      	ldr	r1, [r7, #12]
 800b706:	4806      	ldr	r0, [pc, #24]	; (800b720 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b708:	f7fb fea6 	bl	8007458 <HAL_SD_ReadBlocks_DMA>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d001      	beq.n	800b716 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b716:	7dfb      	ldrb	r3, [r7, #23]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	24000090 	.word	0x24000090

0800b724 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	68f9      	ldr	r1, [r7, #12]
 800b73a:	4806      	ldr	r0, [pc, #24]	; (800b754 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b73c:	f7fb ff34 	bl	80075a8 <HAL_SD_WriteBlocks_DMA>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3718      	adds	r7, #24
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	24000090 	.word	0x24000090

0800b758 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b75c:	4805      	ldr	r0, [pc, #20]	; (800b774 <BSP_SD_GetCardState+0x1c>)
 800b75e:	f7fc fd2d 	bl	80081bc <HAL_SD_GetCardState>
 800b762:	4603      	mov	r3, r0
 800b764:	2b04      	cmp	r3, #4
 800b766:	bf14      	ite	ne
 800b768:	2301      	movne	r3, #1
 800b76a:	2300      	moveq	r3, #0
 800b76c:	b2db      	uxtb	r3, r3
}
 800b76e:	4618      	mov	r0, r3
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	24000090 	.word	0x24000090

0800b778 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b780:	6879      	ldr	r1, [r7, #4]
 800b782:	4803      	ldr	r0, [pc, #12]	; (800b790 <BSP_SD_GetCardInfo+0x18>)
 800b784:	f7fc fbdc 	bl	8007f40 <HAL_SD_GetCardInfo>
}
 800b788:	bf00      	nop
 800b78a:	3708      	adds	r7, #8
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	24000090 	.word	0x24000090

0800b794 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b79c:	f000 f9a0 	bl	800bae0 <BSP_SD_WriteCpltCallback>
}
 800b7a0:	bf00      	nop
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b7b0:	f000 f9a2 	bl	800baf8 <BSP_SD_ReadCpltCallback>
}
 800b7b4:	bf00      	nop
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b7c6:	f000 f80b 	bl	800b7e0 <BSP_PlatformIsDetected>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d101      	bne.n	800b7d4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b7d4:	79fb      	ldrb	r3, [r7, #7]
 800b7d6:	b2db      	uxtb	r3, r3
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3708      	adds	r7, #8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b7ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b7ee:	4806      	ldr	r0, [pc, #24]	; (800b808 <BSP_PlatformIsDetected+0x28>)
 800b7f0:	f7f8 fc34 	bl	800405c <HAL_GPIO_ReadPin>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d001      	beq.n	800b7fe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b7fe:	79fb      	ldrb	r3, [r7, #7]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	58020800 	.word	0x58020800

0800b80c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b814:	f7f6 fc04 	bl	8002020 <HAL_GetTick>
 800b818:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b81a:	e006      	b.n	800b82a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b81c:	f7ff ff9c 	bl	800b758 <BSP_SD_GetCardState>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d101      	bne.n	800b82a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b826:	2300      	movs	r3, #0
 800b828:	e009      	b.n	800b83e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b82a:	f7f6 fbf9 	bl	8002020 <HAL_GetTick>
 800b82e:	4602      	mov	r2, r0
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	1ad3      	subs	r3, r2, r3
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	429a      	cmp	r2, r3
 800b838:	d8f0      	bhi.n	800b81c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b83a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
	...

0800b848 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	4603      	mov	r3, r0
 800b850:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b852:	4b0b      	ldr	r3, [pc, #44]	; (800b880 <SD_CheckStatus+0x38>)
 800b854:	2201      	movs	r2, #1
 800b856:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b858:	f7ff ff7e 	bl	800b758 <BSP_SD_GetCardState>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d107      	bne.n	800b872 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b862:	4b07      	ldr	r3, [pc, #28]	; (800b880 <SD_CheckStatus+0x38>)
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	b2db      	uxtb	r3, r3
 800b868:	f023 0301 	bic.w	r3, r3, #1
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	4b04      	ldr	r3, [pc, #16]	; (800b880 <SD_CheckStatus+0x38>)
 800b870:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b872:	4b03      	ldr	r3, [pc, #12]	; (800b880 <SD_CheckStatus+0x38>)
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	b2db      	uxtb	r3, r3
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	2400000d 	.word	0x2400000d

0800b884 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	4603      	mov	r3, r0
 800b88c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b88e:	f7ff ff17 	bl	800b6c0 <BSP_SD_Init>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d107      	bne.n	800b8a8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b898:	79fb      	ldrb	r3, [r7, #7]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7ff ffd4 	bl	800b848 <SD_CheckStatus>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	4b04      	ldr	r3, [pc, #16]	; (800b8b8 <SD_initialize+0x34>)
 800b8a6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b8a8:	4b03      	ldr	r3, [pc, #12]	; (800b8b8 <SD_initialize+0x34>)
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	b2db      	uxtb	r3, r3
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	2400000d 	.word	0x2400000d

0800b8bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b8c6:	79fb      	ldrb	r3, [r7, #7]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7ff ffbd 	bl	800b848 <SD_CheckStatus>
 800b8ce:	4603      	mov	r3, r0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60b9      	str	r1, [r7, #8]
 800b8e0:	607a      	str	r2, [r7, #4]
 800b8e2:	603b      	str	r3, [r7, #0]
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b8ec:	f247 5030 	movw	r0, #30000	; 0x7530
 800b8f0:	f7ff ff8c 	bl	800b80c <SD_CheckStatusWithTimeout>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	da01      	bge.n	800b8fe <SD_read+0x26>
  {
    return res;
 800b8fa:	7dfb      	ldrb	r3, [r7, #23]
 800b8fc:	e03b      	b.n	800b976 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	68b8      	ldr	r0, [r7, #8]
 800b904:	f7ff fef4 	bl	800b6f0 <BSP_SD_ReadBlocks_DMA>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d132      	bne.n	800b974 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b90e:	4b1c      	ldr	r3, [pc, #112]	; (800b980 <SD_read+0xa8>)
 800b910:	2200      	movs	r2, #0
 800b912:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b914:	f7f6 fb84 	bl	8002020 <HAL_GetTick>
 800b918:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b91a:	bf00      	nop
 800b91c:	4b18      	ldr	r3, [pc, #96]	; (800b980 <SD_read+0xa8>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d108      	bne.n	800b936 <SD_read+0x5e>
 800b924:	f7f6 fb7c 	bl	8002020 <HAL_GetTick>
 800b928:	4602      	mov	r2, r0
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	f247 522f 	movw	r2, #29999	; 0x752f
 800b932:	4293      	cmp	r3, r2
 800b934:	d9f2      	bls.n	800b91c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b936:	4b12      	ldr	r3, [pc, #72]	; (800b980 <SD_read+0xa8>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d102      	bne.n	800b944 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	75fb      	strb	r3, [r7, #23]
 800b942:	e017      	b.n	800b974 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b944:	4b0e      	ldr	r3, [pc, #56]	; (800b980 <SD_read+0xa8>)
 800b946:	2200      	movs	r2, #0
 800b948:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b94a:	f7f6 fb69 	bl	8002020 <HAL_GetTick>
 800b94e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b950:	e007      	b.n	800b962 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b952:	f7ff ff01 	bl	800b758 <BSP_SD_GetCardState>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d102      	bne.n	800b962 <SD_read+0x8a>
          {
            res = RES_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b960:	e008      	b.n	800b974 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b962:	f7f6 fb5d 	bl	8002020 <HAL_GetTick>
 800b966:	4602      	mov	r2, r0
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	f247 522f 	movw	r2, #29999	; 0x752f
 800b970:	4293      	cmp	r3, r2
 800b972:	d9ee      	bls.n	800b952 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b974:	7dfb      	ldrb	r3, [r7, #23]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3718      	adds	r7, #24
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	240003a4 	.word	0x240003a4

0800b984 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60b9      	str	r1, [r7, #8]
 800b98c:	607a      	str	r2, [r7, #4]
 800b98e:	603b      	str	r3, [r7, #0]
 800b990:	4603      	mov	r3, r0
 800b992:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b998:	4b24      	ldr	r3, [pc, #144]	; (800ba2c <SD_write+0xa8>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b99e:	f247 5030 	movw	r0, #30000	; 0x7530
 800b9a2:	f7ff ff33 	bl	800b80c <SD_CheckStatusWithTimeout>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	da01      	bge.n	800b9b0 <SD_write+0x2c>
  {
    return res;
 800b9ac:	7dfb      	ldrb	r3, [r7, #23]
 800b9ae:	e038      	b.n	800ba22 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	6879      	ldr	r1, [r7, #4]
 800b9b4:	68b8      	ldr	r0, [r7, #8]
 800b9b6:	f7ff feb5 	bl	800b724 <BSP_SD_WriteBlocks_DMA>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d12f      	bne.n	800ba20 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b9c0:	f7f6 fb2e 	bl	8002020 <HAL_GetTick>
 800b9c4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b9c6:	bf00      	nop
 800b9c8:	4b18      	ldr	r3, [pc, #96]	; (800ba2c <SD_write+0xa8>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d108      	bne.n	800b9e2 <SD_write+0x5e>
 800b9d0:	f7f6 fb26 	bl	8002020 <HAL_GetTick>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	f247 522f 	movw	r2, #29999	; 0x752f
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d9f2      	bls.n	800b9c8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b9e2:	4b12      	ldr	r3, [pc, #72]	; (800ba2c <SD_write+0xa8>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d102      	bne.n	800b9f0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	75fb      	strb	r3, [r7, #23]
 800b9ee:	e017      	b.n	800ba20 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b9f0:	4b0e      	ldr	r3, [pc, #56]	; (800ba2c <SD_write+0xa8>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b9f6:	f7f6 fb13 	bl	8002020 <HAL_GetTick>
 800b9fa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b9fc:	e007      	b.n	800ba0e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b9fe:	f7ff feab 	bl	800b758 <BSP_SD_GetCardState>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d102      	bne.n	800ba0e <SD_write+0x8a>
          {
            res = RES_OK;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	75fb      	strb	r3, [r7, #23]
            break;
 800ba0c:	e008      	b.n	800ba20 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ba0e:	f7f6 fb07 	bl	8002020 <HAL_GetTick>
 800ba12:	4602      	mov	r2, r0
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	1ad3      	subs	r3, r2, r3
 800ba18:	f247 522f 	movw	r2, #29999	; 0x752f
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d9ee      	bls.n	800b9fe <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ba20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	240003a0 	.word	0x240003a0

0800ba30 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b08c      	sub	sp, #48	; 0x30
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4603      	mov	r3, r0
 800ba38:	603a      	str	r2, [r7, #0]
 800ba3a:	71fb      	strb	r3, [r7, #7]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ba46:	4b25      	ldr	r3, [pc, #148]	; (800badc <SD_ioctl+0xac>)
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	f003 0301 	and.w	r3, r3, #1
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <SD_ioctl+0x28>
 800ba54:	2303      	movs	r3, #3
 800ba56:	e03c      	b.n	800bad2 <SD_ioctl+0xa2>

  switch (cmd)
 800ba58:	79bb      	ldrb	r3, [r7, #6]
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d834      	bhi.n	800bac8 <SD_ioctl+0x98>
 800ba5e:	a201      	add	r2, pc, #4	; (adr r2, 800ba64 <SD_ioctl+0x34>)
 800ba60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba64:	0800ba75 	.word	0x0800ba75
 800ba68:	0800ba7d 	.word	0x0800ba7d
 800ba6c:	0800ba95 	.word	0x0800ba95
 800ba70:	0800baaf 	.word	0x0800baaf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ba74:	2300      	movs	r3, #0
 800ba76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ba7a:	e028      	b.n	800bace <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ba7c:	f107 0308 	add.w	r3, r7, #8
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7ff fe79 	bl	800b778 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ba86:	6a3a      	ldr	r2, [r7, #32]
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ba92:	e01c      	b.n	800bace <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ba94:	f107 0308 	add.w	r3, r7, #8
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7ff fe6d 	bl	800b778 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800baa6:	2300      	movs	r3, #0
 800baa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800baac:	e00f      	b.n	800bace <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800baae:	f107 0308 	add.w	r3, r7, #8
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7ff fe60 	bl	800b778 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	0a5a      	lsrs	r2, r3, #9
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bac0:	2300      	movs	r3, #0
 800bac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bac6:	e002      	b.n	800bace <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bac8:	2304      	movs	r3, #4
 800baca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3730      	adds	r7, #48	; 0x30
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	2400000d 	.word	0x2400000d

0800bae0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800bae0:	b480      	push	{r7}
 800bae2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800bae4:	4b03      	ldr	r3, [pc, #12]	; (800baf4 <BSP_SD_WriteCpltCallback+0x14>)
 800bae6:	2201      	movs	r2, #1
 800bae8:	601a      	str	r2, [r3, #0]
}
 800baea:	bf00      	nop
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr
 800baf4:	240003a0 	.word	0x240003a0

0800baf8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800baf8:	b480      	push	{r7}
 800bafa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800bafc:	4b03      	ldr	r3, [pc, #12]	; (800bb0c <BSP_SD_ReadCpltCallback+0x14>)
 800bafe:	2201      	movs	r2, #1
 800bb00:	601a      	str	r2, [r3, #0]
}
 800bb02:	bf00      	nop
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr
 800bb0c:	240003a4 	.word	0x240003a4

0800bb10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b087      	sub	sp, #28
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bb22:	2300      	movs	r3, #0
 800bb24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bb26:	4b1f      	ldr	r3, [pc, #124]	; (800bba4 <FATFS_LinkDriverEx+0x94>)
 800bb28:	7a5b      	ldrb	r3, [r3, #9]
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d131      	bne.n	800bb94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bb30:	4b1c      	ldr	r3, [pc, #112]	; (800bba4 <FATFS_LinkDriverEx+0x94>)
 800bb32:	7a5b      	ldrb	r3, [r3, #9]
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	461a      	mov	r2, r3
 800bb38:	4b1a      	ldr	r3, [pc, #104]	; (800bba4 <FATFS_LinkDriverEx+0x94>)
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bb3e:	4b19      	ldr	r3, [pc, #100]	; (800bba4 <FATFS_LinkDriverEx+0x94>)
 800bb40:	7a5b      	ldrb	r3, [r3, #9]
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	4a17      	ldr	r2, [pc, #92]	; (800bba4 <FATFS_LinkDriverEx+0x94>)
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	4413      	add	r3, r2
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bb4e:	4b15      	ldr	r3, [pc, #84]	; (800bba4 <FATFS_LinkDriverEx+0x94>)
 800bb50:	7a5b      	ldrb	r3, [r3, #9]
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	461a      	mov	r2, r3
 800bb56:	4b13      	ldr	r3, [pc, #76]	; (800bba4 <FATFS_LinkDriverEx+0x94>)
 800bb58:	4413      	add	r3, r2
 800bb5a:	79fa      	ldrb	r2, [r7, #7]
 800bb5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bb5e:	4b11      	ldr	r3, [pc, #68]	; (800bba4 <FATFS_LinkDriverEx+0x94>)
 800bb60:	7a5b      	ldrb	r3, [r3, #9]
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	1c5a      	adds	r2, r3, #1
 800bb66:	b2d1      	uxtb	r1, r2
 800bb68:	4a0e      	ldr	r2, [pc, #56]	; (800bba4 <FATFS_LinkDriverEx+0x94>)
 800bb6a:	7251      	strb	r1, [r2, #9]
 800bb6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bb6e:	7dbb      	ldrb	r3, [r7, #22]
 800bb70:	3330      	adds	r3, #48	; 0x30
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	223a      	movs	r2, #58	; 0x3a
 800bb7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	3302      	adds	r3, #2
 800bb84:	222f      	movs	r2, #47	; 0x2f
 800bb86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	3303      	adds	r3, #3
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bb90:	2300      	movs	r3, #0
 800bb92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bb94:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	371c      	adds	r7, #28
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	240003a8 	.word	0x240003a8

0800bba8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	6839      	ldr	r1, [r7, #0]
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f7ff ffaa 	bl	800bb10 <FATFS_LinkDriverEx>
 800bbbc:	4603      	mov	r3, r0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
	...

0800bbc8 <__errno>:
 800bbc8:	4b01      	ldr	r3, [pc, #4]	; (800bbd0 <__errno+0x8>)
 800bbca:	6818      	ldr	r0, [r3, #0]
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	24000010 	.word	0x24000010

0800bbd4 <__libc_init_array>:
 800bbd4:	b570      	push	{r4, r5, r6, lr}
 800bbd6:	4d0d      	ldr	r5, [pc, #52]	; (800bc0c <__libc_init_array+0x38>)
 800bbd8:	4c0d      	ldr	r4, [pc, #52]	; (800bc10 <__libc_init_array+0x3c>)
 800bbda:	1b64      	subs	r4, r4, r5
 800bbdc:	10a4      	asrs	r4, r4, #2
 800bbde:	2600      	movs	r6, #0
 800bbe0:	42a6      	cmp	r6, r4
 800bbe2:	d109      	bne.n	800bbf8 <__libc_init_array+0x24>
 800bbe4:	4d0b      	ldr	r5, [pc, #44]	; (800bc14 <__libc_init_array+0x40>)
 800bbe6:	4c0c      	ldr	r4, [pc, #48]	; (800bc18 <__libc_init_array+0x44>)
 800bbe8:	f000 fcdc 	bl	800c5a4 <_init>
 800bbec:	1b64      	subs	r4, r4, r5
 800bbee:	10a4      	asrs	r4, r4, #2
 800bbf0:	2600      	movs	r6, #0
 800bbf2:	42a6      	cmp	r6, r4
 800bbf4:	d105      	bne.n	800bc02 <__libc_init_array+0x2e>
 800bbf6:	bd70      	pop	{r4, r5, r6, pc}
 800bbf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbfc:	4798      	blx	r3
 800bbfe:	3601      	adds	r6, #1
 800bc00:	e7ee      	b.n	800bbe0 <__libc_init_array+0xc>
 800bc02:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc06:	4798      	blx	r3
 800bc08:	3601      	adds	r6, #1
 800bc0a:	e7f2      	b.n	800bbf2 <__libc_init_array+0x1e>
 800bc0c:	0800ca70 	.word	0x0800ca70
 800bc10:	0800ca70 	.word	0x0800ca70
 800bc14:	0800ca70 	.word	0x0800ca70
 800bc18:	0800ca74 	.word	0x0800ca74

0800bc1c <memcpy>:
 800bc1c:	440a      	add	r2, r1
 800bc1e:	4291      	cmp	r1, r2
 800bc20:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc24:	d100      	bne.n	800bc28 <memcpy+0xc>
 800bc26:	4770      	bx	lr
 800bc28:	b510      	push	{r4, lr}
 800bc2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc32:	4291      	cmp	r1, r2
 800bc34:	d1f9      	bne.n	800bc2a <memcpy+0xe>
 800bc36:	bd10      	pop	{r4, pc}

0800bc38 <memset>:
 800bc38:	4402      	add	r2, r0
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d100      	bne.n	800bc42 <memset+0xa>
 800bc40:	4770      	bx	lr
 800bc42:	f803 1b01 	strb.w	r1, [r3], #1
 800bc46:	e7f9      	b.n	800bc3c <memset+0x4>

0800bc48 <sniprintf>:
 800bc48:	b40c      	push	{r2, r3}
 800bc4a:	b530      	push	{r4, r5, lr}
 800bc4c:	4b17      	ldr	r3, [pc, #92]	; (800bcac <sniprintf+0x64>)
 800bc4e:	1e0c      	subs	r4, r1, #0
 800bc50:	681d      	ldr	r5, [r3, #0]
 800bc52:	b09d      	sub	sp, #116	; 0x74
 800bc54:	da08      	bge.n	800bc68 <sniprintf+0x20>
 800bc56:	238b      	movs	r3, #139	; 0x8b
 800bc58:	602b      	str	r3, [r5, #0]
 800bc5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5e:	b01d      	add	sp, #116	; 0x74
 800bc60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc64:	b002      	add	sp, #8
 800bc66:	4770      	bx	lr
 800bc68:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bc6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bc70:	bf14      	ite	ne
 800bc72:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bc76:	4623      	moveq	r3, r4
 800bc78:	9304      	str	r3, [sp, #16]
 800bc7a:	9307      	str	r3, [sp, #28]
 800bc7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc80:	9002      	str	r0, [sp, #8]
 800bc82:	9006      	str	r0, [sp, #24]
 800bc84:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bc88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bc8a:	ab21      	add	r3, sp, #132	; 0x84
 800bc8c:	a902      	add	r1, sp, #8
 800bc8e:	4628      	mov	r0, r5
 800bc90:	9301      	str	r3, [sp, #4]
 800bc92:	f000 f8a3 	bl	800bddc <_svfiprintf_r>
 800bc96:	1c43      	adds	r3, r0, #1
 800bc98:	bfbc      	itt	lt
 800bc9a:	238b      	movlt	r3, #139	; 0x8b
 800bc9c:	602b      	strlt	r3, [r5, #0]
 800bc9e:	2c00      	cmp	r4, #0
 800bca0:	d0dd      	beq.n	800bc5e <sniprintf+0x16>
 800bca2:	9b02      	ldr	r3, [sp, #8]
 800bca4:	2200      	movs	r2, #0
 800bca6:	701a      	strb	r2, [r3, #0]
 800bca8:	e7d9      	b.n	800bc5e <sniprintf+0x16>
 800bcaa:	bf00      	nop
 800bcac:	24000010 	.word	0x24000010

0800bcb0 <_vsniprintf_r>:
 800bcb0:	b530      	push	{r4, r5, lr}
 800bcb2:	4614      	mov	r4, r2
 800bcb4:	2c00      	cmp	r4, #0
 800bcb6:	b09b      	sub	sp, #108	; 0x6c
 800bcb8:	4605      	mov	r5, r0
 800bcba:	461a      	mov	r2, r3
 800bcbc:	da05      	bge.n	800bcca <_vsniprintf_r+0x1a>
 800bcbe:	238b      	movs	r3, #139	; 0x8b
 800bcc0:	6003      	str	r3, [r0, #0]
 800bcc2:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc6:	b01b      	add	sp, #108	; 0x6c
 800bcc8:	bd30      	pop	{r4, r5, pc}
 800bcca:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bcce:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bcd2:	bf14      	ite	ne
 800bcd4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bcd8:	4623      	moveq	r3, r4
 800bcda:	9302      	str	r3, [sp, #8]
 800bcdc:	9305      	str	r3, [sp, #20]
 800bcde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bce2:	9100      	str	r1, [sp, #0]
 800bce4:	9104      	str	r1, [sp, #16]
 800bce6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bcea:	4669      	mov	r1, sp
 800bcec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bcee:	f000 f875 	bl	800bddc <_svfiprintf_r>
 800bcf2:	1c43      	adds	r3, r0, #1
 800bcf4:	bfbc      	itt	lt
 800bcf6:	238b      	movlt	r3, #139	; 0x8b
 800bcf8:	602b      	strlt	r3, [r5, #0]
 800bcfa:	2c00      	cmp	r4, #0
 800bcfc:	d0e3      	beq.n	800bcc6 <_vsniprintf_r+0x16>
 800bcfe:	9b00      	ldr	r3, [sp, #0]
 800bd00:	2200      	movs	r2, #0
 800bd02:	701a      	strb	r2, [r3, #0]
 800bd04:	e7df      	b.n	800bcc6 <_vsniprintf_r+0x16>
	...

0800bd08 <vsniprintf>:
 800bd08:	b507      	push	{r0, r1, r2, lr}
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	460a      	mov	r2, r1
 800bd10:	4601      	mov	r1, r0
 800bd12:	4803      	ldr	r0, [pc, #12]	; (800bd20 <vsniprintf+0x18>)
 800bd14:	6800      	ldr	r0, [r0, #0]
 800bd16:	f7ff ffcb 	bl	800bcb0 <_vsniprintf_r>
 800bd1a:	b003      	add	sp, #12
 800bd1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd20:	24000010 	.word	0x24000010

0800bd24 <__ssputs_r>:
 800bd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd28:	688e      	ldr	r6, [r1, #8]
 800bd2a:	429e      	cmp	r6, r3
 800bd2c:	4682      	mov	sl, r0
 800bd2e:	460c      	mov	r4, r1
 800bd30:	4690      	mov	r8, r2
 800bd32:	461f      	mov	r7, r3
 800bd34:	d838      	bhi.n	800bda8 <__ssputs_r+0x84>
 800bd36:	898a      	ldrh	r2, [r1, #12]
 800bd38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd3c:	d032      	beq.n	800bda4 <__ssputs_r+0x80>
 800bd3e:	6825      	ldr	r5, [r4, #0]
 800bd40:	6909      	ldr	r1, [r1, #16]
 800bd42:	eba5 0901 	sub.w	r9, r5, r1
 800bd46:	6965      	ldr	r5, [r4, #20]
 800bd48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd50:	3301      	adds	r3, #1
 800bd52:	444b      	add	r3, r9
 800bd54:	106d      	asrs	r5, r5, #1
 800bd56:	429d      	cmp	r5, r3
 800bd58:	bf38      	it	cc
 800bd5a:	461d      	movcc	r5, r3
 800bd5c:	0553      	lsls	r3, r2, #21
 800bd5e:	d531      	bpl.n	800bdc4 <__ssputs_r+0xa0>
 800bd60:	4629      	mov	r1, r5
 800bd62:	f000 fb55 	bl	800c410 <_malloc_r>
 800bd66:	4606      	mov	r6, r0
 800bd68:	b950      	cbnz	r0, 800bd80 <__ssputs_r+0x5c>
 800bd6a:	230c      	movs	r3, #12
 800bd6c:	f8ca 3000 	str.w	r3, [sl]
 800bd70:	89a3      	ldrh	r3, [r4, #12]
 800bd72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd76:	81a3      	strh	r3, [r4, #12]
 800bd78:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd80:	6921      	ldr	r1, [r4, #16]
 800bd82:	464a      	mov	r2, r9
 800bd84:	f7ff ff4a 	bl	800bc1c <memcpy>
 800bd88:	89a3      	ldrh	r3, [r4, #12]
 800bd8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd92:	81a3      	strh	r3, [r4, #12]
 800bd94:	6126      	str	r6, [r4, #16]
 800bd96:	6165      	str	r5, [r4, #20]
 800bd98:	444e      	add	r6, r9
 800bd9a:	eba5 0509 	sub.w	r5, r5, r9
 800bd9e:	6026      	str	r6, [r4, #0]
 800bda0:	60a5      	str	r5, [r4, #8]
 800bda2:	463e      	mov	r6, r7
 800bda4:	42be      	cmp	r6, r7
 800bda6:	d900      	bls.n	800bdaa <__ssputs_r+0x86>
 800bda8:	463e      	mov	r6, r7
 800bdaa:	6820      	ldr	r0, [r4, #0]
 800bdac:	4632      	mov	r2, r6
 800bdae:	4641      	mov	r1, r8
 800bdb0:	f000 faa8 	bl	800c304 <memmove>
 800bdb4:	68a3      	ldr	r3, [r4, #8]
 800bdb6:	1b9b      	subs	r3, r3, r6
 800bdb8:	60a3      	str	r3, [r4, #8]
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	4433      	add	r3, r6
 800bdbe:	6023      	str	r3, [r4, #0]
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	e7db      	b.n	800bd7c <__ssputs_r+0x58>
 800bdc4:	462a      	mov	r2, r5
 800bdc6:	f000 fb97 	bl	800c4f8 <_realloc_r>
 800bdca:	4606      	mov	r6, r0
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d1e1      	bne.n	800bd94 <__ssputs_r+0x70>
 800bdd0:	6921      	ldr	r1, [r4, #16]
 800bdd2:	4650      	mov	r0, sl
 800bdd4:	f000 fab0 	bl	800c338 <_free_r>
 800bdd8:	e7c7      	b.n	800bd6a <__ssputs_r+0x46>
	...

0800bddc <_svfiprintf_r>:
 800bddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde0:	4698      	mov	r8, r3
 800bde2:	898b      	ldrh	r3, [r1, #12]
 800bde4:	061b      	lsls	r3, r3, #24
 800bde6:	b09d      	sub	sp, #116	; 0x74
 800bde8:	4607      	mov	r7, r0
 800bdea:	460d      	mov	r5, r1
 800bdec:	4614      	mov	r4, r2
 800bdee:	d50e      	bpl.n	800be0e <_svfiprintf_r+0x32>
 800bdf0:	690b      	ldr	r3, [r1, #16]
 800bdf2:	b963      	cbnz	r3, 800be0e <_svfiprintf_r+0x32>
 800bdf4:	2140      	movs	r1, #64	; 0x40
 800bdf6:	f000 fb0b 	bl	800c410 <_malloc_r>
 800bdfa:	6028      	str	r0, [r5, #0]
 800bdfc:	6128      	str	r0, [r5, #16]
 800bdfe:	b920      	cbnz	r0, 800be0a <_svfiprintf_r+0x2e>
 800be00:	230c      	movs	r3, #12
 800be02:	603b      	str	r3, [r7, #0]
 800be04:	f04f 30ff 	mov.w	r0, #4294967295
 800be08:	e0d1      	b.n	800bfae <_svfiprintf_r+0x1d2>
 800be0a:	2340      	movs	r3, #64	; 0x40
 800be0c:	616b      	str	r3, [r5, #20]
 800be0e:	2300      	movs	r3, #0
 800be10:	9309      	str	r3, [sp, #36]	; 0x24
 800be12:	2320      	movs	r3, #32
 800be14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be18:	f8cd 800c 	str.w	r8, [sp, #12]
 800be1c:	2330      	movs	r3, #48	; 0x30
 800be1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bfc8 <_svfiprintf_r+0x1ec>
 800be22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be26:	f04f 0901 	mov.w	r9, #1
 800be2a:	4623      	mov	r3, r4
 800be2c:	469a      	mov	sl, r3
 800be2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be32:	b10a      	cbz	r2, 800be38 <_svfiprintf_r+0x5c>
 800be34:	2a25      	cmp	r2, #37	; 0x25
 800be36:	d1f9      	bne.n	800be2c <_svfiprintf_r+0x50>
 800be38:	ebba 0b04 	subs.w	fp, sl, r4
 800be3c:	d00b      	beq.n	800be56 <_svfiprintf_r+0x7a>
 800be3e:	465b      	mov	r3, fp
 800be40:	4622      	mov	r2, r4
 800be42:	4629      	mov	r1, r5
 800be44:	4638      	mov	r0, r7
 800be46:	f7ff ff6d 	bl	800bd24 <__ssputs_r>
 800be4a:	3001      	adds	r0, #1
 800be4c:	f000 80aa 	beq.w	800bfa4 <_svfiprintf_r+0x1c8>
 800be50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be52:	445a      	add	r2, fp
 800be54:	9209      	str	r2, [sp, #36]	; 0x24
 800be56:	f89a 3000 	ldrb.w	r3, [sl]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 80a2 	beq.w	800bfa4 <_svfiprintf_r+0x1c8>
 800be60:	2300      	movs	r3, #0
 800be62:	f04f 32ff 	mov.w	r2, #4294967295
 800be66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be6a:	f10a 0a01 	add.w	sl, sl, #1
 800be6e:	9304      	str	r3, [sp, #16]
 800be70:	9307      	str	r3, [sp, #28]
 800be72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be76:	931a      	str	r3, [sp, #104]	; 0x68
 800be78:	4654      	mov	r4, sl
 800be7a:	2205      	movs	r2, #5
 800be7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be80:	4851      	ldr	r0, [pc, #324]	; (800bfc8 <_svfiprintf_r+0x1ec>)
 800be82:	f7f4 fa3d 	bl	8000300 <memchr>
 800be86:	9a04      	ldr	r2, [sp, #16]
 800be88:	b9d8      	cbnz	r0, 800bec2 <_svfiprintf_r+0xe6>
 800be8a:	06d0      	lsls	r0, r2, #27
 800be8c:	bf44      	itt	mi
 800be8e:	2320      	movmi	r3, #32
 800be90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be94:	0711      	lsls	r1, r2, #28
 800be96:	bf44      	itt	mi
 800be98:	232b      	movmi	r3, #43	; 0x2b
 800be9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be9e:	f89a 3000 	ldrb.w	r3, [sl]
 800bea2:	2b2a      	cmp	r3, #42	; 0x2a
 800bea4:	d015      	beq.n	800bed2 <_svfiprintf_r+0xf6>
 800bea6:	9a07      	ldr	r2, [sp, #28]
 800bea8:	4654      	mov	r4, sl
 800beaa:	2000      	movs	r0, #0
 800beac:	f04f 0c0a 	mov.w	ip, #10
 800beb0:	4621      	mov	r1, r4
 800beb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800beb6:	3b30      	subs	r3, #48	; 0x30
 800beb8:	2b09      	cmp	r3, #9
 800beba:	d94e      	bls.n	800bf5a <_svfiprintf_r+0x17e>
 800bebc:	b1b0      	cbz	r0, 800beec <_svfiprintf_r+0x110>
 800bebe:	9207      	str	r2, [sp, #28]
 800bec0:	e014      	b.n	800beec <_svfiprintf_r+0x110>
 800bec2:	eba0 0308 	sub.w	r3, r0, r8
 800bec6:	fa09 f303 	lsl.w	r3, r9, r3
 800beca:	4313      	orrs	r3, r2
 800becc:	9304      	str	r3, [sp, #16]
 800bece:	46a2      	mov	sl, r4
 800bed0:	e7d2      	b.n	800be78 <_svfiprintf_r+0x9c>
 800bed2:	9b03      	ldr	r3, [sp, #12]
 800bed4:	1d19      	adds	r1, r3, #4
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	9103      	str	r1, [sp, #12]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	bfbb      	ittet	lt
 800bede:	425b      	neglt	r3, r3
 800bee0:	f042 0202 	orrlt.w	r2, r2, #2
 800bee4:	9307      	strge	r3, [sp, #28]
 800bee6:	9307      	strlt	r3, [sp, #28]
 800bee8:	bfb8      	it	lt
 800beea:	9204      	strlt	r2, [sp, #16]
 800beec:	7823      	ldrb	r3, [r4, #0]
 800beee:	2b2e      	cmp	r3, #46	; 0x2e
 800bef0:	d10c      	bne.n	800bf0c <_svfiprintf_r+0x130>
 800bef2:	7863      	ldrb	r3, [r4, #1]
 800bef4:	2b2a      	cmp	r3, #42	; 0x2a
 800bef6:	d135      	bne.n	800bf64 <_svfiprintf_r+0x188>
 800bef8:	9b03      	ldr	r3, [sp, #12]
 800befa:	1d1a      	adds	r2, r3, #4
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	9203      	str	r2, [sp, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	bfb8      	it	lt
 800bf04:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf08:	3402      	adds	r4, #2
 800bf0a:	9305      	str	r3, [sp, #20]
 800bf0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bfd8 <_svfiprintf_r+0x1fc>
 800bf10:	7821      	ldrb	r1, [r4, #0]
 800bf12:	2203      	movs	r2, #3
 800bf14:	4650      	mov	r0, sl
 800bf16:	f7f4 f9f3 	bl	8000300 <memchr>
 800bf1a:	b140      	cbz	r0, 800bf2e <_svfiprintf_r+0x152>
 800bf1c:	2340      	movs	r3, #64	; 0x40
 800bf1e:	eba0 000a 	sub.w	r0, r0, sl
 800bf22:	fa03 f000 	lsl.w	r0, r3, r0
 800bf26:	9b04      	ldr	r3, [sp, #16]
 800bf28:	4303      	orrs	r3, r0
 800bf2a:	3401      	adds	r4, #1
 800bf2c:	9304      	str	r3, [sp, #16]
 800bf2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf32:	4826      	ldr	r0, [pc, #152]	; (800bfcc <_svfiprintf_r+0x1f0>)
 800bf34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf38:	2206      	movs	r2, #6
 800bf3a:	f7f4 f9e1 	bl	8000300 <memchr>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	d038      	beq.n	800bfb4 <_svfiprintf_r+0x1d8>
 800bf42:	4b23      	ldr	r3, [pc, #140]	; (800bfd0 <_svfiprintf_r+0x1f4>)
 800bf44:	bb1b      	cbnz	r3, 800bf8e <_svfiprintf_r+0x1b2>
 800bf46:	9b03      	ldr	r3, [sp, #12]
 800bf48:	3307      	adds	r3, #7
 800bf4a:	f023 0307 	bic.w	r3, r3, #7
 800bf4e:	3308      	adds	r3, #8
 800bf50:	9303      	str	r3, [sp, #12]
 800bf52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf54:	4433      	add	r3, r6
 800bf56:	9309      	str	r3, [sp, #36]	; 0x24
 800bf58:	e767      	b.n	800be2a <_svfiprintf_r+0x4e>
 800bf5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf5e:	460c      	mov	r4, r1
 800bf60:	2001      	movs	r0, #1
 800bf62:	e7a5      	b.n	800beb0 <_svfiprintf_r+0xd4>
 800bf64:	2300      	movs	r3, #0
 800bf66:	3401      	adds	r4, #1
 800bf68:	9305      	str	r3, [sp, #20]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	f04f 0c0a 	mov.w	ip, #10
 800bf70:	4620      	mov	r0, r4
 800bf72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf76:	3a30      	subs	r2, #48	; 0x30
 800bf78:	2a09      	cmp	r2, #9
 800bf7a:	d903      	bls.n	800bf84 <_svfiprintf_r+0x1a8>
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d0c5      	beq.n	800bf0c <_svfiprintf_r+0x130>
 800bf80:	9105      	str	r1, [sp, #20]
 800bf82:	e7c3      	b.n	800bf0c <_svfiprintf_r+0x130>
 800bf84:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf88:	4604      	mov	r4, r0
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e7f0      	b.n	800bf70 <_svfiprintf_r+0x194>
 800bf8e:	ab03      	add	r3, sp, #12
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	462a      	mov	r2, r5
 800bf94:	4b0f      	ldr	r3, [pc, #60]	; (800bfd4 <_svfiprintf_r+0x1f8>)
 800bf96:	a904      	add	r1, sp, #16
 800bf98:	4638      	mov	r0, r7
 800bf9a:	f3af 8000 	nop.w
 800bf9e:	1c42      	adds	r2, r0, #1
 800bfa0:	4606      	mov	r6, r0
 800bfa2:	d1d6      	bne.n	800bf52 <_svfiprintf_r+0x176>
 800bfa4:	89ab      	ldrh	r3, [r5, #12]
 800bfa6:	065b      	lsls	r3, r3, #25
 800bfa8:	f53f af2c 	bmi.w	800be04 <_svfiprintf_r+0x28>
 800bfac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfae:	b01d      	add	sp, #116	; 0x74
 800bfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb4:	ab03      	add	r3, sp, #12
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	462a      	mov	r2, r5
 800bfba:	4b06      	ldr	r3, [pc, #24]	; (800bfd4 <_svfiprintf_r+0x1f8>)
 800bfbc:	a904      	add	r1, sp, #16
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	f000 f87a 	bl	800c0b8 <_printf_i>
 800bfc4:	e7eb      	b.n	800bf9e <_svfiprintf_r+0x1c2>
 800bfc6:	bf00      	nop
 800bfc8:	0800ca34 	.word	0x0800ca34
 800bfcc:	0800ca3e 	.word	0x0800ca3e
 800bfd0:	00000000 	.word	0x00000000
 800bfd4:	0800bd25 	.word	0x0800bd25
 800bfd8:	0800ca3a 	.word	0x0800ca3a

0800bfdc <_printf_common>:
 800bfdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe0:	4616      	mov	r6, r2
 800bfe2:	4699      	mov	r9, r3
 800bfe4:	688a      	ldr	r2, [r1, #8]
 800bfe6:	690b      	ldr	r3, [r1, #16]
 800bfe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfec:	4293      	cmp	r3, r2
 800bfee:	bfb8      	it	lt
 800bff0:	4613      	movlt	r3, r2
 800bff2:	6033      	str	r3, [r6, #0]
 800bff4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bff8:	4607      	mov	r7, r0
 800bffa:	460c      	mov	r4, r1
 800bffc:	b10a      	cbz	r2, 800c002 <_printf_common+0x26>
 800bffe:	3301      	adds	r3, #1
 800c000:	6033      	str	r3, [r6, #0]
 800c002:	6823      	ldr	r3, [r4, #0]
 800c004:	0699      	lsls	r1, r3, #26
 800c006:	bf42      	ittt	mi
 800c008:	6833      	ldrmi	r3, [r6, #0]
 800c00a:	3302      	addmi	r3, #2
 800c00c:	6033      	strmi	r3, [r6, #0]
 800c00e:	6825      	ldr	r5, [r4, #0]
 800c010:	f015 0506 	ands.w	r5, r5, #6
 800c014:	d106      	bne.n	800c024 <_printf_common+0x48>
 800c016:	f104 0a19 	add.w	sl, r4, #25
 800c01a:	68e3      	ldr	r3, [r4, #12]
 800c01c:	6832      	ldr	r2, [r6, #0]
 800c01e:	1a9b      	subs	r3, r3, r2
 800c020:	42ab      	cmp	r3, r5
 800c022:	dc26      	bgt.n	800c072 <_printf_common+0x96>
 800c024:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c028:	1e13      	subs	r3, r2, #0
 800c02a:	6822      	ldr	r2, [r4, #0]
 800c02c:	bf18      	it	ne
 800c02e:	2301      	movne	r3, #1
 800c030:	0692      	lsls	r2, r2, #26
 800c032:	d42b      	bmi.n	800c08c <_printf_common+0xb0>
 800c034:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c038:	4649      	mov	r1, r9
 800c03a:	4638      	mov	r0, r7
 800c03c:	47c0      	blx	r8
 800c03e:	3001      	adds	r0, #1
 800c040:	d01e      	beq.n	800c080 <_printf_common+0xa4>
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	68e5      	ldr	r5, [r4, #12]
 800c046:	6832      	ldr	r2, [r6, #0]
 800c048:	f003 0306 	and.w	r3, r3, #6
 800c04c:	2b04      	cmp	r3, #4
 800c04e:	bf08      	it	eq
 800c050:	1aad      	subeq	r5, r5, r2
 800c052:	68a3      	ldr	r3, [r4, #8]
 800c054:	6922      	ldr	r2, [r4, #16]
 800c056:	bf0c      	ite	eq
 800c058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c05c:	2500      	movne	r5, #0
 800c05e:	4293      	cmp	r3, r2
 800c060:	bfc4      	itt	gt
 800c062:	1a9b      	subgt	r3, r3, r2
 800c064:	18ed      	addgt	r5, r5, r3
 800c066:	2600      	movs	r6, #0
 800c068:	341a      	adds	r4, #26
 800c06a:	42b5      	cmp	r5, r6
 800c06c:	d11a      	bne.n	800c0a4 <_printf_common+0xc8>
 800c06e:	2000      	movs	r0, #0
 800c070:	e008      	b.n	800c084 <_printf_common+0xa8>
 800c072:	2301      	movs	r3, #1
 800c074:	4652      	mov	r2, sl
 800c076:	4649      	mov	r1, r9
 800c078:	4638      	mov	r0, r7
 800c07a:	47c0      	blx	r8
 800c07c:	3001      	adds	r0, #1
 800c07e:	d103      	bne.n	800c088 <_printf_common+0xac>
 800c080:	f04f 30ff 	mov.w	r0, #4294967295
 800c084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c088:	3501      	adds	r5, #1
 800c08a:	e7c6      	b.n	800c01a <_printf_common+0x3e>
 800c08c:	18e1      	adds	r1, r4, r3
 800c08e:	1c5a      	adds	r2, r3, #1
 800c090:	2030      	movs	r0, #48	; 0x30
 800c092:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c096:	4422      	add	r2, r4
 800c098:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c09c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0a0:	3302      	adds	r3, #2
 800c0a2:	e7c7      	b.n	800c034 <_printf_common+0x58>
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	4622      	mov	r2, r4
 800c0a8:	4649      	mov	r1, r9
 800c0aa:	4638      	mov	r0, r7
 800c0ac:	47c0      	blx	r8
 800c0ae:	3001      	adds	r0, #1
 800c0b0:	d0e6      	beq.n	800c080 <_printf_common+0xa4>
 800c0b2:	3601      	adds	r6, #1
 800c0b4:	e7d9      	b.n	800c06a <_printf_common+0x8e>
	...

0800c0b8 <_printf_i>:
 800c0b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0bc:	7e0f      	ldrb	r7, [r1, #24]
 800c0be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c0c0:	2f78      	cmp	r7, #120	; 0x78
 800c0c2:	4691      	mov	r9, r2
 800c0c4:	4680      	mov	r8, r0
 800c0c6:	460c      	mov	r4, r1
 800c0c8:	469a      	mov	sl, r3
 800c0ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c0ce:	d807      	bhi.n	800c0e0 <_printf_i+0x28>
 800c0d0:	2f62      	cmp	r7, #98	; 0x62
 800c0d2:	d80a      	bhi.n	800c0ea <_printf_i+0x32>
 800c0d4:	2f00      	cmp	r7, #0
 800c0d6:	f000 80d8 	beq.w	800c28a <_printf_i+0x1d2>
 800c0da:	2f58      	cmp	r7, #88	; 0x58
 800c0dc:	f000 80a3 	beq.w	800c226 <_printf_i+0x16e>
 800c0e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0e8:	e03a      	b.n	800c160 <_printf_i+0xa8>
 800c0ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0ee:	2b15      	cmp	r3, #21
 800c0f0:	d8f6      	bhi.n	800c0e0 <_printf_i+0x28>
 800c0f2:	a101      	add	r1, pc, #4	; (adr r1, 800c0f8 <_printf_i+0x40>)
 800c0f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0f8:	0800c151 	.word	0x0800c151
 800c0fc:	0800c165 	.word	0x0800c165
 800c100:	0800c0e1 	.word	0x0800c0e1
 800c104:	0800c0e1 	.word	0x0800c0e1
 800c108:	0800c0e1 	.word	0x0800c0e1
 800c10c:	0800c0e1 	.word	0x0800c0e1
 800c110:	0800c165 	.word	0x0800c165
 800c114:	0800c0e1 	.word	0x0800c0e1
 800c118:	0800c0e1 	.word	0x0800c0e1
 800c11c:	0800c0e1 	.word	0x0800c0e1
 800c120:	0800c0e1 	.word	0x0800c0e1
 800c124:	0800c271 	.word	0x0800c271
 800c128:	0800c195 	.word	0x0800c195
 800c12c:	0800c253 	.word	0x0800c253
 800c130:	0800c0e1 	.word	0x0800c0e1
 800c134:	0800c0e1 	.word	0x0800c0e1
 800c138:	0800c293 	.word	0x0800c293
 800c13c:	0800c0e1 	.word	0x0800c0e1
 800c140:	0800c195 	.word	0x0800c195
 800c144:	0800c0e1 	.word	0x0800c0e1
 800c148:	0800c0e1 	.word	0x0800c0e1
 800c14c:	0800c25b 	.word	0x0800c25b
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	1d1a      	adds	r2, r3, #4
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	602a      	str	r2, [r5, #0]
 800c158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c15c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c160:	2301      	movs	r3, #1
 800c162:	e0a3      	b.n	800c2ac <_printf_i+0x1f4>
 800c164:	6820      	ldr	r0, [r4, #0]
 800c166:	6829      	ldr	r1, [r5, #0]
 800c168:	0606      	lsls	r6, r0, #24
 800c16a:	f101 0304 	add.w	r3, r1, #4
 800c16e:	d50a      	bpl.n	800c186 <_printf_i+0xce>
 800c170:	680e      	ldr	r6, [r1, #0]
 800c172:	602b      	str	r3, [r5, #0]
 800c174:	2e00      	cmp	r6, #0
 800c176:	da03      	bge.n	800c180 <_printf_i+0xc8>
 800c178:	232d      	movs	r3, #45	; 0x2d
 800c17a:	4276      	negs	r6, r6
 800c17c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c180:	485e      	ldr	r0, [pc, #376]	; (800c2fc <_printf_i+0x244>)
 800c182:	230a      	movs	r3, #10
 800c184:	e019      	b.n	800c1ba <_printf_i+0x102>
 800c186:	680e      	ldr	r6, [r1, #0]
 800c188:	602b      	str	r3, [r5, #0]
 800c18a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c18e:	bf18      	it	ne
 800c190:	b236      	sxthne	r6, r6
 800c192:	e7ef      	b.n	800c174 <_printf_i+0xbc>
 800c194:	682b      	ldr	r3, [r5, #0]
 800c196:	6820      	ldr	r0, [r4, #0]
 800c198:	1d19      	adds	r1, r3, #4
 800c19a:	6029      	str	r1, [r5, #0]
 800c19c:	0601      	lsls	r1, r0, #24
 800c19e:	d501      	bpl.n	800c1a4 <_printf_i+0xec>
 800c1a0:	681e      	ldr	r6, [r3, #0]
 800c1a2:	e002      	b.n	800c1aa <_printf_i+0xf2>
 800c1a4:	0646      	lsls	r6, r0, #25
 800c1a6:	d5fb      	bpl.n	800c1a0 <_printf_i+0xe8>
 800c1a8:	881e      	ldrh	r6, [r3, #0]
 800c1aa:	4854      	ldr	r0, [pc, #336]	; (800c2fc <_printf_i+0x244>)
 800c1ac:	2f6f      	cmp	r7, #111	; 0x6f
 800c1ae:	bf0c      	ite	eq
 800c1b0:	2308      	moveq	r3, #8
 800c1b2:	230a      	movne	r3, #10
 800c1b4:	2100      	movs	r1, #0
 800c1b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1ba:	6865      	ldr	r5, [r4, #4]
 800c1bc:	60a5      	str	r5, [r4, #8]
 800c1be:	2d00      	cmp	r5, #0
 800c1c0:	bfa2      	ittt	ge
 800c1c2:	6821      	ldrge	r1, [r4, #0]
 800c1c4:	f021 0104 	bicge.w	r1, r1, #4
 800c1c8:	6021      	strge	r1, [r4, #0]
 800c1ca:	b90e      	cbnz	r6, 800c1d0 <_printf_i+0x118>
 800c1cc:	2d00      	cmp	r5, #0
 800c1ce:	d04d      	beq.n	800c26c <_printf_i+0x1b4>
 800c1d0:	4615      	mov	r5, r2
 800c1d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800c1d6:	fb03 6711 	mls	r7, r3, r1, r6
 800c1da:	5dc7      	ldrb	r7, [r0, r7]
 800c1dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c1e0:	4637      	mov	r7, r6
 800c1e2:	42bb      	cmp	r3, r7
 800c1e4:	460e      	mov	r6, r1
 800c1e6:	d9f4      	bls.n	800c1d2 <_printf_i+0x11a>
 800c1e8:	2b08      	cmp	r3, #8
 800c1ea:	d10b      	bne.n	800c204 <_printf_i+0x14c>
 800c1ec:	6823      	ldr	r3, [r4, #0]
 800c1ee:	07de      	lsls	r6, r3, #31
 800c1f0:	d508      	bpl.n	800c204 <_printf_i+0x14c>
 800c1f2:	6923      	ldr	r3, [r4, #16]
 800c1f4:	6861      	ldr	r1, [r4, #4]
 800c1f6:	4299      	cmp	r1, r3
 800c1f8:	bfde      	ittt	le
 800c1fa:	2330      	movle	r3, #48	; 0x30
 800c1fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c200:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c204:	1b52      	subs	r2, r2, r5
 800c206:	6122      	str	r2, [r4, #16]
 800c208:	f8cd a000 	str.w	sl, [sp]
 800c20c:	464b      	mov	r3, r9
 800c20e:	aa03      	add	r2, sp, #12
 800c210:	4621      	mov	r1, r4
 800c212:	4640      	mov	r0, r8
 800c214:	f7ff fee2 	bl	800bfdc <_printf_common>
 800c218:	3001      	adds	r0, #1
 800c21a:	d14c      	bne.n	800c2b6 <_printf_i+0x1fe>
 800c21c:	f04f 30ff 	mov.w	r0, #4294967295
 800c220:	b004      	add	sp, #16
 800c222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c226:	4835      	ldr	r0, [pc, #212]	; (800c2fc <_printf_i+0x244>)
 800c228:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c22c:	6829      	ldr	r1, [r5, #0]
 800c22e:	6823      	ldr	r3, [r4, #0]
 800c230:	f851 6b04 	ldr.w	r6, [r1], #4
 800c234:	6029      	str	r1, [r5, #0]
 800c236:	061d      	lsls	r5, r3, #24
 800c238:	d514      	bpl.n	800c264 <_printf_i+0x1ac>
 800c23a:	07df      	lsls	r7, r3, #31
 800c23c:	bf44      	itt	mi
 800c23e:	f043 0320 	orrmi.w	r3, r3, #32
 800c242:	6023      	strmi	r3, [r4, #0]
 800c244:	b91e      	cbnz	r6, 800c24e <_printf_i+0x196>
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	f023 0320 	bic.w	r3, r3, #32
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	2310      	movs	r3, #16
 800c250:	e7b0      	b.n	800c1b4 <_printf_i+0xfc>
 800c252:	6823      	ldr	r3, [r4, #0]
 800c254:	f043 0320 	orr.w	r3, r3, #32
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	2378      	movs	r3, #120	; 0x78
 800c25c:	4828      	ldr	r0, [pc, #160]	; (800c300 <_printf_i+0x248>)
 800c25e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c262:	e7e3      	b.n	800c22c <_printf_i+0x174>
 800c264:	0659      	lsls	r1, r3, #25
 800c266:	bf48      	it	mi
 800c268:	b2b6      	uxthmi	r6, r6
 800c26a:	e7e6      	b.n	800c23a <_printf_i+0x182>
 800c26c:	4615      	mov	r5, r2
 800c26e:	e7bb      	b.n	800c1e8 <_printf_i+0x130>
 800c270:	682b      	ldr	r3, [r5, #0]
 800c272:	6826      	ldr	r6, [r4, #0]
 800c274:	6961      	ldr	r1, [r4, #20]
 800c276:	1d18      	adds	r0, r3, #4
 800c278:	6028      	str	r0, [r5, #0]
 800c27a:	0635      	lsls	r5, r6, #24
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	d501      	bpl.n	800c284 <_printf_i+0x1cc>
 800c280:	6019      	str	r1, [r3, #0]
 800c282:	e002      	b.n	800c28a <_printf_i+0x1d2>
 800c284:	0670      	lsls	r0, r6, #25
 800c286:	d5fb      	bpl.n	800c280 <_printf_i+0x1c8>
 800c288:	8019      	strh	r1, [r3, #0]
 800c28a:	2300      	movs	r3, #0
 800c28c:	6123      	str	r3, [r4, #16]
 800c28e:	4615      	mov	r5, r2
 800c290:	e7ba      	b.n	800c208 <_printf_i+0x150>
 800c292:	682b      	ldr	r3, [r5, #0]
 800c294:	1d1a      	adds	r2, r3, #4
 800c296:	602a      	str	r2, [r5, #0]
 800c298:	681d      	ldr	r5, [r3, #0]
 800c29a:	6862      	ldr	r2, [r4, #4]
 800c29c:	2100      	movs	r1, #0
 800c29e:	4628      	mov	r0, r5
 800c2a0:	f7f4 f82e 	bl	8000300 <memchr>
 800c2a4:	b108      	cbz	r0, 800c2aa <_printf_i+0x1f2>
 800c2a6:	1b40      	subs	r0, r0, r5
 800c2a8:	6060      	str	r0, [r4, #4]
 800c2aa:	6863      	ldr	r3, [r4, #4]
 800c2ac:	6123      	str	r3, [r4, #16]
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2b4:	e7a8      	b.n	800c208 <_printf_i+0x150>
 800c2b6:	6923      	ldr	r3, [r4, #16]
 800c2b8:	462a      	mov	r2, r5
 800c2ba:	4649      	mov	r1, r9
 800c2bc:	4640      	mov	r0, r8
 800c2be:	47d0      	blx	sl
 800c2c0:	3001      	adds	r0, #1
 800c2c2:	d0ab      	beq.n	800c21c <_printf_i+0x164>
 800c2c4:	6823      	ldr	r3, [r4, #0]
 800c2c6:	079b      	lsls	r3, r3, #30
 800c2c8:	d413      	bmi.n	800c2f2 <_printf_i+0x23a>
 800c2ca:	68e0      	ldr	r0, [r4, #12]
 800c2cc:	9b03      	ldr	r3, [sp, #12]
 800c2ce:	4298      	cmp	r0, r3
 800c2d0:	bfb8      	it	lt
 800c2d2:	4618      	movlt	r0, r3
 800c2d4:	e7a4      	b.n	800c220 <_printf_i+0x168>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	4632      	mov	r2, r6
 800c2da:	4649      	mov	r1, r9
 800c2dc:	4640      	mov	r0, r8
 800c2de:	47d0      	blx	sl
 800c2e0:	3001      	adds	r0, #1
 800c2e2:	d09b      	beq.n	800c21c <_printf_i+0x164>
 800c2e4:	3501      	adds	r5, #1
 800c2e6:	68e3      	ldr	r3, [r4, #12]
 800c2e8:	9903      	ldr	r1, [sp, #12]
 800c2ea:	1a5b      	subs	r3, r3, r1
 800c2ec:	42ab      	cmp	r3, r5
 800c2ee:	dcf2      	bgt.n	800c2d6 <_printf_i+0x21e>
 800c2f0:	e7eb      	b.n	800c2ca <_printf_i+0x212>
 800c2f2:	2500      	movs	r5, #0
 800c2f4:	f104 0619 	add.w	r6, r4, #25
 800c2f8:	e7f5      	b.n	800c2e6 <_printf_i+0x22e>
 800c2fa:	bf00      	nop
 800c2fc:	0800ca45 	.word	0x0800ca45
 800c300:	0800ca56 	.word	0x0800ca56

0800c304 <memmove>:
 800c304:	4288      	cmp	r0, r1
 800c306:	b510      	push	{r4, lr}
 800c308:	eb01 0402 	add.w	r4, r1, r2
 800c30c:	d902      	bls.n	800c314 <memmove+0x10>
 800c30e:	4284      	cmp	r4, r0
 800c310:	4623      	mov	r3, r4
 800c312:	d807      	bhi.n	800c324 <memmove+0x20>
 800c314:	1e43      	subs	r3, r0, #1
 800c316:	42a1      	cmp	r1, r4
 800c318:	d008      	beq.n	800c32c <memmove+0x28>
 800c31a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c31e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c322:	e7f8      	b.n	800c316 <memmove+0x12>
 800c324:	4402      	add	r2, r0
 800c326:	4601      	mov	r1, r0
 800c328:	428a      	cmp	r2, r1
 800c32a:	d100      	bne.n	800c32e <memmove+0x2a>
 800c32c:	bd10      	pop	{r4, pc}
 800c32e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c336:	e7f7      	b.n	800c328 <memmove+0x24>

0800c338 <_free_r>:
 800c338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c33a:	2900      	cmp	r1, #0
 800c33c:	d044      	beq.n	800c3c8 <_free_r+0x90>
 800c33e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c342:	9001      	str	r0, [sp, #4]
 800c344:	2b00      	cmp	r3, #0
 800c346:	f1a1 0404 	sub.w	r4, r1, #4
 800c34a:	bfb8      	it	lt
 800c34c:	18e4      	addlt	r4, r4, r3
 800c34e:	f000 f913 	bl	800c578 <__malloc_lock>
 800c352:	4a1e      	ldr	r2, [pc, #120]	; (800c3cc <_free_r+0x94>)
 800c354:	9801      	ldr	r0, [sp, #4]
 800c356:	6813      	ldr	r3, [r2, #0]
 800c358:	b933      	cbnz	r3, 800c368 <_free_r+0x30>
 800c35a:	6063      	str	r3, [r4, #4]
 800c35c:	6014      	str	r4, [r2, #0]
 800c35e:	b003      	add	sp, #12
 800c360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c364:	f000 b90e 	b.w	800c584 <__malloc_unlock>
 800c368:	42a3      	cmp	r3, r4
 800c36a:	d908      	bls.n	800c37e <_free_r+0x46>
 800c36c:	6825      	ldr	r5, [r4, #0]
 800c36e:	1961      	adds	r1, r4, r5
 800c370:	428b      	cmp	r3, r1
 800c372:	bf01      	itttt	eq
 800c374:	6819      	ldreq	r1, [r3, #0]
 800c376:	685b      	ldreq	r3, [r3, #4]
 800c378:	1949      	addeq	r1, r1, r5
 800c37a:	6021      	streq	r1, [r4, #0]
 800c37c:	e7ed      	b.n	800c35a <_free_r+0x22>
 800c37e:	461a      	mov	r2, r3
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	b10b      	cbz	r3, 800c388 <_free_r+0x50>
 800c384:	42a3      	cmp	r3, r4
 800c386:	d9fa      	bls.n	800c37e <_free_r+0x46>
 800c388:	6811      	ldr	r1, [r2, #0]
 800c38a:	1855      	adds	r5, r2, r1
 800c38c:	42a5      	cmp	r5, r4
 800c38e:	d10b      	bne.n	800c3a8 <_free_r+0x70>
 800c390:	6824      	ldr	r4, [r4, #0]
 800c392:	4421      	add	r1, r4
 800c394:	1854      	adds	r4, r2, r1
 800c396:	42a3      	cmp	r3, r4
 800c398:	6011      	str	r1, [r2, #0]
 800c39a:	d1e0      	bne.n	800c35e <_free_r+0x26>
 800c39c:	681c      	ldr	r4, [r3, #0]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	6053      	str	r3, [r2, #4]
 800c3a2:	4421      	add	r1, r4
 800c3a4:	6011      	str	r1, [r2, #0]
 800c3a6:	e7da      	b.n	800c35e <_free_r+0x26>
 800c3a8:	d902      	bls.n	800c3b0 <_free_r+0x78>
 800c3aa:	230c      	movs	r3, #12
 800c3ac:	6003      	str	r3, [r0, #0]
 800c3ae:	e7d6      	b.n	800c35e <_free_r+0x26>
 800c3b0:	6825      	ldr	r5, [r4, #0]
 800c3b2:	1961      	adds	r1, r4, r5
 800c3b4:	428b      	cmp	r3, r1
 800c3b6:	bf04      	itt	eq
 800c3b8:	6819      	ldreq	r1, [r3, #0]
 800c3ba:	685b      	ldreq	r3, [r3, #4]
 800c3bc:	6063      	str	r3, [r4, #4]
 800c3be:	bf04      	itt	eq
 800c3c0:	1949      	addeq	r1, r1, r5
 800c3c2:	6021      	streq	r1, [r4, #0]
 800c3c4:	6054      	str	r4, [r2, #4]
 800c3c6:	e7ca      	b.n	800c35e <_free_r+0x26>
 800c3c8:	b003      	add	sp, #12
 800c3ca:	bd30      	pop	{r4, r5, pc}
 800c3cc:	240003b4 	.word	0x240003b4

0800c3d0 <sbrk_aligned>:
 800c3d0:	b570      	push	{r4, r5, r6, lr}
 800c3d2:	4e0e      	ldr	r6, [pc, #56]	; (800c40c <sbrk_aligned+0x3c>)
 800c3d4:	460c      	mov	r4, r1
 800c3d6:	6831      	ldr	r1, [r6, #0]
 800c3d8:	4605      	mov	r5, r0
 800c3da:	b911      	cbnz	r1, 800c3e2 <sbrk_aligned+0x12>
 800c3dc:	f000 f8bc 	bl	800c558 <_sbrk_r>
 800c3e0:	6030      	str	r0, [r6, #0]
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	f000 f8b7 	bl	800c558 <_sbrk_r>
 800c3ea:	1c43      	adds	r3, r0, #1
 800c3ec:	d00a      	beq.n	800c404 <sbrk_aligned+0x34>
 800c3ee:	1cc4      	adds	r4, r0, #3
 800c3f0:	f024 0403 	bic.w	r4, r4, #3
 800c3f4:	42a0      	cmp	r0, r4
 800c3f6:	d007      	beq.n	800c408 <sbrk_aligned+0x38>
 800c3f8:	1a21      	subs	r1, r4, r0
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	f000 f8ac 	bl	800c558 <_sbrk_r>
 800c400:	3001      	adds	r0, #1
 800c402:	d101      	bne.n	800c408 <sbrk_aligned+0x38>
 800c404:	f04f 34ff 	mov.w	r4, #4294967295
 800c408:	4620      	mov	r0, r4
 800c40a:	bd70      	pop	{r4, r5, r6, pc}
 800c40c:	240003b8 	.word	0x240003b8

0800c410 <_malloc_r>:
 800c410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c414:	1ccd      	adds	r5, r1, #3
 800c416:	f025 0503 	bic.w	r5, r5, #3
 800c41a:	3508      	adds	r5, #8
 800c41c:	2d0c      	cmp	r5, #12
 800c41e:	bf38      	it	cc
 800c420:	250c      	movcc	r5, #12
 800c422:	2d00      	cmp	r5, #0
 800c424:	4607      	mov	r7, r0
 800c426:	db01      	blt.n	800c42c <_malloc_r+0x1c>
 800c428:	42a9      	cmp	r1, r5
 800c42a:	d905      	bls.n	800c438 <_malloc_r+0x28>
 800c42c:	230c      	movs	r3, #12
 800c42e:	603b      	str	r3, [r7, #0]
 800c430:	2600      	movs	r6, #0
 800c432:	4630      	mov	r0, r6
 800c434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c438:	4e2e      	ldr	r6, [pc, #184]	; (800c4f4 <_malloc_r+0xe4>)
 800c43a:	f000 f89d 	bl	800c578 <__malloc_lock>
 800c43e:	6833      	ldr	r3, [r6, #0]
 800c440:	461c      	mov	r4, r3
 800c442:	bb34      	cbnz	r4, 800c492 <_malloc_r+0x82>
 800c444:	4629      	mov	r1, r5
 800c446:	4638      	mov	r0, r7
 800c448:	f7ff ffc2 	bl	800c3d0 <sbrk_aligned>
 800c44c:	1c43      	adds	r3, r0, #1
 800c44e:	4604      	mov	r4, r0
 800c450:	d14d      	bne.n	800c4ee <_malloc_r+0xde>
 800c452:	6834      	ldr	r4, [r6, #0]
 800c454:	4626      	mov	r6, r4
 800c456:	2e00      	cmp	r6, #0
 800c458:	d140      	bne.n	800c4dc <_malloc_r+0xcc>
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	4631      	mov	r1, r6
 800c45e:	4638      	mov	r0, r7
 800c460:	eb04 0803 	add.w	r8, r4, r3
 800c464:	f000 f878 	bl	800c558 <_sbrk_r>
 800c468:	4580      	cmp	r8, r0
 800c46a:	d13a      	bne.n	800c4e2 <_malloc_r+0xd2>
 800c46c:	6821      	ldr	r1, [r4, #0]
 800c46e:	3503      	adds	r5, #3
 800c470:	1a6d      	subs	r5, r5, r1
 800c472:	f025 0503 	bic.w	r5, r5, #3
 800c476:	3508      	adds	r5, #8
 800c478:	2d0c      	cmp	r5, #12
 800c47a:	bf38      	it	cc
 800c47c:	250c      	movcc	r5, #12
 800c47e:	4629      	mov	r1, r5
 800c480:	4638      	mov	r0, r7
 800c482:	f7ff ffa5 	bl	800c3d0 <sbrk_aligned>
 800c486:	3001      	adds	r0, #1
 800c488:	d02b      	beq.n	800c4e2 <_malloc_r+0xd2>
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	442b      	add	r3, r5
 800c48e:	6023      	str	r3, [r4, #0]
 800c490:	e00e      	b.n	800c4b0 <_malloc_r+0xa0>
 800c492:	6822      	ldr	r2, [r4, #0]
 800c494:	1b52      	subs	r2, r2, r5
 800c496:	d41e      	bmi.n	800c4d6 <_malloc_r+0xc6>
 800c498:	2a0b      	cmp	r2, #11
 800c49a:	d916      	bls.n	800c4ca <_malloc_r+0xba>
 800c49c:	1961      	adds	r1, r4, r5
 800c49e:	42a3      	cmp	r3, r4
 800c4a0:	6025      	str	r5, [r4, #0]
 800c4a2:	bf18      	it	ne
 800c4a4:	6059      	strne	r1, [r3, #4]
 800c4a6:	6863      	ldr	r3, [r4, #4]
 800c4a8:	bf08      	it	eq
 800c4aa:	6031      	streq	r1, [r6, #0]
 800c4ac:	5162      	str	r2, [r4, r5]
 800c4ae:	604b      	str	r3, [r1, #4]
 800c4b0:	4638      	mov	r0, r7
 800c4b2:	f104 060b 	add.w	r6, r4, #11
 800c4b6:	f000 f865 	bl	800c584 <__malloc_unlock>
 800c4ba:	f026 0607 	bic.w	r6, r6, #7
 800c4be:	1d23      	adds	r3, r4, #4
 800c4c0:	1af2      	subs	r2, r6, r3
 800c4c2:	d0b6      	beq.n	800c432 <_malloc_r+0x22>
 800c4c4:	1b9b      	subs	r3, r3, r6
 800c4c6:	50a3      	str	r3, [r4, r2]
 800c4c8:	e7b3      	b.n	800c432 <_malloc_r+0x22>
 800c4ca:	6862      	ldr	r2, [r4, #4]
 800c4cc:	42a3      	cmp	r3, r4
 800c4ce:	bf0c      	ite	eq
 800c4d0:	6032      	streq	r2, [r6, #0]
 800c4d2:	605a      	strne	r2, [r3, #4]
 800c4d4:	e7ec      	b.n	800c4b0 <_malloc_r+0xa0>
 800c4d6:	4623      	mov	r3, r4
 800c4d8:	6864      	ldr	r4, [r4, #4]
 800c4da:	e7b2      	b.n	800c442 <_malloc_r+0x32>
 800c4dc:	4634      	mov	r4, r6
 800c4de:	6876      	ldr	r6, [r6, #4]
 800c4e0:	e7b9      	b.n	800c456 <_malloc_r+0x46>
 800c4e2:	230c      	movs	r3, #12
 800c4e4:	603b      	str	r3, [r7, #0]
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	f000 f84c 	bl	800c584 <__malloc_unlock>
 800c4ec:	e7a1      	b.n	800c432 <_malloc_r+0x22>
 800c4ee:	6025      	str	r5, [r4, #0]
 800c4f0:	e7de      	b.n	800c4b0 <_malloc_r+0xa0>
 800c4f2:	bf00      	nop
 800c4f4:	240003b4 	.word	0x240003b4

0800c4f8 <_realloc_r>:
 800c4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4fc:	4680      	mov	r8, r0
 800c4fe:	4614      	mov	r4, r2
 800c500:	460e      	mov	r6, r1
 800c502:	b921      	cbnz	r1, 800c50e <_realloc_r+0x16>
 800c504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c508:	4611      	mov	r1, r2
 800c50a:	f7ff bf81 	b.w	800c410 <_malloc_r>
 800c50e:	b92a      	cbnz	r2, 800c51c <_realloc_r+0x24>
 800c510:	f7ff ff12 	bl	800c338 <_free_r>
 800c514:	4625      	mov	r5, r4
 800c516:	4628      	mov	r0, r5
 800c518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c51c:	f000 f838 	bl	800c590 <_malloc_usable_size_r>
 800c520:	4284      	cmp	r4, r0
 800c522:	4607      	mov	r7, r0
 800c524:	d802      	bhi.n	800c52c <_realloc_r+0x34>
 800c526:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c52a:	d812      	bhi.n	800c552 <_realloc_r+0x5a>
 800c52c:	4621      	mov	r1, r4
 800c52e:	4640      	mov	r0, r8
 800c530:	f7ff ff6e 	bl	800c410 <_malloc_r>
 800c534:	4605      	mov	r5, r0
 800c536:	2800      	cmp	r0, #0
 800c538:	d0ed      	beq.n	800c516 <_realloc_r+0x1e>
 800c53a:	42bc      	cmp	r4, r7
 800c53c:	4622      	mov	r2, r4
 800c53e:	4631      	mov	r1, r6
 800c540:	bf28      	it	cs
 800c542:	463a      	movcs	r2, r7
 800c544:	f7ff fb6a 	bl	800bc1c <memcpy>
 800c548:	4631      	mov	r1, r6
 800c54a:	4640      	mov	r0, r8
 800c54c:	f7ff fef4 	bl	800c338 <_free_r>
 800c550:	e7e1      	b.n	800c516 <_realloc_r+0x1e>
 800c552:	4635      	mov	r5, r6
 800c554:	e7df      	b.n	800c516 <_realloc_r+0x1e>
	...

0800c558 <_sbrk_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4d06      	ldr	r5, [pc, #24]	; (800c574 <_sbrk_r+0x1c>)
 800c55c:	2300      	movs	r3, #0
 800c55e:	4604      	mov	r4, r0
 800c560:	4608      	mov	r0, r1
 800c562:	602b      	str	r3, [r5, #0]
 800c564:	f7f5 fbfe 	bl	8001d64 <_sbrk>
 800c568:	1c43      	adds	r3, r0, #1
 800c56a:	d102      	bne.n	800c572 <_sbrk_r+0x1a>
 800c56c:	682b      	ldr	r3, [r5, #0]
 800c56e:	b103      	cbz	r3, 800c572 <_sbrk_r+0x1a>
 800c570:	6023      	str	r3, [r4, #0]
 800c572:	bd38      	pop	{r3, r4, r5, pc}
 800c574:	240003bc 	.word	0x240003bc

0800c578 <__malloc_lock>:
 800c578:	4801      	ldr	r0, [pc, #4]	; (800c580 <__malloc_lock+0x8>)
 800c57a:	f000 b811 	b.w	800c5a0 <__retarget_lock_acquire_recursive>
 800c57e:	bf00      	nop
 800c580:	240003c0 	.word	0x240003c0

0800c584 <__malloc_unlock>:
 800c584:	4801      	ldr	r0, [pc, #4]	; (800c58c <__malloc_unlock+0x8>)
 800c586:	f000 b80c 	b.w	800c5a2 <__retarget_lock_release_recursive>
 800c58a:	bf00      	nop
 800c58c:	240003c0 	.word	0x240003c0

0800c590 <_malloc_usable_size_r>:
 800c590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c594:	1f18      	subs	r0, r3, #4
 800c596:	2b00      	cmp	r3, #0
 800c598:	bfbc      	itt	lt
 800c59a:	580b      	ldrlt	r3, [r1, r0]
 800c59c:	18c0      	addlt	r0, r0, r3
 800c59e:	4770      	bx	lr

0800c5a0 <__retarget_lock_acquire_recursive>:
 800c5a0:	4770      	bx	lr

0800c5a2 <__retarget_lock_release_recursive>:
 800c5a2:	4770      	bx	lr

0800c5a4 <_init>:
 800c5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a6:	bf00      	nop
 800c5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5aa:	bc08      	pop	{r3}
 800c5ac:	469e      	mov	lr, r3
 800c5ae:	4770      	bx	lr

0800c5b0 <_fini>:
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b2:	bf00      	nop
 800c5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5b6:	bc08      	pop	{r3}
 800c5b8:	469e      	mov	lr, r3
 800c5ba:	4770      	bx	lr
